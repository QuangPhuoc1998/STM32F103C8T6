
SD-CARD-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f4  080094f4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080094f4  080094f4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094f4  080094f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080094fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047d8  20000084  08009580  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000485c  08009580  0002485c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fbd  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd4  00000000  00000000  0003506a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  000388f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b39  00000000  00000000  00039378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9b6  00000000  00000000  0004feb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e585  00000000  00000000  0005c867  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cadec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  000cae68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ce4 	.word	0x08008ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08008ce4 	.word	0x08008ce4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__aeabi_d2uiz>:
 80008f8:	004a      	lsls	r2, r1, #1
 80008fa:	d211      	bcs.n	8000920 <__aeabi_d2uiz+0x28>
 80008fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000900:	d211      	bcs.n	8000926 <__aeabi_d2uiz+0x2e>
 8000902:	d50d      	bpl.n	8000920 <__aeabi_d2uiz+0x28>
 8000904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800090c:	d40e      	bmi.n	800092c <__aeabi_d2uiz+0x34>
 800090e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	4770      	bx	lr
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	4770      	bx	lr
 8000926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092a:	d102      	bne.n	8000932 <__aeabi_d2uiz+0x3a>
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000930:	4770      	bx	lr
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	4770      	bx	lr

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x28>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x28>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f907 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f007 fb7a 	bl	800804c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f911 	bl	8000baa <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f000 f8e7 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004
 80009c0:	20000000 	.word	0x20000000

080009c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_IncTick+0x20>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000004 	.word	0x20000004
 80009e4:	200002dc 	.word	0x200002dc

080009e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <HAL_GetTick+0x10>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	200002dc 	.word	0x200002dc

080009fc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da0b      	bge.n	8000a8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <NVIC_SetPriority+0x4c>)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	3b04      	subs	r3, #4
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8a:	e009      	b.n	8000aa0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <NVIC_SetPriority+0x50>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff90 	bl	8000a60 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff49 	bl	80009fc <NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff5e 	bl	8000a44 <NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff90 	bl	8000ab4 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5f 	bl	8000a60 <NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffb0 	bl	8000b18 <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
 8000be6:	e127      	b.n	8000e38 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000be8:	2201      	movs	r2, #1
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8116 	bne.w	8000e32 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d034      	beq.n	8000c78 <HAL_GPIO_Init+0xb4>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d80d      	bhi.n	8000c2e <HAL_GPIO_Init+0x6a>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d02b      	beq.n	8000c6e <HAL_GPIO_Init+0xaa>
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d804      	bhi.n	8000c24 <HAL_GPIO_Init+0x60>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d031      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d01c      	beq.n	8000c5c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e048      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d043      	beq.n	8000cb0 <HAL_GPIO_Init+0xec>
 8000c28:	2b11      	cmp	r3, #17
 8000c2a:	d01b      	beq.n	8000c64 <HAL_GPIO_Init+0xa0>
          break;
 8000c2c:	e043      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c2e:	4a87      	ldr	r2, [pc, #540]	; (8000e4c <HAL_GPIO_Init+0x288>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d026      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
 8000c34:	4a85      	ldr	r2, [pc, #532]	; (8000e4c <HAL_GPIO_Init+0x288>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d806      	bhi.n	8000c48 <HAL_GPIO_Init+0x84>
 8000c3a:	4a85      	ldr	r2, [pc, #532]	; (8000e50 <HAL_GPIO_Init+0x28c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d020      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
 8000c40:	4a84      	ldr	r2, [pc, #528]	; (8000e54 <HAL_GPIO_Init+0x290>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01d      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
          break;
 8000c46:	e036      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c48:	4a83      	ldr	r2, [pc, #524]	; (8000e58 <HAL_GPIO_Init+0x294>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
 8000c4e:	4a83      	ldr	r2, [pc, #524]	; (8000e5c <HAL_GPIO_Init+0x298>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d016      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
 8000c54:	4a82      	ldr	r2, [pc, #520]	; (8000e60 <HAL_GPIO_Init+0x29c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0xbe>
          break;
 8000c5a:	e02c      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e028      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e023      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e01e      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e019      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e012      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d105      	bne.n	8000ca4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	611a      	str	r2, [r3, #16]
          break;
 8000ca2:	e008      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	615a      	str	r2, [r3, #20]
          break;
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2bff      	cmp	r3, #255	; 0xff
 8000cba:	d801      	bhi.n	8000cc0 <HAL_GPIO_Init+0xfc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	e001      	b.n	8000cc4 <HAL_GPIO_Init+0x100>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d802      	bhi.n	8000cd2 <HAL_GPIO_Init+0x10e>
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x114>
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	210f      	movs	r1, #15
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	6a39      	ldr	r1, [r7, #32]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 8096 	beq.w	8000e32 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <HAL_GPIO_Init+0x2a0>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <HAL_GPIO_Init+0x2a0>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <HAL_GPIO_Init+0x2a0>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d1e:	4a52      	ldr	r2, [pc, #328]	; (8000e68 <HAL_GPIO_Init+0x2a4>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <HAL_GPIO_Init+0x2a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x1ae>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <HAL_GPIO_Init+0x2ac>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x1aa>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a47      	ldr	r2, [pc, #284]	; (8000e74 <HAL_GPIO_Init+0x2b0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x1a6>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a46      	ldr	r2, [pc, #280]	; (8000e78 <HAL_GPIO_Init+0x2b4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x1a2>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x1b0>
 8000d66:	2304      	movs	r3, #4
 8000d68:	e004      	b.n	8000d74 <HAL_GPIO_Init+0x1b0>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_Init+0x1b0>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x1b0>
 8000d72:	2300      	movs	r3, #0
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	f002 0203 	and.w	r2, r2, #3
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4093      	lsls	r3, r2
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000d84:	4938      	ldr	r1, [pc, #224]	; (8000e68 <HAL_GPIO_Init+0x2a4>)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9e:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4936      	ldr	r1, [pc, #216]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4931      	ldr	r1, [pc, #196]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	492c      	ldr	r1, [pc, #176]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4927      	ldr	r1, [pc, #156]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4922      	ldr	r1, [pc, #136]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	491d      	ldr	r1, [pc, #116]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	4918      	ldr	r1, [pc, #96]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4913      	ldr	r1, [pc, #76]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f aed4 	bls.w	8000be8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	372c      	adds	r7, #44	; 0x2c
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	10210000 	.word	0x10210000
 8000e50:	10110000 	.word	0x10110000
 8000e54:	10120000 	.word	0x10120000
 8000e58:	10310000 	.word	0x10310000
 8000e5c:	10320000 	.word	0x10320000
 8000e60:	10220000 	.word	0x10220000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40010400 	.word	0x40010400

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e9c:	e003      	b.n	8000ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	611a      	str	r2, [r3, #16]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 8087 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eca:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed6:	4b8f      	ldr	r3, [pc, #572]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d112      	bne.n	8000f08 <HAL_RCC_OscConfig+0x58>
 8000ee2:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eee:	d10b      	bne.n	8000f08 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	4b88      	ldr	r3, [pc, #544]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d06c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x126>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d168      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e22d      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f10:	d106      	bne.n	8000f20 <HAL_RCC_OscConfig+0x70>
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e02e      	b.n	8000f7e <HAL_RCC_OscConfig+0xce>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10c      	bne.n	8000f42 <HAL_RCC_OscConfig+0x92>
 8000f28:	4b7a      	ldr	r3, [pc, #488]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b77      	ldr	r3, [pc, #476]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a76      	ldr	r2, [pc, #472]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e01d      	b.n	8000f7e <HAL_RCC_OscConfig+0xce>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4a:	d10c      	bne.n	8000f66 <HAL_RCC_OscConfig+0xb6>
 8000f4c:	4b71      	ldr	r3, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a70      	ldr	r2, [pc, #448]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b6e      	ldr	r3, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a6d      	ldr	r2, [pc, #436]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	e00b      	b.n	8000f7e <HAL_RCC_OscConfig+0xce>
 8000f66:	4b6b      	ldr	r3, [pc, #428]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6a      	ldr	r2, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b68      	ldr	r3, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a67      	ldr	r2, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d013      	beq.n	8000fae <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fd2f 	bl	80009e8 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fd2b 	bl	80009e8 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1e1      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa0:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0xde>
 8000fac:	e014      	b.n	8000fd8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fd1b 	bl	80009e8 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fd17 	bl	80009e8 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e1cd      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x106>
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d063      	beq.n	80010ac <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d11c      	bne.n	8001036 <HAL_RCC_OscConfig+0x186>
 8000ffc:	4b45      	ldr	r3, [pc, #276]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d116      	bne.n	8001036 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x170>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d001      	beq.n	8001020 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e1a1      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4939      	ldr	r1, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8001030:	4313      	orrs	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001034:	e03a      	b.n	80010ac <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d020      	beq.n	8001080 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x268>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcd0 	bl	80009e8 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fccc 	bl	80009e8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e182      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4926      	ldr	r1, [pc, #152]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	e015      	b.n	80010ac <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_RCC_OscConfig+0x268>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fcaf 	bl	80009e8 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fcab 	bl	80009e8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e161      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d039      	beq.n	800112c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d019      	beq.n	80010f4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fc8f 	bl	80009e8 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ce:	f7ff fc8b 	bl	80009e8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e141      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_RCC_OscConfig+0x264>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fae3 	bl	80016b8 <RCC_Delay>
 80010f2:	e01b      	b.n	800112c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_RCC_OscConfig+0x26c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fc75 	bl	80009e8 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	e00e      	b.n	8001120 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fc71 	bl	80009e8 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d907      	bls.n	8001120 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e127      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
 8001114:	40021000 	.word	0x40021000
 8001118:	42420000 	.word	0x42420000
 800111c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	4b92      	ldr	r3, [pc, #584]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ea      	bne.n	8001102 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a6 	beq.w	8001286 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b88      	ldr	r3, [pc, #544]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a87      	ldr	r2, [pc, #540]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b85      	ldr	r3, [pc, #532]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_OscConfig+0x4c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x4c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a7e      	ldr	r2, [pc, #504]	; (8001370 <HAL_RCC_OscConfig+0x4c0>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fc33 	bl	80009e8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fc2f 	bl	80009e8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0e5      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b75      	ldr	r3, [pc, #468]	; (8001370 <HAL_RCC_OscConfig+0x4c0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x30a>
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a6e      	ldr	r2, [pc, #440]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e02d      	b.n	8001216 <HAL_RCC_OscConfig+0x366>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x32c>
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x366>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x34e>
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a60      	ldr	r2, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a5d      	ldr	r2, [pc, #372]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e00b      	b.n	8001216 <HAL_RCC_OscConfig+0x366>
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbe3 	bl	80009e8 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fbdf 	bl	80009e8 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e093      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ee      	beq.n	8001226 <HAL_RCC_OscConfig+0x376>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fbcd 	bl	80009e8 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fbc9 	bl	80009e8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e07d      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a3b      	ldr	r2, [pc, #236]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d069      	beq.n	8001362 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d061      	beq.n	800135e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d146      	bne.n	8001330 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb9e 	bl	80009e8 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fb9a 	bl	80009e8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e050      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d6:	d108      	bne.n	80012ea <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4921      	ldr	r1, [pc, #132]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a19      	ldr	r1, [r3, #32]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	430b      	orrs	r3, r1
 80012fc:	491b      	ldr	r1, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb6e 	bl	80009e8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fb6a 	bl	80009e8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e020      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x460>
 800132e:	e018      	b.n	8001362 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb57 	bl	80009e8 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fb53 	bl	80009e8 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e009      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCC_OscConfig+0x4bc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x48e>
 800135c:	e001      	b.n	8001362 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	42420060 	.word	0x42420060

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001386:	4b7e      	ldr	r3, [pc, #504]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d910      	bls.n	80013b6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001394:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 0207 	bic.w	r2, r3, #7
 800139c:	4978      	ldr	r1, [pc, #480]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a4:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0e0      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d020      	beq.n	8001404 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a6c      	ldr	r2, [pc, #432]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80013d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013d8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a66      	ldr	r2, [pc, #408]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80013ec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4961      	ldr	r1, [pc, #388]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d06a      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001418:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d115      	bne.n	8001450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0a7      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d107      	bne.n	8001440 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b54      	ldr	r3, [pc, #336]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e09b      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e093      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 0203 	bic.w	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4949      	ldr	r1, [pc, #292]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001462:	f7ff fac1 	bl	80009e8 <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d112      	bne.n	8001496 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001472:	f7ff fab9 	bl	80009e8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e077      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_ClockConfig+0xfa>
 8001494:	e027      	b.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d11d      	bne.n	80014da <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff faa2 	bl	80009e8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e060      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d1ee      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x128>
 80014c2:	e010      	b.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa90 	bl	80009e8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04e      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ee      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d210      	bcs.n	8001516 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 0207 	bic.w	r2, r3, #7
 80014fc:	4920      	ldr	r1, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_ClockConfig+0x208>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e030      	b.n	8001578 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4915      	ldr	r1, [pc, #84]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001554:	f000 f81c 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001558:	4601      	mov	r1, r0
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_ClockConfig+0x20c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_RCC_ClockConfig+0x210>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	fa21 f303 	lsr.w	r3, r1, r3
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_RCC_ClockConfig+0x214>)
 800156e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff f9f7 	bl	8000964 <HAL_InitTick>
  
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	080094a8 	.word	0x080094a8
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	b490      	push	{r4, r7}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001598:	1d3c      	adds	r4, r7, #4
 800159a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d002      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x40>
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x46>
 80015ce:	e02d      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d2:	623b      	str	r3, [r7, #32]
      break;
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015e2:	4413      	add	r3, r2
 80015e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	0c5b      	lsrs	r3, r3, #17
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001602:	4413      	add	r3, r2
 8001604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001608:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_RCC_GetSysClockFreq+0xbc>)
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	e004      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	623b      	str	r3, [r7, #32]
      break;
 800162a:	e002      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_RCC_GetSysClockFreq+0xbc>)
 800162e:	623b      	str	r3, [r7, #32]
      break;
 8001630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001632:	6a3b      	ldr	r3, [r7, #32]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bc90      	pop	{r4, r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08008cfc 	.word	0x08008cfc
 8001644:	08008d0c 	.word	0x08008d0c
 8001648:	40021000 	.word	0x40021000
 800164c:	007a1200 	.word	0x007a1200
 8001650:	003d0900 	.word	0x003d0900

08001654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_RCC_GetHCLKFreq+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000008 	.word	0x20000008

08001668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800166c:	f7ff fff2 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001670:	4601      	mov	r1, r0
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_RCC_GetPCLK1Freq+0x24>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	080094b8 	.word	0x080094b8

08001690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001694:	f7ff ffde 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001698:	4601      	mov	r1, r0
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0adb      	lsrs	r3, r3, #11
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	080094b8 	.word	0x080094b8

080016b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <RCC_Delay+0x34>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <RCC_Delay+0x38>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0a5b      	lsrs	r3, r3, #9
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80016d4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	60fa      	str	r2, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f9      	bne.n	80016d4 <RCC_Delay+0x1c>
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	10624dd3 	.word	0x10624dd3

080016f4 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_SPI_Transmit+0x26>
 8001716:	2302      	movs	r3, #2
 8001718:	e125      	b.n	8001966 <HAL_SPI_Transmit+0x272>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001722:	f7ff f961 	bl	80009e8 <HAL_GetTick>
 8001726:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d002      	beq.n	800173a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001738:	e10c      	b.n	8001954 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_SPI_Transmit+0x52>
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	77fb      	strb	r3, [r7, #31]
    goto error;
 800174a:	e103      	b.n	8001954 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001792:	d107      	bne.n	80017a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b40      	cmp	r3, #64	; 0x40
 80017b0:	d007      	beq.n	80017c2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ca:	d147      	bne.n	800185c <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_SPI_Transmit+0xea>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d138      	bne.n	8001850 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3302      	adds	r3, #2
 80017ec:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017fc:	e028      	b.n	8001850 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b02      	cmp	r3, #2
 800180a:	d10f      	bne.n	800182c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3302      	adds	r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	86da      	strh	r2, [r3, #54]	; 0x36
 800182a:	e011      	b.n	8001850 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_SPI_Transmit+0x156>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001838:	d00a      	beq.n	8001850 <HAL_SPI_Transmit+0x15c>
 800183a:	f7ff f8d5 	bl	80009e8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d802      	bhi.n	8001850 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800184e:	e081      	b.n	8001954 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1d1      	bne.n	80017fe <HAL_SPI_Transmit+0x10a>
 800185a:	e048      	b.n	80018ee <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_SPI_Transmit+0x17a>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d13a      	bne.n	80018e4 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	330c      	adds	r3, #12
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800188e:	e029      	b.n	80018e4 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d110      	bne.n	80018c0 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330c      	adds	r3, #12
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80018be:	e011      	b.n	80018e4 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_SPI_Transmit+0x1ea>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018cc:	d00a      	beq.n	80018e4 <HAL_SPI_Transmit+0x1f0>
 80018ce:	f7ff f88b 	bl	80009e8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d802      	bhi.n	80018e4 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018e2:	e037      	b.n	8001954 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1d0      	bne.n	8001890 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	2102      	movs	r1, #2
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f9e5 	bl	8001cc8 <SPI_WaitFlagStateUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001908:	e024      	b.n	8001954 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fa43 	bl	8001d9a <SPI_CheckFlag_BSY>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001924:	e016      	b.n	8001954 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	77fb      	strb	r3, [r7, #31]
 8001950:	e000      	b.n	8001954 <HAL_SPI_Transmit+0x260>
  }

error:
 8001952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001964:	7ffb      	ldrb	r3, [r7, #31]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b08c      	sub	sp, #48	; 0x30
 8001972:	af02      	add	r7, sp, #8
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001988:	2301      	movs	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_SPI_TransmitReceive+0x32>
 800199c:	2302      	movs	r3, #2
 800199e:	e182      	b.n	8001ca6 <HAL_SPI_TransmitReceive+0x338>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019a8:	f7ff f81e 	bl	80009e8 <HAL_GetTick>
 80019ac:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d00e      	beq.n	80019e2 <HAL_SPI_TransmitReceive+0x74>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ca:	d106      	bne.n	80019da <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_SPI_TransmitReceive+0x6c>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d003      	beq.n	80019e2 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80019da:	2302      	movs	r3, #2
 80019dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80019e0:	e157      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_SPI_TransmitReceive+0x86>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_SPI_TransmitReceive+0x86>
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d103      	bne.n	80019fc <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80019fa:	e14a      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d103      	bne.n	8001a10 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2205      	movs	r2, #5
 8001a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a50:	2b40      	cmp	r3, #64	; 0x40
 8001a52:	d007      	beq.n	8001a64 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6c:	d171      	bne.n	8001b52 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x112>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d15d      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a9e:	e04d      	b.n	8001b3c <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01c      	beq.n	8001ae0 <HAL_SPI_TransmitReceive+0x172>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <HAL_SPI_TransmitReceive+0x172>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d110      	bne.n	8001ae0 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	881a      	ldrh	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3302      	adds	r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d018      	beq.n	8001b1c <HAL_SPI_TransmitReceive+0x1ae>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d111      	bne.n	8001b1c <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b22:	d00b      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x1ce>
 8001b24:	f7fe ff60 	bl	80009e8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d803      	bhi.n	8001b3c <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001b3a:	e0aa      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ac      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x132>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1a7      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x132>
 8001b50:	e070      	b.n	8001c34 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x1f6>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d15d      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b84:	e04c      	b.n	8001c20 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01c      	beq.n	8001bc6 <HAL_SPI_TransmitReceive+0x258>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d017      	beq.n	8001bc6 <HAL_SPI_TransmitReceive+0x258>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d110      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	320c      	adds	r2, #12
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d017      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x292>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d110      	bne.n	8001c00 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c06:	d00b      	beq.n	8001c20 <HAL_SPI_TransmitReceive+0x2b2>
 8001c08:	f7fe feee 	bl	80009e8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d803      	bhi.n	8001c20 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001c1e:	e038      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ad      	bne.n	8001b86 <HAL_SPI_TransmitReceive+0x218>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1a8      	bne.n	8001b86 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f842 	bl	8001cc8 <SPI_WaitFlagStateUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001c50:	e01f      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f89f 	bl	8001d9a <SPI_CheckFlag_BSY>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c6e:	e010      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	e000      	b.n	8001c92 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 8001c90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001cd6:	e04d      	b.n	8001d74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cde:	d049      	beq.n	8001d74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001ce6:	f7fe fe7f 	bl	80009e8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d83e      	bhi.n	8001d74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d04:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d0e:	d111      	bne.n	8001d34 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d18:	d004      	beq.n	8001d24 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d107      	bne.n	8001d34 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3c:	d110      	bne.n	8001d60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e00e      	b.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d101      	bne.n	8001d88 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001d84:	2201      	movs	r2, #1
 8001d86:	e000      	b.n	8001d8a <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1a3      	bne.n	8001cd8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af02      	add	r7, sp, #8
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff ff89 	bl	8001cc8 <SPI_WaitFlagStateUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e000      	b.n	8001dce <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e057      	b.n	8001e98 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f006 f958 	bl	80080b0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0104 	and.w	r1, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e76:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e86:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e03f      	b.n	8001f32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f006 f93c 	bl	8008144 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	; 0x24
 8001ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f90b 	bl	8002100 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f08:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f18:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b088      	sub	sp, #32
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	f040 8083 	bne.w	8002062 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_UART_Transmit+0x2e>
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e07b      	b.n	8002064 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_Transmit+0x40>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e074      	b.n	8002064 <HAL_UART_Transmit+0x12a>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2221      	movs	r2, #33	; 0x21
 8001f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f90:	f7fe fd2a 	bl	80009e8 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001fa2:	e042      	b.n	800202a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	d122      	bne.n	8002002 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f850 	bl	800206c <UART_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e046      	b.n	8002064 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	e017      	b.n	800202a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	e013      	b.n	800202a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2200      	movs	r2, #0
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f82d 	bl	800206c <UART_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e023      	b.n	8002064 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	60ba      	str	r2, [r7, #8]
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1b7      	bne.n	8001fa4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2200      	movs	r2, #0
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f814 	bl	800206c <UART_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e00a      	b.n	8002064 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800207c:	e02c      	b.n	80020d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002084:	d028      	beq.n	80020d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <UART_WaitOnFlagUntilTimeout+0x30>
 800208c:	f7fe fcac 	bl	80009e8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	d21d      	bcs.n	80020d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e00f      	b.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d0c3      	beq.n	800207e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002142:	f023 030c 	bic.w	r3, r3, #12
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	68f9      	ldr	r1, [r7, #12]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <UART_SetConfig+0x228>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d16b      	bne.n	8002248 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002170:	f7ff fa8e 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 8002174:	4602      	mov	r2, r0
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	441a      	add	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4a68      	ldr	r2, [pc, #416]	; (800232c <UART_SetConfig+0x22c>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	011c      	lsls	r4, r3, #4
 8002194:	f7ff fa7c 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 8002198:	4602      	mov	r2, r0
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009a      	lsls	r2, r3, #2
 80021a2:	441a      	add	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80021ae:	f7ff fa6f 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009a      	lsls	r2, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <UART_SetConfig+0x22c>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2264      	movs	r2, #100	; 0x64
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	1aeb      	subs	r3, r5, r3
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	3332      	adds	r3, #50	; 0x32
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <UART_SetConfig+0x22c>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	441c      	add	r4, r3
 80021ea:	f7ff fa51 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f5f3 	udiv	r5, r2, r3
 8002204:	f7ff fa44 	bl	8001690 <HAL_RCC_GetPCLK2Freq>
 8002208:	4602      	mov	r2, r0
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a43      	ldr	r2, [pc, #268]	; (800232c <UART_SetConfig+0x22c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	2264      	movs	r2, #100	; 0x64
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	1aeb      	subs	r3, r5, r3
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	3332      	adds	r3, #50	; 0x32
 8002232:	4a3e      	ldr	r2, [pc, #248]	; (800232c <UART_SetConfig+0x22c>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4422      	add	r2, r4
 8002244:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002246:	e06a      	b.n	800231e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002248:	f7ff fa0e 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 800224c:	4602      	mov	r2, r0
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <UART_SetConfig+0x22c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	011c      	lsls	r4, r3, #4
 800226c:	f7ff f9fc 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8002270:	4602      	mov	r2, r0
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009a      	lsls	r2, r3, #2
 800227a:	441a      	add	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fbb2 f5f3 	udiv	r5, r2, r3
 8002286:	f7ff f9ef 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 800228a:	4602      	mov	r2, r0
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	009a      	lsls	r2, r3, #2
 8002294:	441a      	add	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <UART_SetConfig+0x22c>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	1aeb      	subs	r3, r5, r3
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	3332      	adds	r3, #50	; 0x32
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <UART_SetConfig+0x22c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c0:	441c      	add	r4, r3
 80022c2:	f7ff f9d1 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80022dc:	f7ff f9c4 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <UART_SetConfig+0x22c>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2264      	movs	r2, #100	; 0x64
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	1aeb      	subs	r3, r5, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <UART_SetConfig+0x22c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 020f 	and.w	r2, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4422      	add	r2, r4
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bdb0      	pop	{r4, r5, r7, pc}
 8002326:	bf00      	nop
 8002328:	40013800 	.word	0x40013800
 800232c:	51eb851f 	.word	0x51eb851f

08002330 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <disk_status+0x30>)
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	79fa      	ldrb	r2, [r7, #7]
 8002348:	4905      	ldr	r1, [pc, #20]	; (8002360 <disk_status+0x30>)
 800234a:	440a      	add	r2, r1
 800234c:	7a12      	ldrb	r2, [r2, #8]
 800234e:	4610      	mov	r0, r2
 8002350:	4798      	blx	r3
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200002c0 	.word	0x200002c0

08002364 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <disk_initialize+0x48>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <disk_initialize+0x48>)
 8002380:	2101      	movs	r1, #1
 8002382:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <disk_initialize+0x48>)
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	4906      	ldr	r1, [pc, #24]	; (80023ac <disk_initialize+0x48>)
 8002394:	440a      	add	r2, r1
 8002396:	7a12      	ldrb	r2, [r2, #8]
 8002398:	4610      	mov	r0, r2
 800239a:	4798      	blx	r3
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002c0 	.word	0x200002c0

080023b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <disk_read+0x3c>)
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	689c      	ldr	r4, [r3, #8]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <disk_read+0x3c>)
 80023d0:	4413      	add	r3, r2
 80023d2:	7a18      	ldrb	r0, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	47a0      	blx	r4
 80023dc:	4603      	mov	r3, r0
 80023de:	75fb      	strb	r3, [r7, #23]
  return res;
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200002c0 	.word	0x200002c0

080023f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <disk_write+0x3c>)
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	68dc      	ldr	r4, [r3, #12]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <disk_write+0x3c>)
 8002410:	4413      	add	r3, r2
 8002412:	7a18      	ldrb	r0, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	47a0      	blx	r4
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	bf00      	nop
 800242c:	200002c0 	.word	0x200002c0

08002430 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	603a      	str	r2, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
 800243c:	460b      	mov	r3, r1
 800243e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <disk_ioctl+0x38>)
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	4906      	ldr	r1, [pc, #24]	; (8002468 <disk_ioctl+0x38>)
 8002450:	440a      	add	r2, r1
 8002452:	7a10      	ldrb	r0, [r2, #8]
 8002454:	79b9      	ldrb	r1, [r7, #6]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4798      	blx	r3
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]
  return res;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200002c0 	.word	0x200002c0

0800246c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002480:	e007      	b.n	8002492 <mem_cpy+0x26>
		*d++ = *s++;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	1c53      	adds	r3, r2, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	6179      	str	r1, [r7, #20]
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f2      	bne.n	8002482 <mem_cpy+0x16>
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80024a6:	b480      	push	{r7}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80024b6:	e005      	b.n	80024c4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	617a      	str	r2, [r7, #20]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f4      	bne.n	80024b8 <mem_set+0x12>
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80024f0:	bf00      	nop
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1e5a      	subs	r2, r3, #1
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <mem_cmp+0x40>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	61fa      	str	r2, [r7, #28]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	61ba      	str	r2, [r7, #24]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	1acb      	subs	r3, r1, r3
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ec      	beq.n	80024f2 <mem_cmp+0x1a>
	return r;
 8002518:	697b      	ldr	r3, [r7, #20]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800252e:	e002      	b.n	8002536 <chk_chr+0x12>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3301      	adds	r3, #1
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <chk_chr+0x26>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4293      	cmp	r3, r2
 8002548:	d1f2      	bne.n	8002530 <chk_chr+0xc>
	return *str;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e03d      	b.n	80025e8 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800256c:	4932      	ldr	r1, [pc, #200]	; (8002638 <chk_lock+0xe0>)
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02e      	beq.n	80025de <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002580:	492d      	ldr	r1, [pc, #180]	; (8002638 <chk_lock+0xe0>)
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d122      	bne.n	80025e2 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800259c:	4926      	ldr	r1, [pc, #152]	; (8002638 <chk_lock+0xe0>)
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3304      	adds	r3, #4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	3308      	adds	r3, #8
 80025b6:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d112      	bne.n	80025e2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 80025bc:	491e      	ldr	r1, [pc, #120]	; (8002638 <chk_lock+0xe0>)
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3308      	adds	r3, #8
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	3306      	adds	r3, #6
 80025d6:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 80025d8:	429a      	cmp	r2, r3
 80025da:	d102      	bne.n	80025e2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 80025dc:	e007      	b.n	80025ee <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 80025de:	2301      	movs	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d9be      	bls.n	800256c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d109      	bne.n	8002608 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <chk_lock+0xa8>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d101      	bne.n	8002604 <chk_lock+0xac>
 8002600:	2300      	movs	r3, #0
 8002602:	e013      	b.n	800262c <chk_lock+0xd4>
 8002604:	2312      	movs	r3, #18
 8002606:	e011      	b.n	800262c <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <chk_lock+0xce>
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <chk_lock+0xe0>)
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	330a      	adds	r3, #10
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d101      	bne.n	800262a <chk_lock+0xd2>
 8002626:	2310      	movs	r3, #16
 8002628:	e000      	b.n	800262c <chk_lock+0xd4>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	200000a8 	.word	0x200000a8

0800263c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	e002      	b.n	800264e <enq_lock+0x12>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3301      	adds	r3, #1
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d809      	bhi.n	8002668 <enq_lock+0x2c>
 8002654:	490a      	ldr	r1, [pc, #40]	; (8002680 <enq_lock+0x44>)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ef      	bne.n	8002648 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200000a8 	.word	0x200000a8

08002684 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e030      	b.n	80026f6 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8002694:	495a      	ldr	r1, [pc, #360]	; (8002800 <inc_lock+0x17c>)
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11f      	bne.n	80026f0 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 80026b0:	4953      	ldr	r1, [pc, #332]	; (8002800 <inc_lock+0x17c>)
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3304      	adds	r3, #4
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	3308      	adds	r3, #8
 80026ca:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d10f      	bne.n	80026f0 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 80026d0:	494b      	ldr	r1, [pc, #300]	; (8002800 <inc_lock+0x17c>)
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3308      	adds	r3, #8
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	3306      	adds	r3, #6
 80026ea:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d006      	beq.n	80026fe <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d9cb      	bls.n	8002694 <inc_lock+0x10>
 80026fc:	e000      	b.n	8002700 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 80026fe:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d14a      	bne.n	800279c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e002      	b.n	8002712 <inc_lock+0x8e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d809      	bhi.n	800272c <inc_lock+0xa8>
 8002718:	4939      	ldr	r1, [pc, #228]	; (8002800 <inc_lock+0x17c>)
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ef      	bne.n	800270c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d101      	bne.n	8002736 <inc_lock+0xb2>
 8002732:	2300      	movs	r3, #0
 8002734:	e05f      	b.n	80027f6 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	4830      	ldr	r0, [pc, #192]	; (8002800 <inc_lock+0x17c>)
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4403      	add	r3, r0
 800274c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002754:	3308      	adds	r3, #8
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	4829      	ldr	r0, [pc, #164]	; (8002800 <inc_lock+0x17c>)
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4403      	add	r3, r0
 8002766:	3304      	adds	r3, #4
 8002768:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002770:	3306      	adds	r3, #6
 8002772:	8818      	ldrh	r0, [r3, #0]
 8002774:	4922      	ldr	r1, [pc, #136]	; (8002800 <inc_lock+0x17c>)
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3308      	adds	r3, #8
 8002784:	4602      	mov	r2, r0
 8002786:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002788:	491d      	ldr	r1, [pc, #116]	; (8002800 <inc_lock+0x17c>)
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	330a      	adds	r3, #10
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <inc_lock+0x138>
 80027a2:	4917      	ldr	r1, [pc, #92]	; (8002800 <inc_lock+0x17c>)
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	330a      	adds	r3, #10
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <inc_lock+0x138>
 80027b8:	2300      	movs	r3, #0
 80027ba:	e01c      	b.n	80027f6 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <inc_lock+0x156>
 80027c2:	490f      	ldr	r1, [pc, #60]	; (8002800 <inc_lock+0x17c>)
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	330a      	adds	r3, #10
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	b299      	uxth	r1, r3
 80027d8:	e001      	b.n	80027de <inc_lock+0x15a>
 80027da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027de:	4808      	ldr	r0, [pc, #32]	; (8002800 <inc_lock+0x17c>)
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4403      	add	r3, r0
 80027ec:	330a      	adds	r3, #10
 80027ee:	460a      	mov	r2, r1
 80027f0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3301      	adds	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	200000a8 	.word	0x200000a8

08002804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d82e      	bhi.n	8002876 <dec_lock+0x72>
		n = Files[i].ctr;
 8002818:	491b      	ldr	r1, [pc, #108]	; (8002888 <dec_lock+0x84>)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	330a      	adds	r3, #10
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	d101      	bne.n	8002838 <dec_lock+0x34>
 8002834:	2300      	movs	r3, #0
 8002836:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <dec_lock+0x40>
 800283e:	89fb      	ldrh	r3, [r7, #14]
 8002840:	3b01      	subs	r3, #1
 8002842:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002844:	4910      	ldr	r1, [pc, #64]	; (8002888 <dec_lock+0x84>)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	330a      	adds	r3, #10
 8002854:	89fa      	ldrh	r2, [r7, #14]
 8002856:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <dec_lock+0x6c>
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <dec_lock+0x84>)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	737b      	strb	r3, [r7, #13]
 8002874:	e001      	b.n	800287a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002876:	2302      	movs	r3, #2
 8002878:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800287a:	7b7b      	ldrb	r3, [r7, #13]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	200000a8 	.word	0x200000a8

0800288c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e016      	b.n	80028c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800289a:	490f      	ldr	r1, [pc, #60]	; (80028d8 <clear_lock+0x4c>)
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d108      	bne.n	80028c2 <clear_lock+0x36>
 80028b0:	4909      	ldr	r1, [pc, #36]	; (80028d8 <clear_lock+0x4c>)
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d9e5      	bls.n	800289a <clear_lock+0xe>
	}
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	200000a8 	.word	0x200000a8

080028dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	3304      	adds	r3, #4
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d047      	beq.n	8002986 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80028fc:	330c      	adds	r3, #12
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	3301      	adds	r3, #1
 800290a:	7818      	ldrb	r0, [r3, #0]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	2301      	movs	r3, #1
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	f7ff fd6d 	bl	80023f0 <disk_write>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <sync_window+0x46>
			res = FR_DISK_ERR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e031      	b.n	8002986 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002928:	3304      	adds	r3, #4
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002940:	3318      	adds	r3, #24
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d21e      	bcs.n	8002986 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294e:	3303      	adds	r3, #3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e014      	b.n	8002980 <sync_window+0xa4>
					wsect += fs->fsize;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295c:	3318      	adds	r3, #24
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4413      	add	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	3301      	adds	r3, #1
 800296e:	7818      	ldrb	r0, [r3, #0]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	2301      	movs	r3, #1
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	f7ff fd3b 	bl	80023f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	3b01      	subs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d8e7      	bhi.n	8002956 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80029a4:	330c      	adds	r3, #12
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d01f      	beq.n	80029ee <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff94 	bl	80028dc <sync_window>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d117      	bne.n	80029ee <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	3301      	adds	r3, #1
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	2301      	movs	r3, #1
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	f7ff fcef 	bl	80023b0 <disk_read>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80029e8:	330c      	adds	r3, #12
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff6b 	bl	80028dc <sync_window>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 80bd 	bne.w	8002b8c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	f040 80a7 	bne.w	8002b6e <sync_fs+0x176>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a26:	3305      	adds	r3, #5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	f040 809f 	bne.w	8002b6e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	330a      	adds	r3, #10
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f7ff fd31 	bl	80024a6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2255      	movs	r2, #85	; 0x55
 8002a48:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	22aa      	movs	r2, #170	; 0xaa
 8002a50:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2252      	movs	r2, #82	; 0x52
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2252      	movs	r2, #82	; 0x52
 8002a5e:	705a      	strb	r2, [r3, #1]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2261      	movs	r2, #97	; 0x61
 8002a64:	709a      	strb	r2, [r3, #2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2241      	movs	r2, #65	; 0x41
 8002a6a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2272      	movs	r2, #114	; 0x72
 8002a70:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2272      	movs	r2, #114	; 0x72
 8002a78:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2241      	movs	r2, #65	; 0x41
 8002a80:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2261      	movs	r2, #97	; 0x61
 8002a88:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a92:	3310      	adds	r3, #16
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	3310      	adds	r3, #16
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e1b      	lsrs	r3, r3, #24
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	330c      	adds	r3, #12
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	330c      	adds	r3, #12
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	330c      	adds	r3, #12
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e1b      	lsrs	r3, r3, #24
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	331c      	adds	r3, #28
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002b42:	330c      	adds	r3, #12
 8002b44:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	7818      	ldrb	r0, [r3, #0]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002b58:	330c      	adds	r3, #12
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f7ff fc47 	bl	80023f0 <disk_write>
			fs->fsi_flag = 0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b68:	3305      	adds	r3, #5
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b74:	3301      	adds	r3, #1
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fc57 	bl	8002430 <disk_ioctl>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	3b02      	subs	r3, #2
 8002ba4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bac:	3314      	adds	r3, #20
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3b02      	subs	r3, #2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d301      	bcc.n	8002bbc <clust2sect+0x26>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e00e      	b.n	8002bda <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	fb03 f202 	mul.w	r2, r3, r2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4413      	add	r3, r2
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d907      	bls.n	8002c04 <get_fat+0x20>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfa:	3314      	adds	r3, #20
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <get_fat+0x26>
		val = 1;	/* Internal error */
 8002c04:	2301      	movs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e0e9      	b.n	8002dde <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d068      	beq.n	8002cee <get_fat+0x10a>
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	f000 8099 	beq.w	8002d54 <get_fat+0x170>
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 80d1 	bne.w	8002dca <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c44:	330a      	adds	r3, #10
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c50:	4413      	add	r3, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe9b 	bl	8002990 <move_window>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 80b7 	bne.w	8002dd0 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	60fa      	str	r2, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6e:	320a      	adds	r2, #10
 8002c70:	8812      	ldrh	r2, [r2, #0]
 8002c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c76:	fb02 f201 	mul.w	r2, r2, r1
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c90:	330a      	adds	r3, #10
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fe75 	bl	8002990 <move_window>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8093 	bne.w	8002dd4 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb4:	330a      	adds	r3, #10
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cc0:	fb02 f201 	mul.w	r2, r2, r1
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <get_fat+0x100>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	e002      	b.n	8002cea <get_fat+0x106>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	617b      	str	r3, [r7, #20]
			break;
 8002cec:	e077      	b.n	8002dde <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	330a      	adds	r3, #10
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fe3d 	bl	8002990 <move_window>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d15d      	bne.n	8002dd8 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	005a      	lsls	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d26:	330a      	adds	r3, #10
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	fbb2 f1f3 	udiv	r1, r2, r3
 8002d2e:	fb03 f301 	mul.w	r3, r3, r1
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b21b      	sxth	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	617b      	str	r3, [r7, #20]
			break;
 8002d52:	e044      	b.n	8002dde <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d62:	330a      	adds	r3, #10
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d72:	4413      	add	r3, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe0a 	bl	8002990 <move_window>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12c      	bne.n	8002ddc <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	009a      	lsls	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8c:	330a      	adds	r3, #10
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	fbb2 f1f3 	udiv	r1, r2, r3
 8002d94:	fb03 f301 	mul.w	r3, r3, r1
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	3303      	adds	r3, #3
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	061a      	lsls	r2, r3, #24
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3302      	adds	r3, #2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	4313      	orrs	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	3201      	adds	r2, #1
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	0212      	lsls	r2, r2, #8
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dc6:	617b      	str	r3, [r7, #20]
			break;
 8002dc8:	e009      	b.n	8002dde <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e006      	b.n	8002dde <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002dd0:	bf00      	nop
 8002dd2:	e004      	b.n	8002dde <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002dd4:	bf00      	nop
 8002dd6:	e002      	b.n	8002dde <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002ddc:	bf00      	nop
		}
	}

	return val;
 8002dde:	697b      	ldr	r3, [r7, #20]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d907      	bls.n	8002e0a <put_fat+0x22>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e00:	3314      	adds	r3, #20
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <put_fat+0x28>
		res = FR_INT_ERR;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e143      	b.n	8003098 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f000 809a 	beq.w	8002f52 <put_fat+0x16a>
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f000 80d3 	beq.w	8002fca <put_fat+0x1e2>
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	f040 812d 	bne.w	8003084 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4413      	add	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e46:	330a      	adds	r3, #10
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e52:	4413      	add	r3, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fd9a 	bl	8002990 <move_window>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 8111 	bne.w	800308a <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	617a      	str	r2, [r7, #20]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e74:	320a      	adds	r2, #10
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e7c:	fb02 f201 	mul.w	r2, r2, r1
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <put_fat+0xc6>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b25a      	sxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e001      	b.n	8002eb2 <put_fat+0xca>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed0:	330a      	adds	r3, #10
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002edc:	4413      	add	r3, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fd55 	bl	8002990 <move_window>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002eea:	7ffb      	ldrb	r3, [r7, #31]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 80ce 	bne.w	800308e <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	330a      	adds	r3, #10
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f04:	fb02 f201 	mul.w	r2, r2, r1
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <put_fat+0x13a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00e      	b.n	8002f40 <put_fat+0x158>
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f023 030f 	bic.w	r3, r3, #15
 8002f2c:	b25a      	sxtb	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
			break;
 8002f50:	e0a2      	b.n	8003098 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	330a      	adds	r3, #10
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f70:	4413      	add	r3, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fd0b 	bl	8002990 <move_window>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8086 	bne.w	8003092 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	005a      	lsls	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	330a      	adds	r3, #10
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f98:	fb03 f301 	mul.w	r3, r3, r1
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
			break;
 8002fc8:	e066      	b.n	8003098 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	330a      	adds	r3, #10
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe8:	4413      	add	r3, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fccf 	bl	8002990 <move_window>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d14c      	bne.n	8003096 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003006:	330a      	adds	r3, #10
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	fbb2 f1f3 	udiv	r1, r2, r3
 800300e:	fb03 f301 	mul.w	r3, r3, r1
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3303      	adds	r3, #3
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	061a      	lsls	r2, r3, #24
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	4313      	orrs	r3, r2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	3201      	adds	r2, #1
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	0212      	lsls	r2, r2, #8
 8003034:	4313      	orrs	r3, r2
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b29a      	uxth	r2, r3
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	3301      	adds	r3, #1
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0c1a      	lsrs	r2, r3, #16
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3302      	adds	r3, #2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0e1a      	lsrs	r2, r3, #24
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3303      	adds	r3, #3
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307c:	3304      	adds	r3, #4
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
			break;
 8003082:	e009      	b.n	8003098 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8003084:	2302      	movs	r3, #2
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e006      	b.n	8003098 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800308a:	bf00      	nop
 800308c:	e004      	b.n	8003098 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003096:	bf00      	nop
		}
	}

	return res;
 8003098:	7ffb      	ldrb	r3, [r7, #31]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d907      	bls.n	80030c2 <remove_chain+0x20>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b8:	3314      	adds	r3, #20
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <remove_chain+0x26>
		res = FR_INT_ERR;
 80030c2:	2302      	movs	r3, #2
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e04f      	b.n	8003168 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80030cc:	e040      	b.n	8003150 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fd87 	bl	8002be4 <get_fat>
 80030d6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d041      	beq.n	8003162 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <remove_chain+0x48>
 80030e4:	2302      	movs	r3, #2
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e03e      	b.n	8003168 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	d102      	bne.n	80030f8 <remove_chain+0x56>
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e037      	b.n	8003168 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80030f8:	2200      	movs	r2, #0
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fe73 	bl	8002de8 <put_fat>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d12c      	bne.n	8003166 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003112:	3310      	adds	r3, #16
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311a:	d017      	beq.n	800314c <remove_chain+0xaa>
				fs->free_clust++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003122:	3310      	adds	r3, #16
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312e:	3310      	adds	r3, #16
 8003130:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	3305      	adds	r3, #5
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003148:	3305      	adds	r3, #5
 800314a:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003156:	3314      	adds	r3, #20
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b6      	bcc.n	80030ce <remove_chain+0x2c>
 8003160:	e002      	b.n	8003168 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8003166:	bf00      	nop
		}
	}

	return res;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	330c      	adds	r3, #12
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <create_chain+0x32>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319a:	3314      	adds	r3, #20
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d31e      	bcc.n	80031e2 <create_chain+0x70>
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e01b      	b.n	80031e2 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fd19 	bl	8002be4 <get_fat>
 80031b2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d801      	bhi.n	80031be <create_chain+0x4c>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e086      	b.n	80032cc <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c4:	d101      	bne.n	80031ca <create_chain+0x58>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	e080      	b.n	80032cc <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d0:	3314      	adds	r3, #20
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d201      	bcs.n	80031de <create_chain+0x6c>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	e076      	b.n	80032cc <create_chain+0x15a>
		scl = clst;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f2:	3314      	adds	r3, #20
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d307      	bcc.n	800320c <create_chain+0x9a>
			ncl = 2;
 80031fc:	2302      	movs	r3, #2
 80031fe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <create_chain+0x9a>
 8003208:	2300      	movs	r3, #0
 800320a:	e05f      	b.n	80032cc <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800320c:	6979      	ldr	r1, [r7, #20]
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fce8 	bl	8002be4 <get_fat>
 8003214:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003222:	d002      	beq.n	800322a <create_chain+0xb8>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <create_chain+0xbc>
			return cs;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	e04e      	b.n	80032cc <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	d1d7      	bne.n	80031e6 <create_chain+0x74>
 8003236:	2300      	movs	r3, #0
 8003238:	e048      	b.n	80032cc <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800323a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800323c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fdd0 	bl	8002de8 <put_fat>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <create_chain+0xf4>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fdc3 	bl	8002de8 <put_fat>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d126      	bne.n	80032ba <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003272:	330c      	adds	r3, #12
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800327e:	3310      	adds	r3, #16
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003286:	d020      	beq.n	80032ca <create_chain+0x158>
			fs->free_clust--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328e:	3310      	adds	r3, #16
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329a:	3310      	adds	r3, #16
 800329c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a4:	3305      	adds	r3, #5
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b4:	3305      	adds	r3, #5
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e007      	b.n	80032ca <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <create_chain+0x154>
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c4:	e000      	b.n	80032c8 <create_chain+0x156>
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80032ca:	697b      	ldr	r3, [r7, #20]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80032e4:	3304      	adds	r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3304      	adds	r3, #4
 80032ea:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f8:	330a      	adds	r3, #10
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	fbb3 f2f2 	udiv	r2, r3, r2
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003310:	3302      	adds	r3, #2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1d1a      	adds	r2, r3, #4
 800331e:	613a      	str	r2, [r7, #16]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <clmt_clust+0x5a>
 800332a:	2300      	movs	r3, #0
 800332c:	e010      	b.n	8003350 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d307      	bcc.n	8003346 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	3304      	adds	r3, #4
 8003342:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003344:	e7e9      	b.n	800331a <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8003346:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4413      	add	r3, r2
}
 8003350:	4618      	mov	r0, r3
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336e:	3306      	adds	r3, #6
 8003370:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003378:	3308      	adds	r3, #8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d00a      	beq.n	800339a <dir_sdi+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003390:	3314      	adds	r3, #20
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	429a      	cmp	r2, r3
 8003398:	d301      	bcc.n	800339e <dir_sdi+0x44>
		return FR_INT_ERR;
 800339a:	2302      	movs	r3, #2
 800339c:	e0b4      	b.n	8003508 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <dir_sdi+0x6e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d108      	bne.n	80033c8 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80033c2:	3304      	adds	r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d117      	bne.n	80033fe <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033da:	3308      	adds	r3, #8
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d301      	bcc.n	80033ea <dir_sdi+0x90>
			return FR_INT_ERR;
 80033e6:	2302      	movs	r3, #2
 80033e8:	e08e      	b.n	8003508 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80033f6:	3304      	adds	r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e046      	b.n	800348c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340a:	330a      	adds	r3, #10
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	b29b      	uxth	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003420:	3302      	adds	r3, #2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	fb03 f302 	mul.w	r3, r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800342a:	e022      	b.n	8003472 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6979      	ldr	r1, [r7, #20]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fbd4 	bl	8002be4 <get_fat>
 800343c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003444:	d101      	bne.n	800344a <dir_sdi+0xf0>
 8003446:	2301      	movs	r3, #1
 8003448:	e05e      	b.n	8003508 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d90a      	bls.n	8003466 <dir_sdi+0x10c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345c:	3314      	adds	r3, #20
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	429a      	cmp	r2, r3
 8003464:	d301      	bcc.n	800346a <dir_sdi+0x110>
				return FR_INT_ERR;
 8003466:	2302      	movs	r3, #2
 8003468:	e04e      	b.n	8003508 <dir_sdi+0x1ae>
			idx -= ic;
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	d2d8      	bcs.n	800342c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6979      	ldr	r1, [r7, #20]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fb86 	bl	8002b96 <clust2sect>
 800348a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003492:	330c      	adds	r3, #12
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <dir_sdi+0x148>
 800349e:	2302      	movs	r3, #2
 80034a0:	e032      	b.n	8003508 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	330a      	adds	r3, #10
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	3310      	adds	r3, #16
 80034ca:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e2:	330a      	adds	r3, #10
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80034f2:	fb02 f201 	mul.w	r2, r2, r1
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	18c2      	adds	r2, r0, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003502:	3314      	adds	r3, #20
 8003504:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003520:	3306      	adds	r3, #6
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <dir_next+0x2e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	3310      	adds	r3, #16
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <dir_next+0x32>
		return FR_NO_FILE;
 800353e:	2304      	movs	r3, #4
 8003540:	e144      	b.n	80037cc <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	330a      	adds	r3, #10
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	fbb3 f1f2 	udiv	r1, r3, r2
 800355e:	fb02 f201 	mul.w	r2, r2, r1
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 810c 	bne.w	8003782 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	3310      	adds	r3, #16
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	3310      	adds	r3, #16
 800357e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003586:	330c      	adds	r3, #12
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359a:	3308      	adds	r3, #8
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f0c0 80ed 	bcc.w	8003782 <dir_next+0x272>
				return FR_NO_FILE;
 80035a8:	2304      	movs	r3, #4
 80035aa:	e10f      	b.n	80037cc <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b8:	330a      	adds	r3, #10
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d4:	3302      	adds	r3, #2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 80d0 	bne.w	8003782 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	330c      	adds	r3, #12
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7ff faf4 	bl	8002be4 <get_fat>
 80035fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d801      	bhi.n	8003608 <dir_next+0xf8>
 8003604:	2302      	movs	r3, #2
 8003606:	e0e1      	b.n	80037cc <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360e:	d101      	bne.n	8003614 <dir_next+0x104>
 8003610:	2301      	movs	r3, #1
 8003612:	e0db      	b.n	80037cc <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003620:	3314      	adds	r3, #20
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	429a      	cmp	r2, r3
 8003628:	f0c0 8097 	bcc.w	800375a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <dir_next+0x126>
 8003632:	2304      	movs	r3, #4
 8003634:	e0ca      	b.n	80037cc <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003644:	330c      	adds	r3, #12
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f7ff fd91 	bl	8003172 <create_chain>
 8003650:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <dir_next+0x14c>
 8003658:	2307      	movs	r3, #7
 800365a:	e0b7      	b.n	80037cc <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <dir_next+0x156>
 8003662:	2302      	movs	r3, #2
 8003664:	e0b2      	b.n	80037cc <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366c:	d101      	bne.n	8003672 <dir_next+0x162>
 800366e:	2301      	movs	r3, #1
 8003670:	e0ac      	b.n	80037cc <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f92e 	bl	80028dc <sync_window>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <dir_next+0x17a>
 8003686:	2301      	movs	r3, #1
 8003688:	e0a0      	b.n	80037cc <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a0:	330a      	adds	r3, #10
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	2100      	movs	r1, #0
 80036a8:	f7fe fefd 	bl	80024a6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ba:	681c      	ldr	r4, [r3, #0]
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	4610      	mov	r0, r2
 80036c0:	f7ff fa69 	bl	8002b96 <clust2sect>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80036ca:	330c      	adds	r3, #12
 80036cc:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e024      	b.n	800371e <dir_next+0x20e>
						dp->fs->wflag = 1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	3304      	adds	r3, #4
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f8f4 	bl	80028dc <sync_window>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <dir_next+0x1ee>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e066      	b.n	80037cc <dir_next+0x2bc>
						dp->fs->winsect++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800370a:	330c      	adds	r3, #12
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8003714:	330c      	adds	r3, #12
 8003716:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3301      	adds	r3, #1
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	3302      	adds	r3, #2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4293      	cmp	r3, r2
 8003734:	d3ce      	bcc.n	80036d4 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003742:	330c      	adds	r3, #12
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	1a8a      	subs	r2, r1, r2
 8003752:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003756:	330c      	adds	r3, #12
 8003758:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003760:	330c      	adds	r3, #12
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6979      	ldr	r1, [r7, #20]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fa10 	bl	8002b96 <clust2sect>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377e:	3310      	adds	r3, #16
 8003780:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	3306      	adds	r3, #6
 800378e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a6:	330a      	adds	r3, #10
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b6:	fb02 f201 	mul.w	r2, r2, r1
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	015b      	lsls	r3, r3, #5
 80037be:	18c2      	adds	r2, r0, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	3314      	adds	r3, #20
 80037c8:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80037de:	2100      	movs	r1, #0
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fdba 	bl	800335a <dir_sdi>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d138      	bne.n	8003862 <dir_alloc+0x8e>
		n = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003802:	3310      	adds	r3, #16
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7ff f8c1 	bl	8002990 <move_window>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d123      	bne.n	8003860 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381e:	3314      	adds	r3, #20
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2be5      	cmp	r3, #229	; 0xe5
 8003826:	d007      	beq.n	8003838 <dir_alloc+0x64>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	3314      	adds	r3, #20
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3301      	adds	r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d102      	bne.n	800384c <dir_alloc+0x78>
 8003846:	e00c      	b.n	8003862 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fe5e 	bl	8003510 <dir_next>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ca      	beq.n	80037f4 <dir_alloc+0x20>
 800385e:	e000      	b.n	8003862 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8003860:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d101      	bne.n	800386c <dir_alloc+0x98>
 8003868:	2307      	movs	r3, #7
 800386a:	73fb      	strb	r3, [r7, #15]
	return res;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	331b      	adds	r3, #27
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	b21a      	sxth	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	331a      	adds	r3, #26
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b21b      	sxth	r3, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	b21b      	sxth	r3, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d10f      	bne.n	80038c6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	3315      	adds	r3, #21
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	b29b      	uxth	r3, r3
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

	return cl;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	331a      	adds	r3, #26
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	331b      	adds	r3, #27
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	0c1a      	lsrs	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3314      	adds	r3, #20
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	b29b      	uxth	r3, r3
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3315      	adds	r3, #21
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003932:	1e5a      	subs	r2, r3, #1
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	2301      	movs	r3, #1
 8003946:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <cmp_lfn+0xd8>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4413      	add	r3, r2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	b21a      	sxth	r2, r3
 800395c:	4926      	ldr	r1, [pc, #152]	; (80039f8 <cmp_lfn+0xd8>)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	440b      	add	r3, r1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	440b      	add	r3, r1
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b21b      	sxth	r3, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	b21b      	sxth	r3, r3
 8003972:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8003974:	89fb      	ldrh	r3, [r7, #14]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800397a:	89bb      	ldrh	r3, [r7, #12]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fb69 	bl	8007054 <ff_wtoupper>
 8003982:	4603      	mov	r3, r0
 8003984:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2bfe      	cmp	r3, #254	; 0xfe
 800398a:	d80e      	bhi.n	80039aa <cmp_lfn+0x8a>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	617a      	str	r2, [r7, #20]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fb5a 	bl	8007054 <ff_wtoupper>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d008      	beq.n	80039bc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80039aa:	2300      	movs	r3, #0
 80039ac:	e01f      	b.n	80039ee <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80039ae:	89bb      	ldrh	r3, [r7, #12]
 80039b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d001      	beq.n	80039bc <cmp_lfn+0x9c>
 80039b8:	2300      	movs	r3, #0
 80039ba:	e018      	b.n	80039ee <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3301      	adds	r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d9bf      	bls.n	8003948 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <cmp_lfn+0xcc>
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <cmp_lfn+0xcc>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <cmp_lfn+0xcc>
		return 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	08008fd8 	.word	0x08008fd8

080039fc <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	2301      	movs	r3, #1
 8003a22:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <pick_lfn+0xc4>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	4921      	ldr	r1, [pc, #132]	; (8003ac0 <pick_lfn+0xc4>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	440b      	add	r3, r1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	440b      	add	r3, r1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b21b      	sxth	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00f      	beq.n	8003a76 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2bfe      	cmp	r3, #254	; 0xfe
 8003a5a:	d901      	bls.n	8003a60 <pick_lfn+0x64>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e029      	b.n	8003ab4 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8003a60:	89bb      	ldrh	r3, [r7, #12]
 8003a62:	81fb      	strh	r3, [r7, #14]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	617a      	str	r2, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	89fa      	ldrh	r2, [r7, #14]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e006      	b.n	8003a84 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003a76:	89bb      	ldrh	r3, [r7, #12]
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d001      	beq.n	8003a84 <pick_lfn+0x88>
 8003a80:	2300      	movs	r3, #0
 8003a82:	e017      	b.n	8003ab4 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3301      	adds	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d9c9      	bls.n	8003a24 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2bfe      	cmp	r3, #254	; 0xfe
 8003aa0:	d901      	bls.n	8003aa6 <pick_lfn+0xaa>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e006      	b.n	8003ab4 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 8003ab2:	2301      	movs	r3, #1
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	08008fd8 	.word	0x08008fd8

08003ac4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	71fb      	strb	r3, [r7, #7]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	330d      	adds	r3, #13
 8003ade:	79ba      	ldrb	r2, [r7, #6]
 8003ae0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	330b      	adds	r3, #11
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	330c      	adds	r3, #12
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	331a      	adds	r3, #26
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	331b      	adds	r3, #27
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	82fb      	strh	r3, [r7, #22]
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <fit_lfn+0x70>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	61fa      	str	r2, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <fit_lfn+0xe4>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4413      	add	r3, r2
 8003b42:	8afa      	ldrh	r2, [r7, #22]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	8afb      	ldrh	r3, [r7, #22]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <fit_lfn+0xe4>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	b2ca      	uxtb	r2, r1
 8003b5e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003b60:	8afb      	ldrh	r3, [r7, #22]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <fit_lfn+0xa8>
 8003b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d9d0      	bls.n	8003b1a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003b78:	8afb      	ldrh	r3, [r7, #22]
 8003b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d006      	beq.n	8003b90 <fit_lfn+0xcc>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <fit_lfn+0xd4>
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	79fa      	ldrb	r2, [r7, #7]
 8003b9c:	701a      	strb	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	08008fd8 	.word	0x08008fd8

08003bac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003bba:	220b      	movs	r2, #11
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7fe fc54 	bl	800246c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d92b      	bls.n	8003c22 <gen_numname+0x76>
		sr = seq;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003bce:	e022      	b.n	8003c16 <gen_numname+0x6a>
			wc = *lfn++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bde:	e017      	b.n	8003c10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005a      	lsls	r2, r3, #1
 8003be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003bee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <gen_numname+0x5e>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003c04:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003c08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	d9e4      	bls.n	8003be0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d8      	bne.n	8003bd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003c22:	2307      	movs	r3, #7
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3330      	adds	r3, #48	; 0x30
 8003c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8003c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c3a:	2b39      	cmp	r3, #57	; 0x39
 8003c3c:	d904      	bls.n	8003c48 <gen_numname+0x9c>
 8003c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c42:	3307      	adds	r3, #7
 8003c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c52:	4413      	add	r3, r2
 8003c54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c58:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1de      	bne.n	8003c26 <gen_numname+0x7a>
	ns[i] = '~';
 8003c68:	f107 0214 	add.w	r2, r7, #20
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	4413      	add	r3, r2
 8003c70:	227e      	movs	r2, #126	; 0x7e
 8003c72:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e002      	b.n	8003c80 <gen_numname+0xd4>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d205      	bcs.n	8003c94 <gen_numname+0xe8>
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d1f2      	bne.n	8003c7a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d808      	bhi.n	8003cac <gen_numname+0x100>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ca0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003caa:	e000      	b.n	8003cae <gen_numname+0x102>
 8003cac:	2120      	movs	r1, #32
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	460a      	mov	r2, r1
 8003cba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b07      	cmp	r3, #7
 8003cc0:	d9e8      	bls.n	8003c94 <gen_numname+0xe8>
}
 8003cc2:	bf00      	nop
 8003cc4:	3730      	adds	r7, #48	; 0x30
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003cd6:	230b      	movs	r3, #11
 8003cd8:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	01db      	lsls	r3, r3, #7
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	6079      	str	r1, [r7, #4]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	73fb      	strb	r3, [r7, #15]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ed      	bne.n	8003cda <sum_sfn+0x10>
	return sum;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d12:	2100      	movs	r1, #0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fb20 	bl	800335a <dir_sdi>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <dir_find+0x1e>
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	e0c1      	b.n	8003eac <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d28:	23ff      	movs	r3, #255	; 0xff
 8003d2a:	753b      	strb	r3, [r7, #20]
 8003d2c:	7d3b      	ldrb	r3, [r7, #20]
 8003d2e:	757b      	strb	r3, [r7, #21]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003d36:	3304      	adds	r3, #4
 8003d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d3c:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d4c:	3310      	adds	r3, #16
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f7fe fe1c 	bl	8002990 <move_window>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 809e 	bne.w	8003ea0 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003d76:	7dbb      	ldrb	r3, [r7, #22]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <dir_find+0x78>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	75fb      	strb	r3, [r7, #23]
 8003d80:	e093      	b.n	8003eaa <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	330b      	adds	r3, #11
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d8c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003d8e:	7dbb      	ldrb	r3, [r7, #22]
 8003d90:	2be5      	cmp	r3, #229	; 0xe5
 8003d92:	d007      	beq.n	8003da4 <dir_find+0x9a>
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <dir_find+0xae>
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b0f      	cmp	r3, #15
 8003da2:	d009      	beq.n	8003db8 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003da4:	23ff      	movs	r3, #255	; 0xff
 8003da6:	757b      	strb	r3, [r7, #21]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003dae:	3304      	adds	r3, #4
 8003db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e068      	b.n	8003e8a <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	d139      	bne.n	8003e32 <dir_find+0x128>
				if (dp->lfn) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d05f      	beq.n	8003e8a <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003dca:	7dbb      	ldrb	r3, [r7, #22]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d012      	beq.n	8003dfa <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	7b5b      	ldrb	r3, [r3, #13]
 8003dd8:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003dda:	7dbb      	ldrb	r3, [r7, #22]
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	75bb      	strb	r3, [r7, #22]
 8003de2:	7dbb      	ldrb	r3, [r7, #22]
 8003de4:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dec:	3306      	adds	r3, #6
 8003dee:	881a      	ldrh	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003df6:	3304      	adds	r3, #4
 8003df8:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003dfa:	7dba      	ldrb	r2, [r7, #22]
 8003dfc:	7d7b      	ldrb	r3, [r7, #21]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d114      	bne.n	8003e2c <dir_find+0x122>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	330d      	adds	r3, #13
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	7d3a      	ldrb	r2, [r7, #20]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d10e      	bne.n	8003e2c <dir_find+0x122>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fd81 	bl	8003920 <cmp_lfn>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <dir_find+0x122>
 8003e24:	7d7b      	ldrb	r3, [r7, #21]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e000      	b.n	8003e2e <dir_find+0x124>
 8003e2c:	23ff      	movs	r3, #255	; 0xff
 8003e2e:	757b      	strb	r3, [r7, #21]
 8003e30:	e02b      	b.n	8003e8a <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e32:	7d7b      	ldrb	r3, [r7, #21]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <dir_find+0x13e>
 8003e38:	6938      	ldr	r0, [r7, #16]
 8003e3a:	f7ff ff46 	bl	8003cca <sum_sfn>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	7d3b      	ldrb	r3, [r7, #20]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d02d      	beq.n	8003ea4 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	3318      	adds	r3, #24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330b      	adds	r3, #11
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10c      	bne.n	8003e78 <dir_find+0x16e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	3318      	adds	r3, #24
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	220b      	movs	r2, #11
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6938      	ldr	r0, [r7, #16]
 8003e6e:	f7fe fb33 	bl	80024d8 <mem_cmp>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003e78:	23ff      	movs	r3, #255	; 0xff
 8003e7a:	757b      	strb	r3, [r7, #21]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e82:	3304      	adds	r3, #4
 8003e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e88:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fb3f 	bl	8003510 <dir_next>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f43f af50 	beq.w	8003d3e <dir_find+0x34>
 8003e9e:	e004      	b.n	8003eaa <dir_find+0x1a0>
		if (res != FR_OK) break;
 8003ea0:	bf00      	nop
 8003ea2:	e002      	b.n	8003eaa <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003ea4:	bf00      	nop
 8003ea6:	e000      	b.n	8003eaa <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003ea8:	bf00      	nop

	return res;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8003ebe:	23ff      	movs	r3, #255	; 0xff
 8003ec0:	757b      	strb	r3, [r7, #21]
 8003ec2:	23ff      	movs	r3, #255	; 0xff
 8003ec4:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8003eca:	e08f      	b.n	8003fec <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eda:	3310      	adds	r3, #16
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe fd55 	bl	8002990 <move_window>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 8086 	bne.w	8003ffe <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef8:	3314      	adds	r3, #20
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f04:	7dbb      	ldrb	r3, [r7, #22]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <dir_read+0x5c>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	75fb      	strb	r3, [r7, #23]
 8003f0e:	e07b      	b.n	8004008 <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	330b      	adds	r3, #11
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1a:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003f1c:	7dbb      	ldrb	r3, [r7, #22]
 8003f1e:	2be5      	cmp	r3, #229	; 0xe5
 8003f20:	d00e      	beq.n	8003f40 <dir_read+0x8c>
 8003f22:	7dbb      	ldrb	r3, [r7, #22]
 8003f24:	2b2e      	cmp	r3, #46	; 0x2e
 8003f26:	d00b      	beq.n	8003f40 <dir_read+0x8c>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d002      	beq.n	8003f46 <dir_read+0x92>
			ord = 0xFF;
 8003f40:	23ff      	movs	r3, #255	; 0xff
 8003f42:	757b      	strb	r3, [r7, #21]
 8003f44:	e049      	b.n	8003fda <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d133      	bne.n	8003fb4 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8003f4c:	7dbb      	ldrb	r3, [r7, #22]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d012      	beq.n	8003f7c <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	7b5b      	ldrb	r3, [r3, #13]
 8003f5a:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 8003f5c:	7dbb      	ldrb	r3, [r7, #22]
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f62:	75bb      	strb	r3, [r7, #22]
 8003f64:	7dbb      	ldrb	r3, [r7, #22]
 8003f66:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	3306      	adds	r3, #6
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f78:	3304      	adds	r3, #4
 8003f7a:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003f7c:	7dba      	ldrb	r2, [r7, #22]
 8003f7e:	7d7b      	ldrb	r3, [r7, #21]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d114      	bne.n	8003fae <dir_read+0xfa>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	330d      	adds	r3, #13
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	7d3a      	ldrb	r2, [r7, #20]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d10e      	bne.n	8003fae <dir_read+0xfa>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6939      	ldr	r1, [r7, #16]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fd2e 	bl	80039fc <pick_lfn>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <dir_read+0xfa>
 8003fa6:	7d7b      	ldrb	r3, [r7, #21]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	e000      	b.n	8003fb0 <dir_read+0xfc>
 8003fae:	23ff      	movs	r3, #255	; 0xff
 8003fb0:	757b      	strb	r3, [r7, #21]
 8003fb2:	e012      	b.n	8003fda <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8003fb4:	7d7b      	ldrb	r3, [r7, #21]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <dir_read+0x116>
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f7ff fe85 	bl	8003cca <sum_sfn>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	7d3b      	ldrb	r3, [r7, #20]
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01b      	beq.n	8004002 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd6:	801a      	strh	r2, [r3, #0]
				break;
 8003fd8:	e013      	b.n	8004002 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fa97 	bl	8003510 <dir_next>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10c      	bne.n	8004006 <dir_read+0x152>
	while (dp->sect) {
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f af68 	bne.w	8003ecc <dir_read+0x18>
 8003ffc:	e004      	b.n	8004008 <dir_read+0x154>
		if (res != FR_OK) break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <dir_read+0x154>
				break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <dir_read+0x154>
		if (res != FR_OK) break;
 8004006:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <dir_read+0x166>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	3310      	adds	r3, #16
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

	return res;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004032:	3318      	adds	r3, #24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	220c      	movs	r2, #12
 8004048:	6a39      	ldr	r1, [r7, #32]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fa0e 	bl	800246c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d039      	beq.n	80040ce <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	330b      	adds	r3, #11
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800406c:	2301      	movs	r3, #1
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004070:	e013      	b.n	800409a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004072:	f107 010c 	add.w	r1, r7, #12
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	6a38      	ldr	r0, [r7, #32]
 800407c:	f7ff fd96 	bl	8003bac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fe42 	bl	8003d0a <dir_find>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800408c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	3301      	adds	r3, #1
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	2b63      	cmp	r3, #99	; 0x63
 800409e:	d9e8      	bls.n	8004072 <dir_register+0x4e>
 80040a0:	e000      	b.n	80040a4 <dir_register+0x80>
			if (res != FR_OK) break;
 80040a2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d101      	bne.n	80040ae <dir_register+0x8a>
 80040aa:	2307      	movs	r3, #7
 80040ac:	e0e3      	b.n	8004276 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80040ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d002      	beq.n	80040bc <dir_register+0x98>
 80040b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040ba:	e0dc      	b.n	8004276 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	330b      	adds	r3, #11
 80040c0:	7dfa      	ldrb	r2, [r7, #23]
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d014      	beq.n	8004102 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80040d8:	2300      	movs	r3, #0
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
 80040dc:	e002      	b.n	80040e4 <dir_register+0xc0>
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	3301      	adds	r3, #1
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f5      	bne.n	80040de <dir_register+0xba>
		nent = (n + 25) / 13;
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	3319      	adds	r3, #25
 80040f6:	4a62      	ldr	r2, [pc, #392]	; (8004280 <dir_register+0x25c>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	e001      	b.n	8004106 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fb63 	bl	80037d4 <dir_alloc>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004118:	2b00      	cmp	r3, #0
 800411a:	d160      	bne.n	80041de <dir_register+0x1ba>
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	3b01      	subs	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05a      	beq.n	80041de <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	3306      	adds	r3, #6
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff f90d 	bl	800335a <dir_sdi>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800414a:	2b00      	cmp	r3, #0
 800414c:	d147      	bne.n	80041de <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	3318      	adds	r3, #24
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fdb6 	bl	8003cca <sum_sfn>
 800415e:	4603      	mov	r3, r0
 8004160:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004170:	3310      	adds	r3, #16
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe fc0a 	bl	8002990 <move_window>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004186:	2b00      	cmp	r3, #0
 8004188:	d128      	bne.n	80041dc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	3314      	adds	r3, #20
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	7efb      	ldrb	r3, [r7, #27]
 80041a2:	f7ff fc8f 	bl	8003ac4 <fit_lfn>
				dp->fs->wflag = 1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	3304      	adds	r3, #4
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff f9a8 	bl	8003510 <dir_next>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80041c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <dir_register+0x1ba>
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	3b01      	subs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1c3      	bne.n	8004162 <dir_register+0x13e>
 80041da:	e000      	b.n	80041de <dir_register+0x1ba>
				if (res != FR_OK) break;
 80041dc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80041de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d145      	bne.n	8004272 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	3310      	adds	r3, #16
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7fe fbc8 	bl	8002990 <move_window>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800420a:	2b00      	cmp	r3, #0
 800420c:	d131      	bne.n	8004272 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004214:	3314      	adds	r3, #20
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2220      	movs	r2, #32
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f942 	bl	80024a6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004228:	3314      	adds	r3, #20
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004232:	3318      	adds	r3, #24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	220b      	movs	r2, #11
 8004238:	4619      	mov	r1, r3
 800423a:	f7fe f917 	bl	800246c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	3318      	adds	r3, #24
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330b      	adds	r3, #11
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004252:	3314      	adds	r3, #20
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	f002 0218 	and.w	r2, r2, #24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	3304      	adds	r3, #4
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8004272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004276:	4618      	mov	r0, r3
 8004278:	3730      	adds	r7, #48	; 0x30
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	4ec4ec4f 	.word	0x4ec4ec4f

08004284 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	UINT i;

	i = dp->index;	/* SFN index */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	3306      	adds	r3, #6
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800429e:	3304      	adds	r3, #4
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d005      	beq.n	80042b6 <dir_remove+0x32>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042b0:	3304      	adds	r3, #4
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <dir_remove+0x34>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff f84d 	bl	800335a <dir_sdi>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d146      	bne.n	8004358 <dir_remove+0xd4>
		do {
			res = move_window(dp->fs, dp->sect);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	3310      	adds	r3, #16
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f7fe fb56 	bl	8002990 <move_window>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12c      	bne.n	8004348 <dir_remove+0xc4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	3314      	adds	r3, #20
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2220      	movs	r2, #32
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f8d2 	bl	80024a6 <mem_set>
			*dp->dir = DDEM;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	3314      	adds	r3, #20
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22e5      	movs	r2, #229	; 0xe5
 800430e:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	3304      	adds	r3, #4
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	3306      	adds	r3, #6
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4293      	cmp	r3, r2
 8004332:	d90b      	bls.n	800434c <dir_remove+0xc8>
			res = dir_next(dp, 0);		/* Next entry */
 8004334:	2100      	movs	r1, #0
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff f8ea 	bl	8003510 <dir_next>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0c1      	beq.n	80042ca <dir_remove+0x46>
 8004346:	e002      	b.n	800434e <dir_remove+0xca>
			if (res != FR_OK) break;
 8004348:	bf00      	nop
 800434a:	e000      	b.n	800434e <dir_remove+0xca>
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 800434c:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d101      	bne.n	8004358 <dir_remove+0xd4>
 8004354:	2302      	movs	r3, #2
 8004356:	73fb      	strb	r3, [r7, #15]
			dp->fs->wflag = 1;
		}
	}
#endif

	return res;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	e002      	b.n	800437c <create_name+0x18>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3301      	adds	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b2f      	cmp	r3, #47	; 0x2f
 8004382:	d0f8      	beq.n	8004376 <create_name+0x12>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b5c      	cmp	r3, #92	; 0x5c
 800438a:	d0f4      	beq.n	8004376 <create_name+0x12>
	lfn = dp->lfn;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	61ba      	str	r2, [r7, #24]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80043ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ae:	2b1f      	cmp	r3, #31
 80043b0:	d92f      	bls.n	8004412 <create_name+0xae>
 80043b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043b4:	2b2f      	cmp	r3, #47	; 0x2f
 80043b6:	d02c      	beq.n	8004412 <create_name+0xae>
 80043b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ba:	2b5c      	cmp	r3, #92	; 0x5c
 80043bc:	d029      	beq.n	8004412 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2bfe      	cmp	r3, #254	; 0xfe
 80043c2:	d901      	bls.n	80043c8 <create_name+0x64>
			return FR_INVALID_NAME;
 80043c4:	2306      	movs	r3, #6
 80043c6:	e18b      	b.n	80046e0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80043c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80043ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f002 fe04 	bl	8006fe0 <ff_convert>
 80043d8:	4603      	mov	r3, r0
 80043da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80043dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <create_name+0x82>
 80043e2:	2306      	movs	r3, #6
 80043e4:	e17c      	b.n	80046e0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80043e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043e8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ea:	d809      	bhi.n	8004400 <create_name+0x9c>
 80043ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	488f      	ldr	r0, [pc, #572]	; (8004630 <create_name+0x2cc>)
 80043f2:	f7fe f897 	bl	8002524 <chk_chr>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <create_name+0x9c>
			return FR_INVALID_NAME;
 80043fc:	2306      	movs	r3, #6
 80043fe:	e16f      	b.n	80046e0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	617a      	str	r2, [r7, #20]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800440e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004410:	e7c5      	b.n	800439e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	441a      	add	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800441c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800441e:	2b1f      	cmp	r3, #31
 8004420:	d801      	bhi.n	8004426 <create_name+0xc2>
 8004422:	2304      	movs	r3, #4
 8004424:	e000      	b.n	8004428 <create_name+0xc4>
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800442c:	e011      	b.n	8004452 <create_name+0xee>
		w = lfn[di - 1];
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004434:	3b01      	subs	r3, #1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004442:	2b20      	cmp	r3, #32
 8004444:	d002      	beq.n	800444c <create_name+0xe8>
 8004446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004448:	2b2e      	cmp	r3, #46	; 0x2e
 800444a:	d106      	bne.n	800445a <create_name+0xf6>
		di--;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3b01      	subs	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ea      	bne.n	800442e <create_name+0xca>
 8004458:	e000      	b.n	800445c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800445a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <create_name+0x102>
 8004462:	2306      	movs	r3, #6
 8004464:	e13c      	b.n	80046e0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	3318      	adds	r3, #24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	220b      	movs	r2, #11
 800447e:	2120      	movs	r1, #32
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe f810 	bl	80024a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e002      	b.n	8004492 <create_name+0x12e>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	3301      	adds	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2b20      	cmp	r3, #32
 800449e:	d0f5      	beq.n	800448c <create_name+0x128>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	2b2e      	cmp	r3, #46	; 0x2e
 80044ac:	d0ee      	beq.n	800448c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <create_name+0x164>
 80044b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044b8:	f043 0303 	orr.w	r3, r3, #3
 80044bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80044c0:	e002      	b.n	80044c8 <create_name+0x164>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <create_name+0x17e>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	3b01      	subs	r3, #1
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	2b2e      	cmp	r3, #46	; 0x2e
 80044e0:	d1ef      	bne.n	80044c2 <create_name+0x15e>

	b = i = 0; ni = 8;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044ec:	2308      	movs	r3, #8
 80044ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	61ba      	str	r2, [r7, #24]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8092 	beq.w	800462c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800450a:	2b20      	cmp	r3, #32
 800450c:	d006      	beq.n	800451c <create_name+0x1b8>
 800450e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004510:	2b2e      	cmp	r3, #46	; 0x2e
 8004512:	d10a      	bne.n	800452a <create_name+0x1c6>
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	429a      	cmp	r2, r3
 800451a:	d006      	beq.n	800452a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800451c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004520:	f043 0303 	orr.w	r3, r3, #3
 8004524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004528:	e07f      	b.n	800462a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	429a      	cmp	r2, r3
 8004530:	d203      	bcs.n	800453a <create_name+0x1d6>
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	429a      	cmp	r2, r3
 8004538:	d123      	bne.n	8004582 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	2b0b      	cmp	r3, #11
 800453e:	d106      	bne.n	800454e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8004540:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004544:	f043 0303 	orr.w	r3, r3, #3
 8004548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800454c:	e077      	b.n	800463e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	429a      	cmp	r2, r3
 8004554:	d005      	beq.n	8004562 <create_name+0x1fe>
 8004556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800455a:	f043 0303 	orr.w	r3, r3, #3
 800455e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d868      	bhi.n	800463c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	2308      	movs	r3, #8
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	230b      	movs	r3, #11
 8004574:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004580:	e053      	b.n	800462a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004584:	2b7f      	cmp	r3, #127	; 0x7f
 8004586:	d914      	bls.n	80045b2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f002 fd27 	bl	8006fe0 <ff_convert>
 8004592:	4603      	mov	r3, r0
 8004594:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <create_name+0x242>
 800459c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800459e:	3b80      	subs	r3, #128	; 0x80
 80045a0:	4a24      	ldr	r2, [pc, #144]	; (8004634 <create_name+0x2d0>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80045a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045aa:	f043 0302 	orr.w	r3, r3, #2
 80045ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80045b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <create_name+0x264>
 80045b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ba:	4619      	mov	r1, r3
 80045bc:	481e      	ldr	r0, [pc, #120]	; (8004638 <create_name+0x2d4>)
 80045be:	f7fd ffb1 	bl	8002524 <chk_chr>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80045c8:	235f      	movs	r3, #95	; 0x5f
 80045ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045d0:	f043 0303 	orr.w	r3, r3, #3
 80045d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80045d8:	e01b      	b.n	8004612 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80045da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d909      	bls.n	80045f4 <create_name+0x290>
 80045e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045e2:	2b5a      	cmp	r3, #90	; 0x5a
 80045e4:	d806      	bhi.n	80045f4 <create_name+0x290>
					b |= 2;
 80045e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045f2:	e00e      	b.n	8004612 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80045f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045f6:	2b60      	cmp	r3, #96	; 0x60
 80045f8:	d90b      	bls.n	8004612 <create_name+0x2ae>
 80045fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045fc:	2b7a      	cmp	r3, #122	; 0x7a
 80045fe:	d808      	bhi.n	8004612 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8004600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800460c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800460e:	3b20      	subs	r3, #32
 8004610:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004618:	3318      	adds	r3, #24
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	6239      	str	r1, [r7, #32]
 8004622:	4413      	add	r3, r2
 8004624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800462a:	e761      	b.n	80044f0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800462c:	bf00      	nop
 800462e:	e006      	b.n	800463e <create_name+0x2da>
 8004630:	08008d10 	.word	0x08008d10
 8004634:	08008f58 	.word	0x08008f58
 8004638:	08008d1c 	.word	0x08008d1c
			if (si > di) break;			/* No extension */
 800463c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	3318      	adds	r3, #24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2be5      	cmp	r3, #229	; 0xe5
 800464c:	d106      	bne.n	800465c <create_name+0x2f8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	3318      	adds	r3, #24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2205      	movs	r2, #5
 800465a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b08      	cmp	r3, #8
 8004660:	d104      	bne.n	800466c <create_name+0x308>
 8004662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d005      	beq.n	8004684 <create_name+0x320>
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d105      	bne.n	8004690 <create_name+0x32c>
		cf |= NS_LFN;
 8004684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d117      	bne.n	80046cc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800469c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <create_name+0x350>
 80046a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80046ac:	f043 0310 	orr.w	r3, r3, #16
 80046b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80046b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d105      	bne.n	80046cc <create_name+0x368>
 80046c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	3318      	adds	r3, #24
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330b      	adds	r3, #11
 80046d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80046dc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80046de:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	; 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b2f      	cmp	r3, #47	; 0x2f
 80046f8:	d003      	beq.n	8004702 <follow_path+0x1a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b5c      	cmp	r3, #92	; 0x5c
 8004700:	d102      	bne.n	8004708 <follow_path+0x20>
		path++;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470e:	3308      	adds	r3, #8
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b1f      	cmp	r3, #31
 800471a:	d80c      	bhi.n	8004736 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800471c:	2100      	movs	r1, #0
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe fe1b 	bl	800335a <dir_sdi>
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	3314      	adds	r3, #20
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e04c      	b.n	80047d0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004736:	463b      	mov	r3, r7
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe12 	bl	8004364 <create_name>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fadd 	bl	8003d0a <dir_find>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	3318      	adds	r3, #24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	7adb      	ldrb	r3, [r3, #11]
 8004760:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d12d      	bne.n	80047ca <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d128      	bne.n	80047ca <follow_path+0xe2>
 8004778:	2305      	movs	r3, #5
 800477a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800477c:	e025      	b.n	80047ca <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800477e:	7bbb      	ldrb	r3, [r7, #14]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d122      	bne.n	80047ce <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478e:	3314      	adds	r3, #20
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	330b      	adds	r3, #11
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 80047a2:	2305      	movs	r3, #5
 80047a4:	73fb      	strb	r3, [r7, #15]
 80047a6:	e013      	b.n	80047d0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f85f 	bl	8003876 <ld_clust>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c0:	3308      	adds	r3, #8
 80047c2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80047c4:	e7b7      	b.n	8004736 <follow_path+0x4e>
			if (res != FR_OK) break;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <follow_path+0xe8>
				break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80047ce:	bf00      	nop
		}
	}

	return res;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80047da:	b480      	push	{r7}
 80047dc:	b087      	sub	sp, #28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d031      	beq.n	8004854 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e002      	b.n	80047fe <get_ldnumber+0x24>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b1f      	cmp	r3, #31
 8004804:	d903      	bls.n	800480e <get_ldnumber+0x34>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b3a      	cmp	r3, #58	; 0x3a
 800480c:	d1f4      	bne.n	80047f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b3a      	cmp	r3, #58	; 0x3a
 8004814:	d11c      	bne.n	8004850 <get_ldnumber+0x76>
			tp = *path;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	60fa      	str	r2, [r7, #12]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	3b30      	subs	r3, #48	; 0x30
 8004826:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b09      	cmp	r3, #9
 800482c:	d80e      	bhi.n	800484c <get_ldnumber+0x72>
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	429a      	cmp	r2, r3
 8004834:	d10a      	bne.n	800484c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <get_ldnumber+0x72>
					vol = (int)i;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	e002      	b.n	8004856 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004854:	693b      	ldr	r3, [r7, #16]
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	3304      	adds	r3, #4
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800487c:	330c      	adds	r3, #12
 800487e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004882:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fe f882 	bl	8002990 <move_window>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <check_fs+0x36>
		return 3;
 8004892:	2303      	movs	r3, #3
 8004894:	e04a      	b.n	800492c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800489c:	3301      	adds	r3, #1
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	b21a      	sxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80048aa:	b21b      	sxth	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b21b      	sxth	r3, r3
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <check_fs+0xd4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d001      	beq.n	80048ba <check_fs+0x5a>
		return 2;
 80048b6:	2302      	movs	r3, #2
 80048b8:	e038      	b.n	800492c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3336      	adds	r3, #54	; 0x36
 80048be:	3303      	adds	r3, #3
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	061a      	lsls	r2, r3, #24
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3336      	adds	r3, #54	; 0x36
 80048c8:	3302      	adds	r3, #2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	4313      	orrs	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	3236      	adds	r2, #54	; 0x36
 80048d4:	3201      	adds	r2, #1
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	0212      	lsls	r2, r2, #8
 80048da:	4313      	orrs	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <check_fs+0xd8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <check_fs+0x92>
		return 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e01c      	b.n	800492c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3352      	adds	r3, #82	; 0x52
 80048f6:	3303      	adds	r3, #3
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	061a      	lsls	r2, r3, #24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3352      	adds	r3, #82	; 0x52
 8004900:	3302      	adds	r3, #2
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	4313      	orrs	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	3252      	adds	r2, #82	; 0x52
 800490c:	3201      	adds	r2, #1
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	0212      	lsls	r2, r2, #8
 8004912:	4313      	orrs	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800491a:	4313      	orrs	r3, r2
 800491c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004920:	4a05      	ldr	r2, [pc, #20]	; (8004938 <check_fs+0xd8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <check_fs+0xca>
		return 0;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <check_fs+0xcc>

	return 1;
 800492a:	2301      	movs	r3, #1
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	ffffaa55 	.word	0xffffaa55
 8004938:	00544146 	.word	0x00544146

0800493c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b096      	sub	sp, #88	; 0x58
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f7ff ff42 	bl	80047da <get_ldnumber>
 8004956:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	da01      	bge.n	8004962 <find_volume+0x26>
 800495e:	230b      	movs	r3, #11
 8004960:	e33c      	b.n	8004fdc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004962:	4ab3      	ldr	r2, [pc, #716]	; (8004c30 <find_volume+0x2f4>)
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <find_volume+0x3a>
 8004972:	230c      	movs	r3, #12
 8004974:	e332      	b.n	8004fdc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01d      	beq.n	80049c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	3301      	adds	r3, #1
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd fccc 	bl	8002330 <disk_status>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800499e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10c      	bne.n	80049c4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <find_volume+0x84>
 80049b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80049bc:	230a      	movs	r3, #10
 80049be:	e30d      	b.n	8004fdc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80049c0:	2300      	movs	r3, #0
 80049c2:	e30b      	b.n	8004fdc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d8:	3301      	adds	r3, #1
 80049da:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	3301      	adds	r3, #1
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fcbc 	bl	8002364 <disk_initialize>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80049f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80049fe:	2303      	movs	r3, #3
 8004a00:	e2ec      	b.n	8004fdc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <find_volume+0xdc>
 8004a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8004a14:	230a      	movs	r3, #10
 8004a16:	e2e1      	b.n	8004fdc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1e:	3301      	adds	r3, #1
 8004a20:	7818      	ldrb	r0, [r3, #0]
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	330a      	adds	r3, #10
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	f7fd fcff 	bl	8002430 <disk_ioctl>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3e:	330a      	adds	r3, #10
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d307      	bcc.n	8004a58 <find_volume+0x11c>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4e:	330a      	adds	r3, #10
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d901      	bls.n	8004a5c <find_volume+0x120>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e2bf      	b.n	8004fdc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004a60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a64:	f7ff fefc 	bl	8004860 <check_fs>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d155      	bne.n	8004b22 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004a76:	2300      	movs	r3, #0
 8004a78:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7a:	e029      	b.n	8004ad0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004a86:	4413      	add	r3, r2
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <find_volume+0x17e>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	330b      	adds	r3, #11
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	061a      	lsls	r2, r3, #24
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	330a      	adds	r3, #10
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa8:	3209      	adds	r2, #9
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	0212      	lsls	r2, r2, #8
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	3208      	adds	r2, #8
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	e000      	b.n	8004abc <find_volume+0x180>
 8004aba:	2200      	movs	r2, #0
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004acc:	3301      	adds	r3, #1
 8004ace:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d9d2      	bls.n	8004a7c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <find_volume+0x1aa>
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004aee:	4413      	add	r3, r2
 8004af0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004af4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <find_volume+0x1cc>
 8004afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004afe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b00:	f7ff feae 	bl	8004860 <check_fs>
 8004b04:	4603      	mov	r3, r0
 8004b06:	e000      	b.n	8004b0a <find_volume+0x1ce>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <find_volume+0x1e6>
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	3301      	adds	r3, #1
 8004b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d9e1      	bls.n	8004ae6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d101      	bne.n	8004b2e <find_volume+0x1f2>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e256      	b.n	8004fdc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <find_volume+0x1fe>
 8004b36:	230d      	movs	r3, #13
 8004b38:	e250      	b.n	8004fdc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	7b1b      	ldrb	r3, [r3, #12]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	b21a      	sxth	r2, r3
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	7adb      	ldrb	r3, [r3, #11]
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b21b      	sxth	r3, r3
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b54:	330a      	adds	r3, #10
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	e23d      	b.n	8004fdc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	7ddb      	ldrb	r3, [r3, #23]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	b21a      	sxth	r2, r3
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	7d9b      	ldrb	r3, [r3, #22]
 8004b6c:	b21b      	sxth	r3, r3
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d112      	bne.n	8004ba2 <find_volume+0x266>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b82:	061a      	lsls	r2, r3, #24
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b90:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004b94:	0212      	lsls	r2, r2, #8
 8004b96:	4313      	orrs	r3, r2
 8004b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	3318      	adds	r3, #24
 8004baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	7c1a      	ldrb	r2, [r3, #16]
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb8:	3303      	adds	r3, #3
 8004bba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d008      	beq.n	8004bdc <find_volume+0x2a0>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d001      	beq.n	8004bdc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8004bd8:	230d      	movs	r3, #13
 8004bda:	e1ff      	b.n	8004fdc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be2:	3303      	adds	r3, #3
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	7b5a      	ldrb	r2, [r3, #13]
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c04:	3302      	adds	r3, #2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00e      	beq.n	8004c2a <find_volume+0x2ee>
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c12:	3302      	adds	r3, #2
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	3302      	adds	r3, #2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8004c2a:	230d      	movs	r3, #13
 8004c2c:	e1d6      	b.n	8004fdc <find_volume+0x6a0>
 8004c2e:	bf00      	nop
 8004c30:	200000a0 	.word	0x200000a0

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	7c9b      	ldrb	r3, [r3, #18]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	b21a      	sxth	r2, r3
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	7c5b      	ldrb	r3, [r3, #17]
 8004c40:	b21b      	sxth	r3, r3
 8004c42:	4313      	orrs	r3, r2
 8004c44:	b21b      	sxth	r3, r3
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4e:	3308      	adds	r3, #8
 8004c50:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c58:	3308      	adds	r3, #8
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c62:	330a      	adds	r3, #10
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c6e:	fb03 f301 	mul.w	r3, r3, r1
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8004c7a:	230d      	movs	r3, #13
 8004c7c:	e1ae      	b.n	8004fdc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	7d1b      	ldrb	r3, [r3, #20]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	b21a      	sxth	r2, r3
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	7cdb      	ldrb	r3, [r3, #19]
 8004c8a:	b21b      	sxth	r3, r3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d112      	bne.n	8004cc0 <find_volume+0x384>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004ca0:	061a      	lsls	r2, r3, #24
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	4313      	orrs	r3, r2
 8004cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004cb2:	0212      	lsls	r2, r2, #8
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	7bdb      	ldrb	r3, [r3, #15]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	b21a      	sxth	r2, r3
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	7b9b      	ldrb	r3, [r3, #14]
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <find_volume+0x3a2>
 8004cda:	230d      	movs	r3, #13
 8004cdc:	e17e      	b.n	8004fdc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004cde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce2:	441a      	add	r2, r3
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cea:	3308      	adds	r3, #8
 8004cec:	8819      	ldrh	r1, [r3, #0]
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	330a      	adds	r3, #10
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d201      	bcs.n	8004d12 <find_volume+0x3d6>
 8004d0e:	230d      	movs	r3, #13
 8004d10:	e164      	b.n	8004fdc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	3302      	adds	r3, #2
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <find_volume+0x3f6>
 8004d2e:	230d      	movs	r3, #13
 8004d30:	e154      	b.n	8004fdc <find_volume+0x6a0>
	fmt = FS_FAT12;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d902      	bls.n	8004d48 <find_volume+0x40c>
 8004d42:	2302      	movs	r3, #2
 8004d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d902      	bls.n	8004d58 <find_volume+0x41c>
 8004d52:	2303      	movs	r3, #3
 8004d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d62:	3314      	adds	r3, #20
 8004d64:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6c:	331c      	adds	r3, #28
 8004d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d70:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004d72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	441a      	add	r2, r3
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d7e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8004d80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	441a      	add	r2, r3
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8004d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d127      	bne.n	8004de8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9e:	3308      	adds	r3, #8
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <find_volume+0x46e>
 8004da6:	230d      	movs	r3, #13
 8004da8:	e118      	b.n	8004fdc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004db0:	061a      	lsls	r2, r3, #24
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dbe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004dc2:	0212      	lsls	r2, r2, #8
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	3314      	adds	r3, #20
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	647b      	str	r3, [r7, #68]	; 0x44
 8004de6:	e030      	b.n	8004e4a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dee:	3308      	adds	r3, #8
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <find_volume+0x4be>
 8004df6:	230d      	movs	r3, #13
 8004df8:	e0f0      	b.n	8004fdc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e04:	441a      	add	r2, r3
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d106      	bne.n	8004e26 <find_volume+0x4ea>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1e:	3314      	adds	r3, #20
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	e010      	b.n	8004e48 <find_volume+0x50c>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	085a      	lsrs	r2, r3, #1
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3e:	3314      	adds	r3, #20
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e50:	3318      	adds	r3, #24
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5a:	330a      	adds	r3, #10
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	440b      	add	r3, r1
 8004e64:	1e59      	subs	r1, r3, #1
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6c:	330a      	adds	r3, #10
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d201      	bcs.n	8004e7c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8004e78:	230d      	movs	r3, #13
 8004e7a:	e0af      	b.n	8004fdc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e82:	3310      	adds	r3, #16
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e90:	3310      	adds	r3, #16
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	3305      	adds	r3, #5
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004eaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d17d      	bne.n	8004fae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	b21a      	sxth	r2, r3
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d170      	bne.n	8004fae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ed4:	f7fd fd5c 	bl	8002990 <move_window>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d167      	bne.n	8004fae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee4:	3305      	adds	r3, #5
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	b21a      	sxth	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	4313      	orrs	r3, r2
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <find_volume+0x6a8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d153      	bne.n	8004fae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	78db      	ldrb	r3, [r3, #3]
 8004f0a:	061a      	lsls	r2, r3, #24
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	789b      	ldrb	r3, [r3, #2]
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	4313      	orrs	r3, r2
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	7852      	ldrb	r2, [r2, #1]
 8004f18:	0212      	lsls	r2, r2, #8
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <find_volume+0x6ac>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d142      	bne.n	8004fae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f3c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8004f40:	0212      	lsls	r2, r2, #8
 8004f42:	4313      	orrs	r3, r2
 8004f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f46:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	4a27      	ldr	r2, [pc, #156]	; (8004fec <find_volume+0x6b0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d12d      	bne.n	8004fae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004f58:	061a      	lsls	r2, r3, #24
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	4313      	orrs	r3, r2
 8004f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f66:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004f6a:	0212      	lsls	r2, r2, #8
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f70:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8004f74:	431a      	orrs	r2, r3
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004f86:	061a      	lsls	r2, r3, #24
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	4313      	orrs	r3, r2
 8004f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f94:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004f98:	0212      	lsls	r2, r2, #8
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f9e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004faa:	330c      	adds	r3, #12
 8004fac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004fb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <find_volume+0x6b4>)
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <find_volume+0x6b4>)
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <find_volume+0x6b4>)
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd0:	3306      	adds	r3, #6
 8004fd2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fd6:	f7fd fc59 	bl	800288c <clear_lock>
#endif

	return FR_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3758      	adds	r7, #88	; 0x58
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	ffffaa55 	.word	0xffffaa55
 8004fe8:	41615252 	.word	0x41615252
 8004fec:	61417272 	.word	0x61417272
 8004ff0:	200000a4 	.word	0x200000a4

08004ff4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02d      	beq.n	8005062 <validate+0x6e>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d027      	beq.n	8005062 <validate+0x6e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01e      	beq.n	8005062 <validate+0x6e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	3306      	adds	r3, #6
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503a:	3304      	adds	r3, #4
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d10f      	bne.n	8005062 <validate+0x6e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	3301      	adds	r3, #1
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd f96c 	bl	8002330 <disk_status>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <validate+0x72>
		return FR_INVALID_OBJECT;
 8005062:	2309      	movs	r3, #9
 8005064:	e000      	b.n	8005068 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fba7 	bl	80047da <get_ldnumber>
 800508c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da01      	bge.n	8005098 <f_mount+0x28>
 8005094:	230b      	movs	r3, #11
 8005096:	e02f      	b.n	80050f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <f_mount+0x90>)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80050a8:	69b8      	ldr	r0, [r7, #24]
 80050aa:	f7fd fbef 	bl	800288c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	490d      	ldr	r1, [pc, #52]	; (8005100 <f_mount+0x90>)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <f_mount+0x6e>
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <f_mount+0x72>
 80050de:	2300      	movs	r3, #0
 80050e0:	e00a      	b.n	80050f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80050e2:	f107 0108 	add.w	r1, r7, #8
 80050e6:	f107 030c 	add.w	r3, r7, #12
 80050ea:	2200      	movs	r2, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fc25 	bl	800493c <find_volume>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200000a0 	.word	0x200000a0

08005104 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	f107 0318 	add.w	r3, r7, #24
 8005112:	3b0c      	subs	r3, #12
 8005114:	6018      	str	r0, [r3, #0]
 8005116:	f107 0318 	add.w	r3, r7, #24
 800511a:	3b10      	subs	r3, #16
 800511c:	6019      	str	r1, [r3, #0]
 800511e:	f107 0318 	add.w	r3, r7, #24
 8005122:	3b11      	subs	r3, #17
 8005124:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	3b0c      	subs	r3, #12
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <f_open+0x32>
 8005132:	2309      	movs	r3, #9
 8005134:	e319      	b.n	800576a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8005136:	f107 0318 	add.w	r3, r7, #24
 800513a:	3b0c      	subs	r3, #12
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005146:	f107 0318 	add.w	r3, r7, #24
 800514a:	3b11      	subs	r3, #17
 800514c:	f107 0218 	add.w	r2, r7, #24
 8005150:	3a11      	subs	r2, #17
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	f002 021f 	and.w	r2, r2, #31
 8005158:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800515a:	f107 0318 	add.w	r3, r7, #24
 800515e:	3b11      	subs	r3, #17
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	f107 0118 	add.w	r1, r7, #24
 800516c:	3910      	subs	r1, #16
 800516e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005172:	3b18      	subs	r3, #24
 8005174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fbdf 	bl	800493c <find_volume>
 800517e:	4603      	mov	r3, r0
 8005180:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005184:	f102 0217 	add.w	r2, r2, #23
 8005188:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800518a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800518e:	f103 0317 	add.w	r3, r3, #23
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 82e3 	bne.w	8005760 <f_open+0x65c>
		INIT_BUF(dj);
 800519a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800519e:	3b18      	subs	r3, #24
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	3318      	adds	r3, #24
 80051a6:	f107 0218 	add.w	r2, r7, #24
 80051aa:	3a04      	subs	r2, #4
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051b2:	3b18      	subs	r3, #24
 80051b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80051b8:	4ad1      	ldr	r2, [pc, #836]	; (8005500 <f_open+0x3fc>)
 80051ba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80051bc:	f107 0318 	add.w	r3, r7, #24
 80051c0:	3b10      	subs	r3, #16
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051c8:	3b18      	subs	r3, #24
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fa8b 	bl	80046e8 <follow_path>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051d8:	f102 0217 	add.w	r2, r2, #23
 80051dc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80051de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051e2:	3b18      	subs	r3, #24
 80051e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e8:	3314      	adds	r3, #20
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051f0:	f102 0210 	add.w	r2, r2, #16
 80051f4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80051f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80051fa:	f103 0317 	add.w	r3, r3, #23
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d126      	bne.n	8005252 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8005204:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005208:	f103 0310 	add.w	r3, r3, #16
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8005212:	2306      	movs	r3, #6
 8005214:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005218:	f102 0217 	add.w	r2, r2, #23
 800521c:	7013      	strb	r3, [r2, #0]
 800521e:	e018      	b.n	8005252 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005220:	f107 0318 	add.w	r3, r7, #24
 8005224:	3b11      	subs	r3, #17
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800523c:	3b18      	subs	r3, #24
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd f989 	bl	8002558 <chk_lock>
 8005246:	4603      	mov	r3, r0
 8005248:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800524c:	f102 0217 	add.w	r2, r2, #23
 8005250:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	3b11      	subs	r3, #17
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f003 031c 	and.w	r3, r3, #28
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8150 	beq.w	8005504 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8005264:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005268:	f103 0317 	add.w	r3, r3, #23
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d030      	beq.n	80052d4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005272:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005276:	f103 0317 	add.w	r3, r3, #23
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d112      	bne.n	80052a6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005280:	f7fd f9dc 	bl	800263c <enq_lock>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <f_open+0x196>
 800528a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800528e:	3b18      	subs	r3, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe fec7 	bl	8004024 <dir_register>
 8005296:	4603      	mov	r3, r0
 8005298:	e000      	b.n	800529c <f_open+0x198>
 800529a:	2312      	movs	r3, #18
 800529c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80052a0:	f102 0217 	add.w	r2, r2, #23
 80052a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80052a6:	f107 0318 	add.w	r3, r7, #24
 80052aa:	3b11      	subs	r3, #17
 80052ac:	f107 0218 	add.w	r2, r7, #24
 80052b0:	3a11      	subs	r2, #17
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	f042 0208 	orr.w	r2, r2, #8
 80052b8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80052ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052be:	3b18      	subs	r3, #24
 80052c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c4:	3314      	adds	r3, #20
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80052cc:	f102 0210 	add.w	r2, r2, #16
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e01f      	b.n	8005314 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80052d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052d8:	f103 0310 	add.w	r3, r3, #16
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330b      	adds	r3, #11
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f003 0311 	and.w	r3, r3, #17
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <f_open+0x1f4>
					res = FR_DENIED;
 80052ea:	2307      	movs	r3, #7
 80052ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80052f0:	f102 0217 	add.w	r2, r2, #23
 80052f4:	7013      	strb	r3, [r2, #0]
 80052f6:	e00d      	b.n	8005314 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80052f8:	f107 0318 	add.w	r3, r7, #24
 80052fc:	3b11      	subs	r3, #17
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <f_open+0x210>
						res = FR_EXIST;
 8005308:	2308      	movs	r3, #8
 800530a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800530e:	f102 0217 	add.w	r2, r2, #23
 8005312:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005314:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005318:	f103 0317 	add.w	r3, r3, #23
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8122 	bne.w	8005568 <f_open+0x464>
 8005324:	f107 0318 	add.w	r3, r7, #24
 8005328:	3b11      	subs	r3, #17
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8119 	beq.w	8005568 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8005336:	f001 fecd 	bl	80070d4 <get_fattime>
 800533a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800533e:	f103 030c 	add.w	r3, r3, #12
 8005342:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005344:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005348:	f103 0310 	add.w	r3, r3, #16
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330e      	adds	r3, #14
 8005350:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005354:	f102 020c 	add.w	r2, r2, #12
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005362:	f103 030c 	add.w	r3, r3, #12
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b29a      	uxth	r2, r3
 800536e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005372:	f103 0310 	add.w	r3, r3, #16
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330f      	adds	r3, #15
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005382:	f103 030c 	add.w	r3, r3, #12
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0c1a      	lsrs	r2, r3, #16
 800538a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800538e:	f103 0310 	add.w	r3, r3, #16
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3310      	adds	r3, #16
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800539e:	f103 030c 	add.w	r3, r3, #12
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0e1a      	lsrs	r2, r3, #24
 80053a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053aa:	f103 0310 	add.w	r3, r3, #16
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3311      	adds	r3, #17
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80053b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053ba:	f103 0310 	add.w	r3, r3, #16
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330b      	adds	r3, #11
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80053c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053ca:	f103 0310 	add.w	r3, r3, #16
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	331c      	adds	r3, #28
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053da:	f103 0310 	add.w	r3, r3, #16
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	331d      	adds	r3, #29
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053ea:	f103 0310 	add.w	r3, r3, #16
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	331e      	adds	r3, #30
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053fa:	f103 0310 	add.w	r3, r3, #16
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	331f      	adds	r3, #31
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800540a:	3b18      	subs	r3, #24
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005416:	f102 0210 	add.w	r2, r2, #16
 800541a:	6811      	ldr	r1, [r2, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fa2a 	bl	8003876 <ld_clust>
 8005422:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005426:	f103 0308 	add.w	r3, r3, #8
 800542a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800542c:	2100      	movs	r1, #0
 800542e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005432:	f103 0310 	add.w	r3, r3, #16
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	f7fe fa4b 	bl	80038d2 <st_clust>
				dj.fs->wflag = 1;
 800543c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005440:	3b18      	subs	r3, #24
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	3304      	adds	r3, #4
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8005452:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005456:	f103 0308 	add.w	r3, r3, #8
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8083 	beq.w	8005568 <f_open+0x464>
					dw = dj.fs->winsect;
 8005462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005466:	3b18      	subs	r3, #24
 8005468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005472:	330c      	adds	r3, #12
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800547a:	f102 020c 	add.w	r2, r2, #12
 800547e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005484:	3b18      	subs	r3, #24
 8005486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005490:	f102 0208 	add.w	r2, r2, #8
 8005494:	6811      	ldr	r1, [r2, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fd fe03 	bl	80030a2 <remove_chain>
 800549c:	4603      	mov	r3, r0
 800549e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80054a2:	f102 0217 	add.w	r2, r2, #23
 80054a6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80054a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80054ac:	f103 0317 	add.w	r3, r3, #23
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d158      	bne.n	8005568 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80054b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054ba:	3b18      	subs	r3, #24
 80054bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80054c6:	f102 0208 	add.w	r2, r2, #8
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	3a01      	subs	r2, #1
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	330c      	adds	r3, #12
 80054d4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80054d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054da:	3b18      	subs	r3, #24
 80054dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80054e6:	f102 020c 	add.w	r2, r2, #12
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd fa4f 	bl	8002990 <move_window>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80054f8:	f102 0217 	add.w	r2, r2, #23
 80054fc:	7013      	strb	r3, [r2, #0]
 80054fe:	e033      	b.n	8005568 <f_open+0x464>
 8005500:	200000c0 	.word	0x200000c0
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005504:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005508:	f103 0317 	add.w	r3, r3, #23
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d12a      	bne.n	8005568 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005512:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005516:	f103 0310 	add.w	r3, r3, #16
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330b      	adds	r3, #11
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <f_open+0x432>
					res = FR_NO_FILE;
 8005528:	2304      	movs	r3, #4
 800552a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800552e:	f102 0217 	add.w	r2, r2, #23
 8005532:	7013      	strb	r3, [r2, #0]
 8005534:	e018      	b.n	8005568 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005536:	f107 0318 	add.w	r3, r7, #24
 800553a:	3b11      	subs	r3, #17
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <f_open+0x464>
 8005546:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800554a:	f103 0310 	add.w	r3, r3, #16
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330b      	adds	r3, #11
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <f_open+0x464>
						res = FR_DENIED;
 800555c:	2307      	movs	r3, #7
 800555e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005562:	f102 0217 	add.w	r2, r2, #23
 8005566:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8005568:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800556c:	f103 0317 	add.w	r3, r3, #23
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d15b      	bne.n	800562e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	3b11      	subs	r3, #17
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <f_open+0x496>
				mode |= FA__WRITTEN;
 8005586:	f107 0318 	add.w	r3, r7, #24
 800558a:	3b11      	subs	r3, #17
 800558c:	f107 0218 	add.w	r2, r7, #24
 8005590:	3a11      	subs	r2, #17
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	f042 0220 	orr.w	r2, r2, #32
 8005598:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800559a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800559e:	3b18      	subs	r3, #24
 80055a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055aa:	330c      	adds	r3, #12
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	f107 0318 	add.w	r3, r7, #24
 80055b2:	3b0c      	subs	r3, #12
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ba:	331c      	adds	r3, #28
 80055bc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80055be:	f107 0318 	add.w	r3, r7, #24
 80055c2:	3b0c      	subs	r3, #12
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80055ce:	f102 0210 	add.w	r2, r2, #16
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055d6:	f107 0318 	add.w	r3, r7, #24
 80055da:	3b11      	subs	r3, #17
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055f2:	3b18      	subs	r3, #24
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd f844 	bl	8002684 <inc_lock>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f107 0318 	add.w	r3, r7, #24
 8005602:	3b0c      	subs	r3, #12
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800560a:	3308      	adds	r3, #8
 800560c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800560e:	f107 0318 	add.w	r3, r7, #24
 8005612:	3b0c      	subs	r3, #12
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800561a:	3308      	adds	r3, #8
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <f_open+0x52a>
 8005622:	2302      	movs	r3, #2
 8005624:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005628:	f102 0217 	add.w	r2, r2, #23
 800562c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800562e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005632:	f103 0317 	add.w	r3, r3, #23
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 8091 	bne.w	8005760 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800563e:	f107 0318 	add.w	r3, r7, #24
 8005642:	3b0c      	subs	r3, #12
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564a:	3306      	adds	r3, #6
 800564c:	f107 0218 	add.w	r2, r7, #24
 8005650:	3a11      	subs	r2, #17
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8005656:	f107 0318 	add.w	r3, r7, #24
 800565a:	3b0c      	subs	r3, #12
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	3307      	adds	r3, #7
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800566c:	3b18      	subs	r3, #24
 800566e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005678:	f102 0210 	add.w	r2, r2, #16
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe f8f9 	bl	8003876 <ld_clust>
 8005684:	4602      	mov	r2, r0
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	3b0c      	subs	r3, #12
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	3310      	adds	r3, #16
 8005694:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005696:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800569a:	f103 0310 	add.w	r3, r3, #16
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	331f      	adds	r3, #31
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	061a      	lsls	r2, r3, #24
 80056a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80056aa:	f103 0310 	add.w	r3, r3, #16
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	331e      	adds	r3, #30
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80056bc:	f102 0210 	add.w	r2, r2, #16
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	321d      	adds	r2, #29
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	0212      	lsls	r2, r2, #8
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80056ce:	f102 0210 	add.w	r2, r2, #16
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	321c      	adds	r2, #28
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	431a      	orrs	r2, r3
 80056da:	f107 0318 	add.w	r3, r7, #24
 80056de:	3b0c      	subs	r3, #12
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e6:	330c      	adds	r3, #12
 80056e8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 80056ea:	f107 0318 	add.w	r3, r7, #24
 80056ee:	3b0c      	subs	r3, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f6:	3308      	adds	r3, #8
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	3b0c      	subs	r3, #12
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005708:	3318      	adds	r3, #24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800570e:	f107 0318 	add.w	r3, r7, #24
 8005712:	3b0c      	subs	r3, #12
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800571a:	3304      	adds	r3, #4
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005724:	3b18      	subs	r3, #24
 8005726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f107 0318 	add.w	r3, r7, #24
 8005730:	3b0c      	subs	r3, #12
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005738:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800573a:	f107 0318 	add.w	r3, r7, #24
 800573e:	3b0c      	subs	r3, #12
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	3306      	adds	r3, #6
 800574e:	881a      	ldrh	r2, [r3, #0]
 8005750:	f107 0318 	add.w	r3, r7, #24
 8005754:	3b0c      	subs	r3, #12
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575c:	3304      	adds	r3, #4
 800575e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005760:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005764:	f103 0317 	add.w	r3, r3, #23
 8005768:	781b      	ldrb	r3, [r3, #0]
}
 800576a:	4618      	mov	r0, r3
 800576c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop

08005778 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08c      	sub	sp, #48	; 0x30
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fc2f 	bl	8004ff4 <validate>
 8005796:	4603      	mov	r3, r0
 8005798:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <f_read+0x2c>
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	e1fb      	b.n	8005b9c <f_read+0x424>
	if (fp->err)								/* Check error */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	3307      	adds	r3, #7
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b8:	3307      	adds	r3, #7
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	e1ee      	b.n	8005b9c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c4:	3306      	adds	r3, #6
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80057d0:	2307      	movs	r3, #7
 80057d2:	e1e3      	b.n	8005b9c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057da:	330c      	adds	r3, #12
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e4:	3308      	adds	r3, #8
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	f240 81ce 	bls.w	8005b92 <f_read+0x41a>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80057fa:	e1ca      	b.n	8005b92 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005802:	3308      	adds	r3, #8
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005812:	330a      	adds	r3, #10
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	fbb2 f1f3 	udiv	r1, r2, r3
 800581a:	fb03 f301 	mul.w	r3, r3, r1
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 8160 	bne.w	8005ae6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	3308      	adds	r3, #8
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583c:	330a      	adds	r3, #10
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005852:	3302      	adds	r3, #2
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	4013      	ands	r3, r2
 800585c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d14a      	bne.n	80058fa <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	3308      	adds	r3, #8
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005878:	3310      	adds	r3, #16
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	e01f      	b.n	80058c0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005886:	3304      	adds	r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005894:	3308      	adds	r3, #8
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fd fd1a 	bl	80032d4 <clmt_clust>
 80058a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80058a2:	e00d      	b.n	80058c0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	3314      	adds	r3, #20
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7fd f993 	bl	8002be4 <get_fat>
 80058be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d807      	bhi.n	80058d6 <f_read+0x15e>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058cc:	3307      	adds	r3, #7
 80058ce:	2202      	movs	r2, #2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	2302      	movs	r3, #2
 80058d4:	e162      	b.n	8005b9c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058dc:	d107      	bne.n	80058ee <f_read+0x176>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	3307      	adds	r3, #7
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	2301      	movs	r3, #1
 80058ec:	e156      	b.n	8005b9c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f4:	3314      	adds	r3, #20
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	3314      	adds	r3, #20
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f7fd f941 	bl	8002b96 <clust2sect>
 8005914:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <f_read+0x1b4>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	3307      	adds	r3, #7
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	2302      	movs	r3, #2
 800592a:	e137      	b.n	8005b9c <f_read+0x424>
			sect += csect;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005940:	330a      	adds	r3, #10
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	fbb3 f3f2 	udiv	r3, r3, r2
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d070      	beq.n	8005a36 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005954:	7dfa      	ldrb	r2, [r7, #23]
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005966:	3302      	adds	r3, #2
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90b      	bls.n	8005986 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	3302      	adds	r3, #2
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	3301      	adds	r3, #1
 8005994:	7818      	ldrb	r0, [r3, #0]
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	6a39      	ldr	r1, [r7, #32]
 800599c:	f7fc fd08 	bl	80023b0 <disk_read>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ac:	3307      	adds	r3, #7
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	2301      	movs	r3, #1
 80059b4:	e0f2      	b.n	8005b9c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059bc:	3306      	adds	r3, #6
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d028      	beq.n	8005a1a <f_read+0x2a2>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ce:	3318      	adds	r3, #24
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	429a      	cmp	r2, r3
 80059da:	d91e      	bls.n	8005a1a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	3318      	adds	r3, #24
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad2      	subs	r2, r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f6:	330a      	adds	r3, #10
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	fb03 f302 	mul.w	r3, r3, r2
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	18d0      	adds	r0, r2, r3
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a10:	330a      	adds	r3, #10
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f7fc fd29 	bl	800246c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a26:	330a      	adds	r3, #10
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005a34:	e093      	b.n	8005b5e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d049      	beq.n	8005ada <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	3306      	adds	r3, #6
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d028      	beq.n	8005aaa <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a64:	3301      	adds	r3, #1
 8005a66:	7818      	ldrb	r0, [r3, #0]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a70:	3318      	adds	r3, #24
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	2301      	movs	r3, #1
 8005a76:	f7fc fcbb 	bl	80023f0 <disk_write>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	3307      	adds	r3, #7
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e085      	b.n	8005b9c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	3306      	adds	r3, #6
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	3306      	adds	r3, #6
 8005aa8:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	7818      	ldrb	r0, [r3, #0]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	2301      	movs	r3, #1
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	f7fc fc76 	bl	80023b0 <disk_read>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e060      	b.n	8005b9c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	330a      	adds	r3, #10
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afe:	3308      	adds	r3, #8
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	330a      	adds	r3, #10
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b16:	fb03 f301 	mul.w	r3, r3, r1
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	1ac3      	subs	r3, r0, r3
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d901      	bls.n	8005b2c <f_read+0x3b4>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	3308      	adds	r3, #8
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b42:	330a      	adds	r3, #10
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b4a:	fb03 f301 	mul.w	r3, r3, r1
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b56:	4619      	mov	r1, r3
 8005b58:	6a38      	ldr	r0, [r7, #32]
 8005b5a:	f7fc fc87 	bl	800246c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	4413      	add	r3, r2
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	441a      	add	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f ae31 	bne.w	80057fc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3730      	adds	r7, #48	; 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fa19 	bl	8004ff4 <validate>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <f_write+0x2c>
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	e258      	b.n	8006082 <f_write+0x4de>
	if (fp->err)							/* Check error */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd6:	3307      	adds	r3, #7
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be4:	3307      	adds	r3, #7
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	e24b      	b.n	8006082 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	3306      	adds	r3, #6
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	e240      	b.n	8006082 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c06:	3308      	adds	r3, #8
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c14:	3308      	adds	r3, #8
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	f080 8208 	bcs.w	800602e <f_write+0x48a>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005c22:	e204      	b.n	800602e <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3a:	330a      	adds	r3, #10
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c42:	fb03 f301 	mul.w	r3, r3, r1
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 818d 	bne.w	8005f68 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c54:	3308      	adds	r3, #8
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c64:	330a      	adds	r3, #10
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4013      	ands	r3, r2
 8005c84:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005c86:	7dbb      	ldrb	r3, [r7, #22]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d167      	bne.n	8005d5c <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c92:	3308      	adds	r3, #8
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d112      	bne.n	8005cc0 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca0:	3310      	adds	r3, #16
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d129      	bne.n	8005d00 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd fa5b 	bl	8003172 <create_chain>
 8005cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8005cbe:	e01f      	b.n	8005d00 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7fd fafa 	bl	80032d4 <clmt_clust>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce2:	e00d      	b.n	8005d00 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fd fa3a 	bl	8003172 <create_chain>
 8005cfe:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8198 	beq.w	8006038 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <f_write+0x17a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d14:	3307      	adds	r3, #7
 8005d16:	2202      	movs	r2, #2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e1b1      	b.n	8006082 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d24:	d107      	bne.n	8005d36 <f_write+0x192>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	3307      	adds	r3, #7
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1a5      	b.n	8006082 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	3310      	adds	r3, #16
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <f_write+0x1b8>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d56:	3310      	adds	r3, #16
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d62:	3306      	adds	r3, #6
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d028      	beq.n	8005dc0 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	7818      	ldrb	r0, [r3, #0]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d86:	3318      	adds	r3, #24
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f7fc fb30 	bl	80023f0 <disk_write>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	3307      	adds	r3, #7
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	2301      	movs	r3, #1
 8005da4:	e16d      	b.n	8006082 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	3306      	adds	r3, #6
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	3306      	adds	r3, #6
 8005dbe:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dce:	3314      	adds	r3, #20
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7fc fede 	bl	8002b96 <clust2sect>
 8005dda:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <f_write+0x24e>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	3307      	adds	r3, #7
 8005dea:	2202      	movs	r2, #2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	2302      	movs	r3, #2
 8005df0:	e147      	b.n	8006082 <f_write+0x4de>
			sect += csect;
 8005df2:	7dbb      	ldrb	r3, [r7, #22]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e06:	330a      	adds	r3, #10
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d074      	beq.n	8005f04 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005e1a:	7dba      	ldrb	r2, [r7, #22]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	441a      	add	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d90b      	bls.n	8005e4c <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	3302      	adds	r3, #2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	7dbb      	ldrb	r3, [r7, #22]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e58:	3301      	adds	r3, #1
 8005e5a:	7818      	ldrb	r0, [r3, #0]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	f7fc fac5 	bl	80023f0 <disk_write>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e72:	3307      	adds	r3, #7
 8005e74:	2201      	movs	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e102      	b.n	8006082 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e82:	3318      	adds	r3, #24
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d92b      	bls.n	8005ee8 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e98:	3318      	adds	r3, #24
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	330a      	adds	r3, #10
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	fb03 f302 	mul.w	r3, r3, r2
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	18d1      	adds	r1, r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec4:	330a      	adds	r3, #10
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f7fc facf 	bl	800246c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed4:	3306      	adds	r3, #6
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	3306      	adds	r3, #6
 8005ee6:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef4:	330a      	adds	r3, #10
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	623b      	str	r3, [r7, #32]
				continue;
 8005f02:	e07a      	b.n	8005ffa <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d023      	beq.n	8005f5c <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f24:	330c      	adds	r3, #12
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d217      	bcs.n	8005f5c <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	3301      	adds	r3, #1
 8005f3a:	7818      	ldrb	r0, [r3, #0]
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	2301      	movs	r3, #1
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	f7fc fa35 	bl	80023b0 <disk_read>
 8005f46:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f52:	3307      	adds	r3, #7
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e092      	b.n	8006082 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f62:	3318      	adds	r3, #24
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f74:	330a      	adds	r3, #10
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f80:	3308      	adds	r3, #8
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	330a      	adds	r3, #10
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f98:	fb03 f301 	mul.w	r3, r3, r1
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	1ac3      	subs	r3, r0, r3
 8005fa0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d901      	bls.n	8005fae <f_write+0x40a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	330a      	adds	r3, #10
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fcc:	fb03 f301 	mul.w	r3, r3, r1
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fc fa46 	bl	800246c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	3306      	adds	r3, #6
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	3306      	adds	r3, #6
 8005ff8:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	4413      	add	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006008:	3308      	adds	r3, #8
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006016:	3308      	adds	r3, #8
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	441a      	add	r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f adf7 	bne.w	8005c24 <f_write+0x80>
 8006036:	e000      	b.n	800603a <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006038:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006040:	3308      	adds	r3, #8
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604a:	330c      	adds	r3, #12
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d909      	bls.n	8006066 <f_write+0x4c2>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006058:	3308      	adds	r3, #8
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	330c      	adds	r3, #12
 8006064:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	3306      	adds	r3, #6
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607c:	3306      	adds	r3, #6
 800607e:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3728      	adds	r7, #40	; 0x28
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fe ffae 	bl	8004ff4 <validate>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 80cc 	bne.w	800623c <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060aa:	3306      	adds	r3, #6
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80c2 	beq.w	800623c <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060be:	3306      	adds	r3, #6
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d6:	3301      	adds	r3, #1
 80060d8:	7818      	ldrb	r0, [r3, #0]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e2:	3318      	adds	r3, #24
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2301      	movs	r3, #1
 80060e8:	f7fc f982 	bl	80023f0 <disk_write>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80060f2:	2301      	movs	r3, #1
 80060f4:	e0a3      	b.n	800623e <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fc:	3306      	adds	r3, #6
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	b2da      	uxtb	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610c:	3306      	adds	r3, #6
 800610e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	331c      	adds	r3, #28
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7fc fc33 	bl	8002990 <move_window>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 8083 	bne.w	800623c <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	330b      	adds	r3, #11
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	330b      	adds	r3, #11
 800614a:	f042 0220 	orr.w	r2, r2, #32
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	330c      	adds	r3, #12
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	331c      	adds	r3, #28
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616a:	330c      	adds	r3, #12
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	b29a      	uxth	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	331d      	adds	r3, #29
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006182:	330c      	adds	r3, #12
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0c1a      	lsrs	r2, r3, #16
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	331e      	adds	r3, #30
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006196:	330c      	adds	r3, #12
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	0e1a      	lsrs	r2, r3, #24
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	331f      	adds	r3, #31
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061aa:	3310      	adds	r3, #16
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6938      	ldr	r0, [r7, #16]
 80061b2:	f7fd fb8e 	bl	80038d2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80061b6:	f000 ff8d 	bl	80070d4 <get_fattime>
 80061ba:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3316      	adds	r3, #22
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3317      	adds	r3, #23
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	0c1a      	lsrs	r2, r3, #16
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3318      	adds	r3, #24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	0e1a      	lsrs	r2, r3, #24
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3319      	adds	r3, #25
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3312      	adds	r3, #18
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3313      	adds	r3, #19
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006204:	3306      	adds	r3, #6
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f023 0320 	bic.w	r3, r3, #32
 800620c:	b2da      	uxtb	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006214:	3306      	adds	r3, #6
 8006216:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	3304      	adds	r3, #4
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fc fbe0 	bl	80029f8 <sync_fs>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff ff1b 	bl	800608a <f_sync>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d119      	bne.n	8006292 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fe fec8 	bl	8004ff4 <validate>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d111      	bne.n	8006292 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006274:	3308      	adds	r3, #8
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f7fc fac3 	bl	8002804 <dec_lock>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b090      	sub	sp, #64	; 0x40
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fe fea4 	bl	8004ff4 <validate>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80062b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <f_lseek+0x24>
 80062ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062be:	e31d      	b.n	80068fc <f_lseek+0x660>
	if (fp->err)						/* Check error */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c6:	3307      	adds	r3, #7
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	3307      	adds	r3, #7
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	e310      	b.n	80068fc <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80062e0:	3304      	adds	r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 813c 	beq.w	8006562 <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f0:	d172      	bne.n	80063d8 <f_lseek+0x13c>
			tbl = fp->cltbl;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80062f8:	3304      	adds	r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	627a      	str	r2, [r7, #36]	; 0x24
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	2302      	movs	r3, #2
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006312:	3310      	adds	r3, #16
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d049      	beq.n	80063b2 <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	2300      	movs	r3, #0
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	3302      	adds	r3, #2
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	3301      	adds	r3, #1
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc fc4f 	bl	8002be4 <get_fat>
 8006346:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2b01      	cmp	r3, #1
 800634c:	d807      	bhi.n	800635e <f_lseek+0xc2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	3307      	adds	r3, #7
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	2302      	movs	r3, #2
 800635c:	e2ce      	b.n	80068fc <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006364:	d107      	bne.n	8006376 <f_lseek+0xda>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	3307      	adds	r3, #7
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	2301      	movs	r3, #1
 8006374:	e2c2      	b.n	80068fc <f_lseek+0x660>
					} while (cl == pcl + 1);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	429a      	cmp	r2, r3
 800637e:	d0d5      	beq.n	800632c <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	429a      	cmp	r2, r3
 8006386:	d809      	bhi.n	800639c <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	627a      	str	r2, [r7, #36]	; 0x24
 800638e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1d1a      	adds	r2, r3, #4
 8006396:	627a      	str	r2, [r7, #36]	; 0x24
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a8:	3314      	adds	r3, #20
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d3b5      	bcc.n	800631e <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80063b8:	3304      	adds	r3, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063be:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80063c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d803      	bhi.n	80063d0 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e293      	b.n	80068f8 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80063d0:	2311      	movs	r3, #17
 80063d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80063d6:	e28f      	b.n	80068f8 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063de:	330c      	adds	r3, #12
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d905      	bls.n	80063f4 <f_lseek+0x158>
				ofs = fp->fsize;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ee:	330c      	adds	r3, #12
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fa:	3308      	adds	r3, #8
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8278 	beq.w	80068f8 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fc ff60 	bl	80032d4 <clmt_clust>
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641c:	3314      	adds	r3, #20
 800641e:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642e:	3314      	adds	r3, #20
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fc fbae 	bl	8002b96 <clust2sect>
 800643a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <f_lseek+0x1b6>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006448:	3307      	adds	r3, #7
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	2302      	movs	r3, #2
 8006450:	e254      	b.n	80068fc <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006462:	330a      	adds	r3, #10
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	fbb2 f2f3 	udiv	r2, r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006476:	3302      	adds	r3, #2
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	3b01      	subs	r3, #1
 800647c:	4013      	ands	r3, r2
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	3308      	adds	r3, #8
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	330a      	adds	r3, #10
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	fbb2 f1f3 	udiv	r1, r2, r3
 80064a2:	fb03 f301 	mul.w	r3, r3, r1
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8225 	beq.w	80068f8 <f_lseek+0x65c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b4:	3318      	adds	r3, #24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	f000 821c 	beq.w	80068f8 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	3306      	adds	r3, #6
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d028      	beq.n	8006524 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	3301      	adds	r3, #1
 80064e0:	7818      	ldrb	r0, [r3, #0]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ea:	3318      	adds	r3, #24
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	2301      	movs	r3, #1
 80064f0:	f7fb ff7e 	bl	80023f0 <disk_write>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006500:	3307      	adds	r3, #7
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	2301      	movs	r3, #1
 8006508:	e1f8      	b.n	80068fc <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006510:	3306      	adds	r3, #6
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006520:	3306      	adds	r3, #6
 8006522:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	3301      	adds	r3, #1
 8006532:	7818      	ldrb	r0, [r3, #0]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	2301      	movs	r3, #1
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	f7fb ff39 	bl	80023b0 <disk_read>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	3307      	adds	r3, #7
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	2301      	movs	r3, #1
 8006552:	e1d3      	b.n	80068fc <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655a:	3318      	adds	r3, #24
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e1ca      	b.n	80068f8 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006568:	330c      	adds	r3, #12
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d90e      	bls.n	8006590 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	3306      	adds	r3, #6
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658a:	330c      	adds	r3, #12
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006596:	3308      	adds	r3, #8
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	3308      	adds	r3, #8
 80065a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065aa:	601a      	str	r2, [r3, #0]
		if (ofs) {
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8113 	beq.w	80067da <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	3302      	adds	r3, #2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d2:	330a      	adds	r3, #10
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	fb03 f302 	mul.w	r3, r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d024      	beq.n	800662c <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	1e59      	subs	r1, r3, #1
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d318      	bcc.n	800662c <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	1e5a      	subs	r2, r3, #1
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	425b      	negs	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	3308      	adds	r3, #8
 800660c:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006614:	3308      	adds	r3, #8
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006624:	3314      	adds	r3, #20
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
 800662a:	e034      	b.n	8006696 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006632:	3310      	adds	r3, #16
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d125      	bne.n	800668a <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f7fc fd92 	bl	8003172 <create_chain>
 800664e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	2b01      	cmp	r3, #1
 8006654:	d107      	bne.n	8006666 <f_lseek+0x3ca>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665c:	3307      	adds	r3, #7
 800665e:	2202      	movs	r2, #2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	2302      	movs	r3, #2
 8006664:	e14a      	b.n	80068fc <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666c:	d107      	bne.n	800667e <f_lseek+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006674:	3307      	adds	r3, #7
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	2301      	movs	r3, #1
 800667c:	e13e      	b.n	80068fc <f_lseek+0x660>
					fp->sclust = clst;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006684:	3310      	adds	r3, #16
 8006686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006688:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006690:	3314      	adds	r3, #20
 8006692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006694:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 809e 	beq.w	80067da <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800669e:	e058      	b.n	8006752 <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a6:	3306      	adds	r3, #6
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00e      	beq.n	80066d0 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fc fd58 	bl	8003172 <create_chain>
 80066c2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <f_lseek+0x446>
							ofs = bcs; break;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	e044      	b.n	800675a <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fc fa82 	bl	8002be4 <get_fat>
 80066e0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e8:	d107      	bne.n	80066fa <f_lseek+0x45e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	3307      	adds	r3, #7
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	2301      	movs	r3, #1
 80066f8:	e100      	b.n	80068fc <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d90a      	bls.n	8006716 <f_lseek+0x47a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670c:	3314      	adds	r3, #20
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006712:	429a      	cmp	r2, r3
 8006714:	d307      	bcc.n	8006726 <f_lseek+0x48a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671c:	3307      	adds	r3, #7
 800671e:	2202      	movs	r2, #2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	2302      	movs	r3, #2
 8006724:	e0ea      	b.n	80068fc <f_lseek+0x660>
					fp->clust = clst;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672c:	3314      	adds	r3, #20
 800672e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006730:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006738:	3308      	adds	r3, #8
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	441a      	add	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006746:	3308      	adds	r3, #8
 8006748:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	429a      	cmp	r2, r3
 8006758:	d8a2      	bhi.n	80066a0 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006760:	3308      	adds	r3, #8
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	441a      	add	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676e:	3308      	adds	r3, #8
 8006770:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	330a      	adds	r3, #10
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	fbb3 f1f2 	udiv	r1, r3, r2
 800678a:	fb02 f201 	mul.w	r2, r2, r1
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d022      	beq.n	80067da <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fc f9f9 	bl	8002b96 <clust2sect>
 80067a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <f_lseek+0x520>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	3307      	adds	r3, #7
 80067b4:	2202      	movs	r2, #2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	2302      	movs	r3, #2
 80067ba:	e09f      	b.n	80068fc <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	330a      	adds	r3, #10
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d6:	4413      	add	r3, r2
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e0:	3308      	adds	r3, #8
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f0:	330a      	adds	r3, #10
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80067f8:	fb03 f301 	mul.w	r3, r3, r1
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d057      	beq.n	80068b2 <f_lseek+0x616>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006808:	3318      	adds	r3, #24
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800680e:	429a      	cmp	r2, r3
 8006810:	d04f      	beq.n	80068b2 <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006818:	3306      	adds	r3, #6
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d028      	beq.n	8006876 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006830:	3301      	adds	r3, #1
 8006832:	7818      	ldrb	r0, [r3, #0]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683c:	3318      	adds	r3, #24
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2301      	movs	r3, #1
 8006842:	f7fb fdd5 	bl	80023f0 <disk_write>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006852:	3307      	adds	r3, #7
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	2301      	movs	r3, #1
 800685a:	e04f      	b.n	80068fc <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006862:	3306      	adds	r3, #6
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686a:	b2da      	uxtb	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	3306      	adds	r3, #6
 8006874:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006882:	3301      	adds	r3, #1
 8006884:	7818      	ldrb	r0, [r3, #0]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	2301      	movs	r3, #1
 800688a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688c:	f7fb fd90 	bl	80023b0 <disk_read>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689c:	3307      	adds	r3, #7
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	2301      	movs	r3, #1
 80068a4:	e02a      	b.n	80068fc <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ac:	3318      	adds	r3, #24
 80068ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b0:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b8:	3308      	adds	r3, #8
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c2:	330c      	adds	r3, #12
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d916      	bls.n	80068f8 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d0:	3308      	adds	r3, #8
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	330c      	adds	r3, #12
 80068dc:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e4:	3306      	adds	r3, #6
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f043 0320 	orr.w	r3, r3, #32
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f4:	3306      	adds	r3, #6
 80068f6:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80068f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3740      	adds	r7, #64	; 0x40
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	2200      	movs	r2, #0
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe f80f 	bl	800493c <find_volume>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800692a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 80c4 	bne.w	8006abc <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693a:	3310      	adds	r3, #16
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006944:	3314      	adds	r3, #20
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3b02      	subs	r3, #2
 800694a:	429a      	cmp	r2, r3
 800694c:	d807      	bhi.n	800695e <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006954:	3310      	adds	r3, #16
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e0ae      	b.n	8006abc <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d127      	bne.n	80069c2 <f_getfree+0xbe>
				clst = 2;
 8006972:	2302      	movs	r3, #2
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006978:	69f8      	ldr	r0, [r7, #28]
 800697a:	f7fc f933 	bl	8002be4 <get_fat>
 800697e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006986:	d103      	bne.n	8006990 <f_getfree+0x8c>
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800698e:	e07f      	b.n	8006a90 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d103      	bne.n	800699e <f_getfree+0x9a>
 8006996:	2302      	movs	r3, #2
 8006998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800699c:	e078      	b.n	8006a90 <f_getfree+0x18c>
					if (stat == 0) n++;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <f_getfree+0xa6>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	3301      	adds	r3, #1
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	3301      	adds	r3, #1
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b6:	3314      	adds	r3, #20
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3da      	bcc.n	8006976 <f_getfree+0x72>
 80069c0:	e066      	b.n	8006a90 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c8:	3314      	adds	r3, #20
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
 80069dc:	2300      	movs	r3, #0
 80069de:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d115      	bne.n	8006a12 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80069ec:	4619      	mov	r1, r3
 80069ee:	69f8      	ldr	r0, [r7, #28]
 80069f0:	f7fb ffce 	bl	8002990 <move_window>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80069fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d145      	bne.n	8006a8e <f_getfree+0x18a>
						p = fs->win.d8;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	330a      	adds	r3, #10
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006a12:	7efb      	ldrb	r3, [r7, #27]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d115      	bne.n	8006a44 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	b21a      	sxth	r2, r3
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b21b      	sxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <f_getfree+0x132>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	3301      	adds	r3, #1
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	3302      	adds	r3, #2
 8006a3a:	623b      	str	r3, [r7, #32]
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	3b02      	subs	r3, #2
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	e01d      	b.n	8006a80 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	3303      	adds	r3, #3
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	061a      	lsls	r2, r3, #24
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	3302      	adds	r3, #2
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	4313      	orrs	r3, r2
 8006a56:	6a3a      	ldr	r2, [r7, #32]
 8006a58:	3201      	adds	r2, #1
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	0212      	lsls	r2, r2, #8
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	6a3a      	ldr	r2, [r7, #32]
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <f_getfree+0x170>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	3301      	adds	r3, #1
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	3304      	adds	r3, #4
 8006a78:	623b      	str	r3, [r7, #32]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	3b04      	subs	r3, #4
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	3b01      	subs	r3, #1
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1a9      	bne.n	80069e0 <f_getfree+0xdc>
 8006a8c:	e000      	b.n	8006a90 <f_getfree+0x18c>
						if (res != FR_OK) break;
 8006a8e:	bf00      	nop
			}
			fs->free_clust = n;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	3310      	adds	r3, #16
 8006a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa2:	3305      	adds	r3, #5
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	3305      	adds	r3, #5
 8006ab4:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3738      	adds	r7, #56	; 0x38
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ad6:	3b2c      	subs	r3, #44	; 0x2c
 8006ad8:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ae0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006ae4:	6013      	str	r3, [r2, #0]
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8006ae6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006aea:	392c      	subs	r1, #44	; 0x2c
 8006aec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006af0:	f103 0310 	add.w	r3, r3, #16
 8006af4:	3b14      	subs	r3, #20
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	2201      	movs	r2, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fd ff1d 	bl	800493c <find_volume>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006b08:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006b0c:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 8006b0e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006b12:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 8146 	bne.w	8006daa <f_unlink+0x2e2>
		INIT_BUF(dj);
 8006b1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b22:	f103 0310 	add.w	r3, r3, #16
 8006b26:	3b14      	subs	r3, #20
 8006b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b32:	3a28      	subs	r2, #40	; 0x28
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b3a:	f103 0310 	add.w	r3, r3, #16
 8006b3e:	3b14      	subs	r3, #20
 8006b40:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b44:	4a9e      	ldr	r2, [pc, #632]	; (8006dc0 <f_unlink+0x2f8>)
 8006b46:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);		/* Follow the file path */
 8006b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b4c:	3b2c      	subs	r3, #44	; 0x2c
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b54:	f103 0310 	add.w	r3, r3, #16
 8006b58:	3b14      	subs	r3, #20
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fd fdc3 	bl	80046e8 <follow_path>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006b68:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006b6c:	7013      	strb	r3, [r2, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8006b6e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006b72:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <f_unlink+0xd2>
 8006b7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b80:	f103 0310 	add.w	r3, r3, #16
 8006b84:	3b14      	subs	r3, #20
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fb fce5 	bl	8002558 <chk_lock>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006b94:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006b98:	7013      	strb	r3, [r2, #0]
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006b9a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006b9e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8100 	bne.w	8006daa <f_unlink+0x2e2>
			dir = dj.dir;
 8006baa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bae:	f103 0310 	add.w	r3, r3, #16
 8006bb2:	3b14      	subs	r3, #20
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	3314      	adds	r3, #20
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006bc0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8006bc4:	6013      	str	r3, [r2, #0]
			if (!dir) {
 8006bc6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006bca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <f_unlink+0x11a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006bd4:	2306      	movs	r3, #6
 8006bd6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006bda:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006bde:	7013      	strb	r3, [r2, #0]
 8006be0:	e010      	b.n	8006c04 <f_unlink+0x13c>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8006be2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006be6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330b      	adds	r3, #11
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <f_unlink+0x13c>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006bf8:	2307      	movs	r3, #7
 8006bfa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006bfe:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006c02:	7013      	strb	r3, [r2, #0]
			}
			if (res == FR_OK) {
 8006c04:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006c08:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d17a      	bne.n	8006d08 <f_unlink+0x240>
				dclst = ld_clust(dj.fs, dir);
 8006c12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c16:	f103 0310 	add.w	r3, r3, #16
 8006c1a:	3b14      	subs	r3, #20
 8006c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006c26:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8006c2a:	6811      	ldr	r1, [r2, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fc fe22 	bl	8003876 <ld_clust>
 8006c32:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006c36:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006c3a:	6018      	str	r0, [r3, #0]
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8006c3c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006c40:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d05e      	beq.n	8006d08 <f_unlink+0x240>
 8006c4a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006c4e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330b      	adds	r3, #11
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d053      	beq.n	8006d08 <f_unlink+0x240>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8006c60:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8006c64:	f101 0110 	add.w	r1, r1, #16
 8006c68:	3914      	subs	r1, #20
 8006c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c6e:	3b1c      	subs	r3, #28
 8006c70:	f241 0228 	movw	r2, #4136	; 0x1028
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fb fbf9 	bl	800246c <mem_cpy>
						sdj.sclust = dclst;
 8006c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c7e:	3b1c      	subs	r3, #28
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	3308      	adds	r3, #8
 8006c86:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006c8a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	601a      	str	r2, [r3, #0]
						res = dir_sdi(&sdj, 2);
 8006c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c96:	3b1c      	subs	r3, #28
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fc fb5d 	bl	800335a <dir_sdi>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ca6:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006caa:	7013      	strb	r3, [r2, #0]
						if (res == FR_OK) {
 8006cac:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006cb0:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d126      	bne.n	8006d08 <f_unlink+0x240>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8006cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cbe:	3b1c      	subs	r3, #28
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fd f8f6 	bl	8003eb4 <dir_read>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006cce:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006cd2:	7013      	strb	r3, [r2, #0]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8006cd4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006cd8:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d105      	bne.n	8006cee <f_unlink+0x226>
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006ce8:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006cec:	7013      	strb	r3, [r2, #0]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8006cee:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006cf2:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d105      	bne.n	8006d08 <f_unlink+0x240>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006d02:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006d06:	7013      	strb	r3, [r2, #0]
						}
					}
				}
			}
			if (res == FR_OK) {
 8006d08:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006d0c:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d149      	bne.n	8006daa <f_unlink+0x2e2>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8006d16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d1a:	f103 0310 	add.w	r3, r3, #16
 8006d1e:	3b14      	subs	r3, #20
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fd faaf 	bl	8004284 <dir_remove>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006d2c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006d30:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8006d32:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006d36:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11c      	bne.n	8006d7a <f_unlink+0x2b2>
 8006d40:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006d44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d015      	beq.n	8006d7a <f_unlink+0x2b2>
					res = remove_chain(dj.fs, dclst);
 8006d4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d52:	f103 0310 	add.w	r3, r3, #16
 8006d56:	3b14      	subs	r3, #20
 8006d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006d62:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006d66:	6811      	ldr	r1, [r2, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fc f99a 	bl	80030a2 <remove_chain>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006d74:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006d78:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK) res = sync_fs(dj.fs);
 8006d7a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006d7e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d110      	bne.n	8006daa <f_unlink+0x2e2>
 8006d88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d8c:	f103 0310 	add.w	r3, r3, #16
 8006d90:	3b14      	subs	r3, #20
 8006d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fb fe2d 	bl	80029f8 <sync_fs>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8006da4:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006da8:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8006daa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8006dae:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006db2:	781b      	ldrb	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8006dba:	3730      	adds	r7, #48	; 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200000c0 	.word	0x200000c0

08006dc4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006dd8:	e01b      	b.n	8006e12 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006dda:	f107 0310 	add.w	r3, r7, #16
 8006dde:	f107 0114 	add.w	r1, r7, #20
 8006de2:	2201      	movs	r2, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fe fcc7 	bl	8005778 <f_read>
		if (rc != 1) break;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d116      	bne.n	8006e1e <f_gets+0x5a>
		c = s[0];
 8006df0:	7d3b      	ldrb	r3, [r7, #20]
 8006df2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	2b0d      	cmp	r3, #13
 8006df8:	d100      	bne.n	8006dfc <f_gets+0x38>
 8006dfa:	e00a      	b.n	8006e12 <f_gets+0x4e>
		*p++ = c;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	61ba      	str	r2, [r7, #24]
 8006e02:	7dfa      	ldrb	r2, [r7, #23]
 8006e04:	701a      	strb	r2, [r3, #0]
		n++;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b0a      	cmp	r3, #10
 8006e10:	d007      	beq.n	8006e22 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	dbde      	blt.n	8006dda <f_gets+0x16>
 8006e1c:	e002      	b.n	8006e24 <f_gets+0x60>
		if (rc != 1) break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006e22:	bf00      	nop
	}
	*p = 0;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <f_gets+0x70>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	e000      	b.n	8006e36 <f_gets+0x72>
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	2b0a      	cmp	r3, #10
 8006e4e:	d103      	bne.n	8006e58 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006e50:	210d      	movs	r1, #13
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fff3 	bl	8006e3e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db25      	blt.n	8006eb0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	60fa      	str	r2, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b3c      	cmp	r3, #60	; 0x3c
 8006e76:	dd12      	ble.n	8006e9e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f103 010c 	add.w	r1, r3, #12
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f107 0308 	add.w	r3, r7, #8
 8006e88:	f7fe fe8c 	bl	8005ba4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d101      	bne.n	8006e98 <putc_bfd+0x5a>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e001      	b.n	8006e9c <putc_bfd+0x5e>
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e9c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
 8006eae:	e000      	b.n	8006eb2 <putc_bfd+0x74>
	if (i < 0) return;
 8006eb0:	bf00      	nop
}
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b097      	sub	sp, #92	; 0x5c
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006ece:	e009      	b.n	8006ee4 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	f107 030c 	add.w	r3, r7, #12
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ffad 	bl	8006e3e <putc_bfd>
	while (*str)			/* Put the string */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f1      	bne.n	8006ed0 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	db16      	blt.n	8006f20 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	461c      	mov	r4, r3
 8006ef8:	f107 0208 	add.w	r2, r7, #8
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	f103 010c 	add.w	r1, r3, #12
 8006f04:	4613      	mov	r3, r2
 8006f06:	4622      	mov	r2, r4
 8006f08:	f7fe fe4c 	bl	8005ba4 <f_write>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d101      	bne.n	8006f20 <f_puts+0x68>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	e001      	b.n	8006f24 <f_puts+0x6c>
	return EOF;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	375c      	adds	r7, #92	; 0x5c
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd90      	pop	{r4, r7, pc}

08006f2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006f42:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f44:	7a5b      	ldrb	r3, [r3, #9]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d831      	bhi.n	8006fb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f4e:	7a5b      	ldrb	r3, [r3, #9]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f56:	2100      	movs	r1, #0
 8006f58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006f5a:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f5c:	7a5b      	ldrb	r3, [r3, #9]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f6c:	7a5b      	ldrb	r3, [r3, #9]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f74:	4413      	add	r3, r2
 8006f76:	79fa      	ldrb	r2, [r7, #7]
 8006f78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f7c:	7a5b      	ldrb	r3, [r3, #9]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	b2d1      	uxtb	r1, r2
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <FATFS_LinkDriverEx+0x90>)
 8006f86:	7251      	strb	r1, [r2, #9]
 8006f88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f8a:	7dbb      	ldrb	r3, [r7, #22]
 8006f8c:	3330      	adds	r3, #48	; 0x30
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	3301      	adds	r3, #1
 8006f98:	223a      	movs	r2, #58	; 0x3a
 8006f9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	222f      	movs	r2, #47	; 0x2f
 8006fa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3303      	adds	r3, #3
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	200002c0 	.word	0x200002c0

08006fc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff ffac 	bl	8006f2c <FATFS_LinkDriverEx>
 8006fd4:	4603      	mov	r3, r0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff0:	d802      	bhi.n	8006ff8 <ff_convert+0x18>
		c = chr;
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	81fb      	strh	r3, [r7, #14]
 8006ff6:	e025      	b.n	8007044 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	2bff      	cmp	r3, #255	; 0xff
 8007002:	d805      	bhi.n	8007010 <ff_convert+0x30>
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	3b80      	subs	r3, #128	; 0x80
 8007008:	4a11      	ldr	r2, [pc, #68]	; (8007050 <ff_convert+0x70>)
 800700a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700e:	e000      	b.n	8007012 <ff_convert+0x32>
 8007010:	2300      	movs	r3, #0
 8007012:	81fb      	strh	r3, [r7, #14]
 8007014:	e016      	b.n	8007044 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007016:	2300      	movs	r3, #0
 8007018:	81fb      	strh	r3, [r7, #14]
 800701a:	e009      	b.n	8007030 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <ff_convert+0x70>)
 8007020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	429a      	cmp	r2, r3
 8007028:	d006      	beq.n	8007038 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	3301      	adds	r3, #1
 800702e:	81fb      	strh	r3, [r7, #14]
 8007030:	89fb      	ldrh	r3, [r7, #14]
 8007032:	2b7f      	cmp	r3, #127	; 0x7f
 8007034:	d9f2      	bls.n	800701c <ff_convert+0x3c>
 8007036:	e000      	b.n	800703a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007038:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800703a:	89fb      	ldrh	r3, [r7, #14]
 800703c:	3380      	adds	r3, #128	; 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	b2db      	uxtb	r3, r3
 8007042:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007044:	89fb      	ldrh	r3, [r7, #14]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	08008fe8 	.word	0x08008fe8

08007054 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e002      	b.n	800706a <ff_wtoupper+0x16>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	4a0f      	ldr	r2, [pc, #60]	; (80070a8 <ff_wtoupper+0x54>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <ff_wtoupper+0x30>
 8007076:	4a0c      	ldr	r2, [pc, #48]	; (80070a8 <ff_wtoupper+0x54>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	429a      	cmp	r2, r3
 8007082:	d1ef      	bne.n	8007064 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007084:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <ff_wtoupper+0x54>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <ff_wtoupper+0x46>
 8007090:	4a06      	ldr	r2, [pc, #24]	; (80070ac <ff_wtoupper+0x58>)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007098:	e000      	b.n	800709c <ff_wtoupper+0x48>
 800709a:	88fb      	ldrh	r3, [r7, #6]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	080090e8 	.word	0x080090e8
 80070ac:	080092c8 	.word	0x080092c8

080070b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <MX_FATFS_Init+0x18>)
 80070b6:	4805      	ldr	r0, [pc, #20]	; (80070cc <MX_FATFS_Init+0x1c>)
 80070b8:	f7ff ff82 	bl	8006fc0 <FATFS_LinkDriver>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <MX_FATFS_Init+0x20>)
 80070c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80070c4:	bf00      	nop
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200002e0 	.word	0x200002e0
 80070cc:	2000000c 	.word	0x2000000c
 80070d0:	200002e4 	.word	0x200002e4

080070d4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80070da:	4618      	mov	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
	...

080070e4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80070e8:	2200      	movs	r2, #0
 80070ea:	2101      	movs	r1, #1
 80070ec:	4802      	ldr	r0, [pc, #8]	; (80070f8 <SELECT+0x14>)
 80070ee:	f7f9 fec7 	bl	8000e80 <HAL_GPIO_WritePin>
}
 80070f2:	bf00      	nop
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40010c00 	.word	0x40010c00

080070fc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8007100:	2201      	movs	r2, #1
 8007102:	2101      	movs	r1, #1
 8007104:	4802      	ldr	r0, [pc, #8]	; (8007110 <DESELECT+0x14>)
 8007106:	f7f9 febb 	bl	8000e80 <HAL_GPIO_WritePin>
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40010c00 	.word	0x40010c00

08007114 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800711e:	bf00      	nop
 8007120:	4808      	ldr	r0, [pc, #32]	; (8007144 <SPI_TxByte+0x30>)
 8007122:	f7fa fdc4 	bl	8001cae <HAL_SPI_GetState>
 8007126:	4603      	mov	r3, r0
 8007128:	2b01      	cmp	r3, #1
 800712a:	d1f9      	bne.n	8007120 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800712c:	1df9      	adds	r1, r7, #7
 800712e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007132:	2201      	movs	r2, #1
 8007134:	4803      	ldr	r0, [pc, #12]	; (8007144 <SPI_TxByte+0x30>)
 8007136:	f7fa fadd 	bl	80016f4 <HAL_SPI_Transmit>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200037cc 	.word	0x200037cc

08007148 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800714e:	23ff      	movs	r3, #255	; 0xff
 8007150:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8007156:	bf00      	nop
 8007158:	4809      	ldr	r0, [pc, #36]	; (8007180 <SPI_RxByte+0x38>)
 800715a:	f7fa fda8 	bl	8001cae <HAL_SPI_GetState>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d1f9      	bne.n	8007158 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8007164:	1dba      	adds	r2, r7, #6
 8007166:	1df9      	adds	r1, r7, #7
 8007168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2301      	movs	r3, #1
 8007170:	4803      	ldr	r0, [pc, #12]	; (8007180 <SPI_RxByte+0x38>)
 8007172:	f7fa fbfc 	bl	800196e <HAL_SPI_TransmitReceive>
  
  return data;
 8007176:	79bb      	ldrb	r3, [r7, #6]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	200037cc 	.word	0x200037cc

08007184 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800718c:	f7ff ffdc 	bl	8007148 <SPI_RxByte>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	701a      	strb	r2, [r3, #0]
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <SD_ReadyWait+0x34>)
 80071a8:	2232      	movs	r2, #50	; 0x32
 80071aa:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80071ac:	f7ff ffcc 	bl	8007148 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80071b0:	f7ff ffca 	bl	8007148 <SPI_RxByte>
 80071b4:	4603      	mov	r3, r0
 80071b6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	d004      	beq.n	80071c8 <SD_ReadyWait+0x28>
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <SD_ReadyWait+0x34>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f3      	bne.n	80071b0 <SD_ReadyWait+0x10>
  
  return res;
 80071c8:	79fb      	ldrb	r3, [r7, #7]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20004854 	.word	0x20004854

080071d8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80071de:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80071e2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80071e4:	f7ff ff8a 	bl	80070fc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	e005      	b.n	80071fa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80071ee:	20ff      	movs	r0, #255	; 0xff
 80071f0:	f7ff ff90 	bl	8007114 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3301      	adds	r3, #1
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	ddf6      	ble.n	80071ee <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8007200:	f7ff ff70 	bl	80070e4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8007218:	2395      	movs	r3, #149	; 0x95
 800721a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e009      	b.n	8007236 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8007222:	1d3a      	adds	r2, r7, #4
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff ff72 	bl	8007114 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b05      	cmp	r3, #5
 800723a:	ddf2      	ble.n	8007222 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 800723c:	e002      	b.n	8007244 <SD_PowerOn+0x6c>
  {
    Count--;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	3b01      	subs	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8007244:	f7ff ff80 	bl	8007148 <SPI_RxByte>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <SD_PowerOn+0x7c>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f4      	bne.n	800723e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8007254:	f7ff ff52 	bl	80070fc <DESELECT>
  SPI_TxByte(0XFF);
 8007258:	20ff      	movs	r0, #255	; 0xff
 800725a:	f7ff ff5b 	bl	8007114 <SPI_TxByte>
  
  PowerFlag = 1;
 800725e:	4b03      	ldr	r3, [pc, #12]	; (800726c <SD_PowerOn+0x94>)
 8007260:	2201      	movs	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200002cd 	.word	0x200002cd

08007270 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <SD_PowerOff+0x14>)
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200002cd 	.word	0x200002cd

08007288 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <SD_CheckPower+0x10>)
 800728e:	781b      	ldrb	r3, [r3, #0]
}
 8007290:	4618      	mov	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr
 8007298:	200002cd 	.word	0x200002cd

0800729c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <SD_RxDataBlock+0x68>)
 80072a8:	220a      	movs	r2, #10
 80072aa:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80072ac:	f7ff ff4c 	bl	8007148 <SPI_RxByte>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	2bff      	cmp	r3, #255	; 0xff
 80072b8:	d104      	bne.n	80072c4 <SD_RxDataBlock+0x28>
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <SD_RxDataBlock+0x68>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f3      	bne.n	80072ac <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2bfe      	cmp	r3, #254	; 0xfe
 80072c8:	d001      	beq.n	80072ce <SD_RxDataBlock+0x32>
    return FALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e016      	b.n	80072fc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff ff55 	bl	8007184 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff ff4f 	bl	8007184 <SPI_RxBytePtr>
  } while(btr -= 2);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3b02      	subs	r3, #2
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1ed      	bne.n	80072ce <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80072f2:	f7ff ff29 	bl	8007148 <SPI_RxByte>
  SPI_RxByte();
 80072f6:	f7ff ff27 	bl	8007148 <SPI_RxByte>
  
  return TRUE;
 80072fa:	2301      	movs	r3, #1
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20004855 	.word	0x20004855

08007308 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8007318:	f7ff ff42 	bl	80071a0 <SD_ReadyWait>
 800731c:	4603      	mov	r3, r0
 800731e:	2bff      	cmp	r3, #255	; 0xff
 8007320:	d001      	beq.n	8007326 <SD_TxDataBlock+0x1e>
    return FALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	e040      	b.n	80073a8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fef3 	bl	8007114 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	2bfd      	cmp	r3, #253	; 0xfd
 8007332:	d031      	beq.n	8007398 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fee7 	bl	8007114 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fee0 	bl	8007114 <SPI_TxByte>
    } while (--wc);
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	3b01      	subs	r3, #1
 8007358:	73bb      	strb	r3, [r7, #14]
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1eb      	bne.n	8007338 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8007360:	f7ff fef2 	bl	8007148 <SPI_RxByte>
    SPI_RxByte();
 8007364:	f7ff fef0 	bl	8007148 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8007368:	e00b      	b.n	8007382 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800736a:	f7ff feed 	bl	8007148 <SPI_RxByte>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	2b05      	cmp	r3, #5
 800737a:	d006      	beq.n	800738a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800737c:	7b7b      	ldrb	r3, [r7, #13]
 800737e:	3301      	adds	r3, #1
 8007380:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8007382:	7b7b      	ldrb	r3, [r7, #13]
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d9f0      	bls.n	800736a <SD_TxDataBlock+0x62>
 8007388:	e000      	b.n	800738c <SD_TxDataBlock+0x84>
        break;
 800738a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800738c:	bf00      	nop
 800738e:	f7ff fedb 	bl	8007148 <SPI_RxByte>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0fa      	beq.n	800738e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2b05      	cmp	r3, #5
 80073a0:	d101      	bne.n	80073a6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	6039      	str	r1, [r7, #0]
 80073ba:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80073bc:	f7ff fef0 	bl	80071a0 <SD_ReadyWait>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	d001      	beq.n	80073ca <SD_SendCmd+0x1a>
    return 0xFF;
 80073c6:	23ff      	movs	r3, #255	; 0xff
 80073c8:	e040      	b.n	800744c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fea1 	bl	8007114 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	0e1b      	lsrs	r3, r3, #24
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fe9b 	bl	8007114 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fe95 	bl	8007114 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fe8f 	bl	8007114 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fe8a 	bl	8007114 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d101      	bne.n	800740e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800740a:	2395      	movs	r3, #149	; 0x95
 800740c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	2b48      	cmp	r3, #72	; 0x48
 8007412:	d101      	bne.n	8007418 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8007414:	2387      	movs	r3, #135	; 0x87
 8007416:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fe7a 	bl	8007114 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	2b4c      	cmp	r3, #76	; 0x4c
 8007424:	d101      	bne.n	800742a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8007426:	f7ff fe8f 	bl	8007148 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800742a:	230a      	movs	r3, #10
 800742c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800742e:	f7ff fe8b 	bl	8007148 <SPI_RxByte>
 8007432:	4603      	mov	r3, r0
 8007434:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8007436:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da05      	bge.n	800744a <SD_SendCmd+0x9a>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	3b01      	subs	r3, #1
 8007442:	73bb      	strb	r3, [r7, #14]
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f1      	bne.n	800742e <SD_SendCmd+0x7e>
  
  return res;
 800744a:	7b7b      	ldrb	r3, [r7, #13]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8007464:	2301      	movs	r3, #1
 8007466:	e0d5      	b.n	8007614 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8007468:	4b6c      	ldr	r3, [pc, #432]	; (800761c <SD_disk_initialize+0x1c8>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <SD_disk_initialize+0x2a>
    return Stat;        
 8007476:	4b69      	ldr	r3, [pc, #420]	; (800761c <SD_disk_initialize+0x1c8>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	e0ca      	b.n	8007614 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800747e:	f7ff feab 	bl	80071d8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8007482:	f7ff fe2f 	bl	80070e4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800748a:	2100      	movs	r1, #0
 800748c:	2040      	movs	r0, #64	; 0x40
 800748e:	f7ff ff8f 	bl	80073b0 <SD_SendCmd>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 80a5 	bne.w	80075e4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800749a:	4b61      	ldr	r3, [pc, #388]	; (8007620 <SD_disk_initialize+0x1cc>)
 800749c:	2264      	movs	r2, #100	; 0x64
 800749e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80074a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074a4:	2048      	movs	r0, #72	; 0x48
 80074a6:	f7ff ff83 	bl	80073b0 <SD_SendCmd>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d158      	bne.n	8007562 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e00c      	b.n	80074d0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80074b6:	7bfc      	ldrb	r4, [r7, #15]
 80074b8:	f7ff fe46 	bl	8007148 <SPI_RxByte>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	4423      	add	r3, r4
 80074c6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3301      	adds	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d9ef      	bls.n	80074b6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80074d6:	7abb      	ldrb	r3, [r7, #10]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	f040 8083 	bne.w	80075e4 <SD_disk_initialize+0x190>
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	2baa      	cmp	r3, #170	; 0xaa
 80074e2:	d17f      	bne.n	80075e4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80074e4:	2100      	movs	r1, #0
 80074e6:	2077      	movs	r0, #119	; 0x77
 80074e8:	f7ff ff62 	bl	80073b0 <SD_SendCmd>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d807      	bhi.n	8007502 <SD_disk_initialize+0xae>
 80074f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80074f6:	2069      	movs	r0, #105	; 0x69
 80074f8:	f7ff ff5a 	bl	80073b0 <SD_SendCmd>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8007502:	4b47      	ldr	r3, [pc, #284]	; (8007620 <SD_disk_initialize+0x1cc>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1eb      	bne.n	80074e4 <SD_disk_initialize+0x90>
 800750c:	e000      	b.n	8007510 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800750e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8007510:	4b43      	ldr	r3, [pc, #268]	; (8007620 <SD_disk_initialize+0x1cc>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d064      	beq.n	80075e4 <SD_disk_initialize+0x190>
 800751a:	2100      	movs	r1, #0
 800751c:	207a      	movs	r0, #122	; 0x7a
 800751e:	f7ff ff47 	bl	80073b0 <SD_SendCmd>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d15d      	bne.n	80075e4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]
 800752c:	e00c      	b.n	8007548 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800752e:	7bfc      	ldrb	r4, [r7, #15]
 8007530:	f7ff fe0a 	bl	8007148 <SPI_RxByte>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	4423      	add	r3, r4
 800753e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	3301      	adds	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d9ef      	bls.n	800752e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800754e:	7a3b      	ldrb	r3, [r7, #8]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <SD_disk_initialize+0x108>
 8007558:	2306      	movs	r3, #6
 800755a:	e000      	b.n	800755e <SD_disk_initialize+0x10a>
 800755c:	2302      	movs	r3, #2
 800755e:	73bb      	strb	r3, [r7, #14]
 8007560:	e040      	b.n	80075e4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8007562:	2100      	movs	r1, #0
 8007564:	2077      	movs	r0, #119	; 0x77
 8007566:	f7ff ff23 	bl	80073b0 <SD_SendCmd>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d808      	bhi.n	8007582 <SD_disk_initialize+0x12e>
 8007570:	2100      	movs	r1, #0
 8007572:	2069      	movs	r0, #105	; 0x69
 8007574:	f7ff ff1c 	bl	80073b0 <SD_SendCmd>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d801      	bhi.n	8007582 <SD_disk_initialize+0x12e>
 800757e:	2302      	movs	r3, #2
 8007580:	e000      	b.n	8007584 <SD_disk_initialize+0x130>
 8007582:	2301      	movs	r3, #1
 8007584:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d10e      	bne.n	80075aa <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800758c:	2100      	movs	r1, #0
 800758e:	2077      	movs	r0, #119	; 0x77
 8007590:	f7ff ff0e 	bl	80073b0 <SD_SendCmd>
 8007594:	4603      	mov	r3, r0
 8007596:	2b01      	cmp	r3, #1
 8007598:	d80e      	bhi.n	80075b8 <SD_disk_initialize+0x164>
 800759a:	2100      	movs	r1, #0
 800759c:	2069      	movs	r0, #105	; 0x69
 800759e:	f7ff ff07 	bl	80073b0 <SD_SendCmd>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d107      	bne.n	80075b8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80075a8:	e00d      	b.n	80075c6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80075aa:	2100      	movs	r1, #0
 80075ac:	2041      	movs	r0, #65	; 0x41
 80075ae:	f7ff feff 	bl	80073b0 <SD_SendCmd>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80075b8:	4b19      	ldr	r3, [pc, #100]	; (8007620 <SD_disk_initialize+0x1cc>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e1      	bne.n	8007586 <SD_disk_initialize+0x132>
 80075c2:	e000      	b.n	80075c6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80075c4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80075c6:	4b16      	ldr	r3, [pc, #88]	; (8007620 <SD_disk_initialize+0x1cc>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <SD_disk_initialize+0x18c>
 80075d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075d4:	2050      	movs	r0, #80	; 0x50
 80075d6:	f7ff feeb 	bl	80073b0 <SD_SendCmd>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80075e4:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <SD_disk_initialize+0x1d0>)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80075ea:	f7ff fd87 	bl	80070fc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80075ee:	f7ff fdab 	bl	8007148 <SPI_RxByte>
  
  if (type) 
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80075f8:	4b08      	ldr	r3, [pc, #32]	; (800761c <SD_disk_initialize+0x1c8>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <SD_disk_initialize+0x1c8>)
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e001      	b.n	800760e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800760a:	f7ff fe31 	bl	8007270 <SD_PowerOff>
  }
  
  return Stat;
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <SD_disk_initialize+0x1c8>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	bd90      	pop	{r4, r7, pc}
 800761c:	20000005 	.word	0x20000005
 8007620:	20004855 	.word	0x20004855
 8007624:	200002cc 	.word	0x200002cc

08007628 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8007638:	2301      	movs	r3, #1
 800763a:	e002      	b.n	8007642 <SD_disk_status+0x1a>
  
  return Stat;
 800763c:	4b03      	ldr	r3, [pc, #12]	; (800764c <SD_disk_status+0x24>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b2db      	uxtb	r3, r3
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	20000005 	.word	0x20000005

08007650 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <SD_disk_read+0x1c>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <SD_disk_read+0x20>
    return RES_PARERR;
 800766c:	2304      	movs	r3, #4
 800766e:	e051      	b.n	8007714 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8007670:	4b2a      	ldr	r3, [pc, #168]	; (800771c <SD_disk_read+0xcc>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800767e:	2303      	movs	r3, #3
 8007680:	e048      	b.n	8007714 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8007682:	4b27      	ldr	r3, [pc, #156]	; (8007720 <SD_disk_read+0xd0>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	025b      	lsls	r3, r3, #9
 8007692:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8007694:	f7ff fd26 	bl	80070e4 <SELECT>
  
  if (count == 1) 
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d111      	bne.n	80076c2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	2051      	movs	r0, #81	; 0x51
 80076a2:	f7ff fe85 	bl	80073b0 <SD_SendCmd>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d129      	bne.n	8007700 <SD_disk_read+0xb0>
 80076ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076b0:	68b8      	ldr	r0, [r7, #8]
 80076b2:	f7ff fdf3 	bl	800729c <SD_RxDataBlock>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d021      	beq.n	8007700 <SD_disk_read+0xb0>
      count = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	e01e      	b.n	8007700 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	2052      	movs	r0, #82	; 0x52
 80076c6:	f7ff fe73 	bl	80073b0 <SD_SendCmd>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d117      	bne.n	8007700 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80076d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	f7ff fde1 	bl	800729c <SD_RxDataBlock>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80076e6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1ed      	bne.n	80076d0 <SD_disk_read+0x80>
 80076f4:	e000      	b.n	80076f8 <SD_disk_read+0xa8>
          break;
 80076f6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80076f8:	2100      	movs	r1, #0
 80076fa:	204c      	movs	r0, #76	; 0x4c
 80076fc:	f7ff fe58 	bl	80073b0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8007700:	f7ff fcfc 	bl	80070fc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8007704:	f7ff fd20 	bl	8007148 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000005 	.word	0x20000005
 8007720:	200002cc 	.word	0x200002cc

08007724 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <SD_disk_write+0x1c>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <SD_disk_write+0x20>
    return RES_PARERR;
 8007740:	2304      	movs	r3, #4
 8007742:	e06b      	b.n	800781c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8007744:	4b37      	ldr	r3, [pc, #220]	; (8007824 <SD_disk_write+0x100>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8007752:	2303      	movs	r3, #3
 8007754:	e062      	b.n	800781c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8007756:	4b33      	ldr	r3, [pc, #204]	; (8007824 <SD_disk_write+0x100>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <SD_disk_write+0x44>
    return RES_WRPRT;
 8007764:	2302      	movs	r3, #2
 8007766:	e059      	b.n	800781c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8007768:	4b2f      	ldr	r3, [pc, #188]	; (8007828 <SD_disk_write+0x104>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	025b      	lsls	r3, r3, #9
 8007778:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800777a:	f7ff fcb3 	bl	80070e4 <SELECT>
  
  if (count == 1) 
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d110      	bne.n	80077a6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	2058      	movs	r0, #88	; 0x58
 8007788:	f7ff fe12 	bl	80073b0 <SD_SendCmd>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d13a      	bne.n	8007808 <SD_disk_write+0xe4>
 8007792:	21fe      	movs	r1, #254	; 0xfe
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7ff fdb7 	bl	8007308 <SD_TxDataBlock>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d033      	beq.n	8007808 <SD_disk_write+0xe4>
      count = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	e030      	b.n	8007808 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <SD_disk_write+0x104>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80077b2:	2100      	movs	r1, #0
 80077b4:	2077      	movs	r0, #119	; 0x77
 80077b6:	f7ff fdfb 	bl	80073b0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	2057      	movs	r0, #87	; 0x57
 80077be:	f7ff fdf7 	bl	80073b0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	2059      	movs	r0, #89	; 0x59
 80077c6:	f7ff fdf3 	bl	80073b0 <SD_SendCmd>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11b      	bne.n	8007808 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80077d0:	21fc      	movs	r1, #252	; 0xfc
 80077d2:	68b8      	ldr	r0, [r7, #8]
 80077d4:	f7ff fd98 	bl	8007308 <SD_TxDataBlock>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077e4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1ee      	bne.n	80077d0 <SD_disk_write+0xac>
 80077f2:	e000      	b.n	80077f6 <SD_disk_write+0xd2>
          break;
 80077f4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80077f6:	21fd      	movs	r1, #253	; 0xfd
 80077f8:	2000      	movs	r0, #0
 80077fa:	f7ff fd85 	bl	8007308 <SD_TxDataBlock>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <SD_disk_write+0xe4>
      {        
        count = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8007808:	f7ff fc78 	bl	80070fc <DESELECT>
  SPI_RxByte();
 800780c:	f7ff fc9c 	bl	8007148 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2301      	movne	r3, #1
 8007818:	2300      	moveq	r3, #0
 800781a:	b2db      	uxtb	r3, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000005 	.word	0x20000005
 8007828:	200002cc 	.word	0x200002cc

0800782c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b08b      	sub	sp, #44	; 0x2c
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	603a      	str	r2, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
 8007838:	460b      	mov	r3, r1
 800783a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8007846:	2304      	movs	r3, #4
 8007848:	e117      	b.n	8007a7a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8007850:	79bb      	ldrb	r3, [r7, #6]
 8007852:	2b05      	cmp	r3, #5
 8007854:	d126      	bne.n	80078a4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d00e      	beq.n	800787c <SD_disk_ioctl+0x50>
 800785e:	2b02      	cmp	r3, #2
 8007860:	d012      	beq.n	8007888 <SD_disk_ioctl+0x5c>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d11a      	bne.n	800789c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8007866:	f7ff fd0f 	bl	8007288 <SD_CheckPower>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8007870:	f7ff fcfe 	bl	8007270 <SD_PowerOff>
      res = RES_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800787a:	e0fc      	b.n	8007a76 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800787c:	f7ff fcac 	bl	80071d8 <SD_PowerOn>
      res = RES_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007886:	e0f6      	b.n	8007a76 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	1c5c      	adds	r4, r3, #1
 800788c:	f7ff fcfc 	bl	8007288 <SD_CheckPower>
 8007890:	4603      	mov	r3, r0
 8007892:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800789a:	e0ec      	b.n	8007a76 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800789c:	2304      	movs	r3, #4
 800789e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078a2:	e0e8      	b.n	8007a76 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80078a4:	4b77      	ldr	r3, [pc, #476]	; (8007a84 <SD_disk_ioctl+0x258>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0e1      	b.n	8007a7a <SD_disk_ioctl+0x24e>
    
    SELECT();
 80078b6:	f7ff fc15 	bl	80070e4 <SELECT>
    
    switch (ctrl) 
 80078ba:	79bb      	ldrb	r3, [r7, #6]
 80078bc:	2b0d      	cmp	r3, #13
 80078be:	f200 80cb 	bhi.w	8007a58 <SD_disk_ioctl+0x22c>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <SD_disk_ioctl+0x9c>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080079c3 	.word	0x080079c3
 80078cc:	08007901 	.word	0x08007901
 80078d0:	080079b3 	.word	0x080079b3
 80078d4:	08007a59 	.word	0x08007a59
 80078d8:	08007a59 	.word	0x08007a59
 80078dc:	08007a59 	.word	0x08007a59
 80078e0:	08007a59 	.word	0x08007a59
 80078e4:	08007a59 	.word	0x08007a59
 80078e8:	08007a59 	.word	0x08007a59
 80078ec:	08007a59 	.word	0x08007a59
 80078f0:	08007a59 	.word	0x08007a59
 80078f4:	080079d5 	.word	0x080079d5
 80078f8:	080079f9 	.word	0x080079f9
 80078fc:	08007a1d 	.word	0x08007a1d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8007900:	2100      	movs	r1, #0
 8007902:	2049      	movs	r0, #73	; 0x49
 8007904:	f7ff fd54 	bl	80073b0 <SD_SendCmd>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 80a8 	bne.w	8007a60 <SD_disk_ioctl+0x234>
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	2110      	movs	r1, #16
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fcc0 	bl	800729c <SD_RxDataBlock>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 809e 	beq.w	8007a60 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8007924:	7b3b      	ldrb	r3, [r7, #12]
 8007926:	099b      	lsrs	r3, r3, #6
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10e      	bne.n	800794c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800792e:	7d7b      	ldrb	r3, [r7, #21]
 8007930:	b29a      	uxth	r2, r3
 8007932:	7d3b      	ldrb	r3, [r7, #20]
 8007934:	b29b      	uxth	r3, r3
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	b29b      	uxth	r3, r3
 800793a:	4413      	add	r3, r2
 800793c:	b29b      	uxth	r3, r3
 800793e:	3301      	adds	r3, #1
 8007940:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8007942:	8bfb      	ldrh	r3, [r7, #30]
 8007944:	029a      	lsls	r2, r3, #10
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e02e      	b.n	80079aa <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800794c:	7c7b      	ldrb	r3, [r7, #17]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	b2da      	uxtb	r2, r3
 8007954:	7dbb      	ldrb	r3, [r7, #22]
 8007956:	09db      	lsrs	r3, r3, #7
 8007958:	b2db      	uxtb	r3, r3
 800795a:	4413      	add	r3, r2
 800795c:	b2da      	uxtb	r2, r3
 800795e:	7d7b      	ldrb	r3, [r7, #21]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 0306 	and.w	r3, r3, #6
 8007968:	b2db      	uxtb	r3, r3
 800796a:	4413      	add	r3, r2
 800796c:	b2db      	uxtb	r3, r3
 800796e:	3302      	adds	r3, #2
 8007970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8007974:	7d3b      	ldrb	r3, [r7, #20]
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	b2db      	uxtb	r3, r3
 800797a:	b29a      	uxth	r2, r3
 800797c:	7cfb      	ldrb	r3, [r7, #19]
 800797e:	b29b      	uxth	r3, r3
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	b29b      	uxth	r3, r3
 8007984:	4413      	add	r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	7cbb      	ldrb	r3, [r7, #18]
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007992:	b29b      	uxth	r3, r3
 8007994:	4413      	add	r3, r2
 8007996:	b29b      	uxth	r3, r3
 8007998:	3301      	adds	r3, #1
 800799a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800799c:	8bfa      	ldrh	r2, [r7, #30]
 800799e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079a2:	3b09      	subs	r3, #9
 80079a4:	409a      	lsls	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80079b0:	e056      	b.n	8007a60 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079c0:	e055      	b.n	8007a6e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80079c2:	f7ff fbed 	bl	80071a0 <SD_ReadyWait>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2bff      	cmp	r3, #255	; 0xff
 80079ca:	d14b      	bne.n	8007a64 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079d2:	e047      	b.n	8007a64 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80079d4:	2100      	movs	r1, #0
 80079d6:	2049      	movs	r0, #73	; 0x49
 80079d8:	f7ff fcea 	bl	80073b0 <SD_SendCmd>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d142      	bne.n	8007a68 <SD_disk_ioctl+0x23c>
 80079e2:	2110      	movs	r1, #16
 80079e4:	6a38      	ldr	r0, [r7, #32]
 80079e6:	f7ff fc59 	bl	800729c <SD_RxDataBlock>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d03b      	beq.n	8007a68 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079f6:	e037      	b.n	8007a68 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80079f8:	2100      	movs	r1, #0
 80079fa:	204a      	movs	r0, #74	; 0x4a
 80079fc:	f7ff fcd8 	bl	80073b0 <SD_SendCmd>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d132      	bne.n	8007a6c <SD_disk_ioctl+0x240>
 8007a06:	2110      	movs	r1, #16
 8007a08:	6a38      	ldr	r0, [r7, #32]
 8007a0a:	f7ff fc47 	bl	800729c <SD_RxDataBlock>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02b      	beq.n	8007a6c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007a1a:	e027      	b.n	8007a6c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	207a      	movs	r0, #122	; 0x7a
 8007a20:	f7ff fcc6 	bl	80073b0 <SD_SendCmd>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d116      	bne.n	8007a58 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a30:	e00b      	b.n	8007a4a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8007a32:	6a3c      	ldr	r4, [r7, #32]
 8007a34:	1c63      	adds	r3, r4, #1
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	f7ff fb86 	bl	8007148 <SPI_RxByte>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8007a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a44:	3301      	adds	r3, #1
 8007a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d9ef      	bls.n	8007a32 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a5e:	e006      	b.n	8007a6e <SD_disk_ioctl+0x242>
      break;
 8007a60:	bf00      	nop
 8007a62:	e004      	b.n	8007a6e <SD_disk_ioctl+0x242>
      break;
 8007a64:	bf00      	nop
 8007a66:	e002      	b.n	8007a6e <SD_disk_ioctl+0x242>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e000      	b.n	8007a6e <SD_disk_ioctl+0x242>
      break;
 8007a6c:	bf00      	nop
    }
    
    DESELECT();
 8007a6e:	f7ff fb45 	bl	80070fc <DESELECT>
    SPI_RxByte();
 8007a72:	f7ff fb69 	bl	8007148 <SPI_RxByte>
  }
  
  return res;
 8007a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	372c      	adds	r7, #44	; 0x2c
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd90      	pop	{r4, r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000005 	.word	0x20000005

08007a88 <send_uart>:
uint32_t total, free_space;


/* to send the data to the uart */
void send_uart (char *string)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7f8 fb5b 	bl	800014c <strlen>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	4803      	ldr	r0, [pc, #12]	; (8007ab4 <send_uart+0x2c>)
 8007aa6:	f7fa fa48 	bl	8001f3a <HAL_UART_Transmit>
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20003380 	.word	0x20003380

08007ab8 <bufsize>:

/* to find the size of data in the buffer */
int bufsize (char *buf)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	int i=0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8007ac4:	e002      	b.n	8007acc <bufsize+0x14>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f6      	bne.n	8007ac6 <bufsize+0xe>
	return i;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <bufclear>:

void bufclear (void)  // clear buffer
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	e007      	b.n	8007b00 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <bufclear+0x30>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3301      	adds	r3, #1
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b06:	dbf3      	blt.n	8007af0 <bufclear+0xc>
	}
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	200033c0 	.word	0x200033c0

08007b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b1c:	f7f8 ff0c 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b20:	f000 f99e 	bl	8007e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b24:	f000 fa42 	bl	8007fac <MX_GPIO_Init>
  MX_SPI1_Init();
 8007b28:	f000 f9e0 	bl	8007eec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8007b2c:	f000 fa14 	bl	8007f58 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8007b30:	f7ff fabe 	bl	80070b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* Mount SD Card */
    fresult = f_mount(&fs, "", 0);
 8007b34:	2200      	movs	r2, #0
 8007b36:	49ae      	ldr	r1, [pc, #696]	; (8007df0 <main+0x2d8>)
 8007b38:	48ae      	ldr	r0, [pc, #696]	; (8007df4 <main+0x2dc>)
 8007b3a:	f7fd fa99 	bl	8005070 <f_mount>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	461a      	mov	r2, r3
 8007b42:	4bad      	ldr	r3, [pc, #692]	; (8007df8 <main+0x2e0>)
 8007b44:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 8007b46:	4bac      	ldr	r3, [pc, #688]	; (8007df8 <main+0x2e0>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <main+0x3e>
 8007b4e:	48ab      	ldr	r0, [pc, #684]	; (8007dfc <main+0x2e4>)
 8007b50:	f7ff ff9a 	bl	8007a88 <send_uart>
 8007b54:	e002      	b.n	8007b5c <main+0x44>
    else send_uart("SD CARD mounted successfully...\n");
 8007b56:	48aa      	ldr	r0, [pc, #680]	; (8007e00 <main+0x2e8>)
 8007b58:	f7ff ff96 	bl	8007a88 <send_uart>


    /*************** Card capacity details ********************/

        /* Check free space */
        f_getfree("", &fre_clust, &pfs);
 8007b5c:	4aa9      	ldr	r2, [pc, #676]	; (8007e04 <main+0x2ec>)
 8007b5e:	49aa      	ldr	r1, [pc, #680]	; (8007e08 <main+0x2f0>)
 8007b60:	48a3      	ldr	r0, [pc, #652]	; (8007df0 <main+0x2d8>)
 8007b62:	f7fe fecf 	bl	8006904 <f_getfree>

        total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8007b66:	4ba7      	ldr	r3, [pc, #668]	; (8007e04 <main+0x2ec>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6e:	3314      	adds	r3, #20
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	1e9a      	subs	r2, r3, #2
 8007b74:	4ba3      	ldr	r3, [pc, #652]	; (8007e04 <main+0x2ec>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	fb03 f302 	mul.w	r3, r3, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7f8 fc2b 	bl	80003e0 <__aeabi_ui2d>
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	4b9f      	ldr	r3, [pc, #636]	; (8007e0c <main+0x2f4>)
 8007b90:	f7f8 fca0 	bl	80004d4 <__aeabi_dmul>
 8007b94:	4603      	mov	r3, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4618      	mov	r0, r3
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	f7f8 feac 	bl	80008f8 <__aeabi_d2uiz>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	4b9b      	ldr	r3, [pc, #620]	; (8007e10 <main+0x2f8>)
 8007ba4:	601a      	str	r2, [r3, #0]
        sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8007ba6:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <main+0x2f8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	4999      	ldr	r1, [pc, #612]	; (8007e14 <main+0x2fc>)
 8007bae:	489a      	ldr	r0, [pc, #616]	; (8007e18 <main+0x300>)
 8007bb0:	f000 fc86 	bl	80084c0 <siprintf>
        send_uart(buffer);
 8007bb4:	4898      	ldr	r0, [pc, #608]	; (8007e18 <main+0x300>)
 8007bb6:	f7ff ff67 	bl	8007a88 <send_uart>
        bufclear();
 8007bba:	f7ff ff93 	bl	8007ae4 <bufclear>
        free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8007bbe:	4b91      	ldr	r3, [pc, #580]	; (8007e04 <main+0x2ec>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b8e      	ldr	r3, [pc, #568]	; (8007e08 <main+0x2f0>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	fb03 f302 	mul.w	r3, r3, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7f8 fc03 	bl	80003e0 <__aeabi_ui2d>
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	4b8b      	ldr	r3, [pc, #556]	; (8007e0c <main+0x2f4>)
 8007be0:	f7f8 fc78 	bl	80004d4 <__aeabi_dmul>
 8007be4:	4603      	mov	r3, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4618      	mov	r0, r3
 8007bea:	4621      	mov	r1, r4
 8007bec:	f7f8 fe84 	bl	80008f8 <__aeabi_d2uiz>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b8a      	ldr	r3, [pc, #552]	; (8007e1c <main+0x304>)
 8007bf4:	601a      	str	r2, [r3, #0]
        sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 8007bf6:	4b89      	ldr	r3, [pc, #548]	; (8007e1c <main+0x304>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4988      	ldr	r1, [pc, #544]	; (8007e20 <main+0x308>)
 8007bfe:	4886      	ldr	r0, [pc, #536]	; (8007e18 <main+0x300>)
 8007c00:	f000 fc5e 	bl	80084c0 <siprintf>
        send_uart(buffer);
 8007c04:	4884      	ldr	r0, [pc, #528]	; (8007e18 <main+0x300>)
 8007c06:	f7ff ff3f 	bl	8007a88 <send_uart>

        /************* The following operation is using PUTS and GETS *********************/


        /* Open file to write/ create a file if it doesn't exist */
        fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8007c0a:	2213      	movs	r2, #19
 8007c0c:	4985      	ldr	r1, [pc, #532]	; (8007e24 <main+0x30c>)
 8007c0e:	4886      	ldr	r0, [pc, #536]	; (8007e28 <main+0x310>)
 8007c10:	f7fd fa78 	bl	8005104 <f_open>
 8007c14:	4603      	mov	r3, r0
 8007c16:	461a      	mov	r2, r3
 8007c18:	4b77      	ldr	r3, [pc, #476]	; (8007df8 <main+0x2e0>)
 8007c1a:	701a      	strb	r2, [r3, #0]

        /* Writing text */
        fresult = f_puts("This data is from the First FILE\n\n", &fil);
 8007c1c:	4982      	ldr	r1, [pc, #520]	; (8007e28 <main+0x310>)
 8007c1e:	4883      	ldr	r0, [pc, #524]	; (8007e2c <main+0x314>)
 8007c20:	f7ff f94a 	bl	8006eb8 <f_puts>
 8007c24:	4603      	mov	r3, r0
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	4b73      	ldr	r3, [pc, #460]	; (8007df8 <main+0x2e0>)
 8007c2a:	701a      	strb	r2, [r3, #0]

        /* Close file */
        fresult = f_close(&fil);
 8007c2c:	487e      	ldr	r0, [pc, #504]	; (8007e28 <main+0x310>)
 8007c2e:	f7fe fb0a 	bl	8006246 <f_close>
 8007c32:	4603      	mov	r3, r0
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b70      	ldr	r3, [pc, #448]	; (8007df8 <main+0x2e0>)
 8007c38:	701a      	strb	r2, [r3, #0]

        send_uart ("File1.txt created and the data is written \n");
 8007c3a:	487d      	ldr	r0, [pc, #500]	; (8007e30 <main+0x318>)
 8007c3c:	f7ff ff24 	bl	8007a88 <send_uart>

        /* Open file to read */
        fresult = f_open(&fil, "file1.txt", FA_READ);
 8007c40:	2201      	movs	r2, #1
 8007c42:	4978      	ldr	r1, [pc, #480]	; (8007e24 <main+0x30c>)
 8007c44:	4878      	ldr	r0, [pc, #480]	; (8007e28 <main+0x310>)
 8007c46:	f7fd fa5d 	bl	8005104 <f_open>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b6a      	ldr	r3, [pc, #424]	; (8007df8 <main+0x2e0>)
 8007c50:	701a      	strb	r2, [r3, #0]

        /* Read string from the file */
        f_gets(buffer, fil.fsize, &fil);
 8007c52:	4b75      	ldr	r3, [pc, #468]	; (8007e28 <main+0x310>)
 8007c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c58:	330c      	adds	r3, #12
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a72      	ldr	r2, [pc, #456]	; (8007e28 <main+0x310>)
 8007c5e:	4619      	mov	r1, r3
 8007c60:	486d      	ldr	r0, [pc, #436]	; (8007e18 <main+0x300>)
 8007c62:	f7ff f8af 	bl	8006dc4 <f_gets>

        send_uart(buffer);
 8007c66:	486c      	ldr	r0, [pc, #432]	; (8007e18 <main+0x300>)
 8007c68:	f7ff ff0e 	bl	8007a88 <send_uart>

        /* Close file */
        f_close(&fil);
 8007c6c:	486e      	ldr	r0, [pc, #440]	; (8007e28 <main+0x310>)
 8007c6e:	f7fe faea 	bl	8006246 <f_close>

        bufclear();
 8007c72:	f7ff ff37 	bl	8007ae4 <bufclear>


        /**************** The following operation is using f_write and f_read **************************/

        /* Create second file with read write access and open it */
        fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8007c76:	2213      	movs	r2, #19
 8007c78:	496e      	ldr	r1, [pc, #440]	; (8007e34 <main+0x31c>)
 8007c7a:	486b      	ldr	r0, [pc, #428]	; (8007e28 <main+0x310>)
 8007c7c:	f7fd fa42 	bl	8005104 <f_open>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b5c      	ldr	r3, [pc, #368]	; (8007df8 <main+0x2e0>)
 8007c86:	701a      	strb	r2, [r3, #0]

        /* Writing text */
        strcpy (buffer, "This is File 2 and it says Hello from controllerstech\n");
 8007c88:	4b63      	ldr	r3, [pc, #396]	; (8007e18 <main+0x300>)
 8007c8a:	4a6b      	ldr	r2, [pc, #428]	; (8007e38 <main+0x320>)
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	469c      	mov	ip, r3
 8007c90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007c94:	4665      	mov	r5, ip
 8007c96:	4626      	mov	r6, r4
 8007c98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007c9a:	6028      	str	r0, [r5, #0]
 8007c9c:	6069      	str	r1, [r5, #4]
 8007c9e:	60aa      	str	r2, [r5, #8]
 8007ca0:	60eb      	str	r3, [r5, #12]
 8007ca2:	3410      	adds	r4, #16
 8007ca4:	f10c 0c10 	add.w	ip, ip, #16
 8007ca8:	4574      	cmp	r4, lr
 8007caa:	d1f3      	bne.n	8007c94 <main+0x17c>
 8007cac:	4663      	mov	r3, ip
 8007cae:	4622      	mov	r2, r4
 8007cb0:	6810      	ldr	r0, [r2, #0]
 8007cb2:	6018      	str	r0, [r3, #0]
 8007cb4:	8891      	ldrh	r1, [r2, #4]
 8007cb6:	7992      	ldrb	r2, [r2, #6]
 8007cb8:	8099      	strh	r1, [r3, #4]
 8007cba:	719a      	strb	r2, [r3, #6]

        fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8007cbc:	4856      	ldr	r0, [pc, #344]	; (8007e18 <main+0x300>)
 8007cbe:	f7ff fefb 	bl	8007ab8 <bufsize>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b5d      	ldr	r3, [pc, #372]	; (8007e3c <main+0x324>)
 8007cc8:	4953      	ldr	r1, [pc, #332]	; (8007e18 <main+0x300>)
 8007cca:	4857      	ldr	r0, [pc, #348]	; (8007e28 <main+0x310>)
 8007ccc:	f7fd ff6a 	bl	8005ba4 <f_write>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b48      	ldr	r3, [pc, #288]	; (8007df8 <main+0x2e0>)
 8007cd6:	701a      	strb	r2, [r3, #0]

        send_uart ("File2.txt created and data is written\n");
 8007cd8:	4859      	ldr	r0, [pc, #356]	; (8007e40 <main+0x328>)
 8007cda:	f7ff fed5 	bl	8007a88 <send_uart>

        /* Close file */
        f_close(&fil);
 8007cde:	4852      	ldr	r0, [pc, #328]	; (8007e28 <main+0x310>)
 8007ce0:	f7fe fab1 	bl	8006246 <f_close>



        // clearing buffer to show that result obtained is from the file
        bufclear();
 8007ce4:	f7ff fefe 	bl	8007ae4 <bufclear>

        /* Open second file to read */
        fresult = f_open(&fil, "file2.txt", FA_READ);
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4952      	ldr	r1, [pc, #328]	; (8007e34 <main+0x31c>)
 8007cec:	484e      	ldr	r0, [pc, #312]	; (8007e28 <main+0x310>)
 8007cee:	f7fd fa09 	bl	8005104 <f_open>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4b40      	ldr	r3, [pc, #256]	; (8007df8 <main+0x2e0>)
 8007cf8:	701a      	strb	r2, [r3, #0]

        /* Read data from the file
         * Please see the function details for the arguments */
        f_read (&fil, buffer, fil.fsize, &br);
 8007cfa:	4b4b      	ldr	r3, [pc, #300]	; (8007e28 <main+0x310>)
 8007cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d00:	330c      	adds	r3, #12
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b4f      	ldr	r3, [pc, #316]	; (8007e44 <main+0x32c>)
 8007d06:	4944      	ldr	r1, [pc, #272]	; (8007e18 <main+0x300>)
 8007d08:	4847      	ldr	r0, [pc, #284]	; (8007e28 <main+0x310>)
 8007d0a:	f7fd fd35 	bl	8005778 <f_read>
        send_uart(buffer);
 8007d0e:	4842      	ldr	r0, [pc, #264]	; (8007e18 <main+0x300>)
 8007d10:	f7ff feba 	bl	8007a88 <send_uart>

        /* Close file */
        f_close(&fil);
 8007d14:	4844      	ldr	r0, [pc, #272]	; (8007e28 <main+0x310>)
 8007d16:	f7fe fa96 	bl	8006246 <f_close>

        bufclear();
 8007d1a:	f7ff fee3 	bl	8007ae4 <bufclear>


        /*********************UPDATING an existing file ***************************/

        /* Open the file with write access */
        fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8007d1e:	2212      	movs	r2, #18
 8007d20:	4944      	ldr	r1, [pc, #272]	; (8007e34 <main+0x31c>)
 8007d22:	4841      	ldr	r0, [pc, #260]	; (8007e28 <main+0x310>)
 8007d24:	f7fd f9ee 	bl	8005104 <f_open>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <main+0x2e0>)
 8007d2e:	701a      	strb	r2, [r3, #0]

        /* Move to offset to the end of the file */
        fresult = f_lseek(&fil, fil.fsize);
 8007d30:	4b3d      	ldr	r3, [pc, #244]	; (8007e28 <main+0x310>)
 8007d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d36:	330c      	adds	r3, #12
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	483a      	ldr	r0, [pc, #232]	; (8007e28 <main+0x310>)
 8007d3e:	f7fe faad 	bl	800629c <f_lseek>
 8007d42:	4603      	mov	r3, r0
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <main+0x2e0>)
 8007d48:	701a      	strb	r2, [r3, #0]

        /* write the string to the file */
        fresult = f_puts("This is updated data and it should be in the end \n", &fil);
 8007d4a:	4937      	ldr	r1, [pc, #220]	; (8007e28 <main+0x310>)
 8007d4c:	483e      	ldr	r0, [pc, #248]	; (8007e48 <main+0x330>)
 8007d4e:	f7ff f8b3 	bl	8006eb8 <f_puts>
 8007d52:	4603      	mov	r3, r0
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <main+0x2e0>)
 8007d58:	701a      	strb	r2, [r3, #0]

        f_close (&fil);
 8007d5a:	4833      	ldr	r0, [pc, #204]	; (8007e28 <main+0x310>)
 8007d5c:	f7fe fa73 	bl	8006246 <f_close>

        /* Open to read the file */
        fresult = f_open (&fil, "file2.txt", FA_READ);
 8007d60:	2201      	movs	r2, #1
 8007d62:	4934      	ldr	r1, [pc, #208]	; (8007e34 <main+0x31c>)
 8007d64:	4830      	ldr	r0, [pc, #192]	; (8007e28 <main+0x310>)
 8007d66:	f7fd f9cd 	bl	8005104 <f_open>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <main+0x2e0>)
 8007d70:	701a      	strb	r2, [r3, #0]

        /* Read string from the file */
        f_read (&fil, buffer, fil.fsize, &br);
 8007d72:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <main+0x310>)
 8007d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d78:	330c      	adds	r3, #12
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <main+0x32c>)
 8007d7e:	4926      	ldr	r1, [pc, #152]	; (8007e18 <main+0x300>)
 8007d80:	4829      	ldr	r0, [pc, #164]	; (8007e28 <main+0x310>)
 8007d82:	f7fd fcf9 	bl	8005778 <f_read>
        send_uart(buffer);
 8007d86:	4824      	ldr	r0, [pc, #144]	; (8007e18 <main+0x300>)
 8007d88:	f7ff fe7e 	bl	8007a88 <send_uart>

        /* Close file */
        f_close(&fil);
 8007d8c:	4826      	ldr	r0, [pc, #152]	; (8007e28 <main+0x310>)
 8007d8e:	f7fe fa5a 	bl	8006246 <f_close>

        bufclear();
 8007d92:	f7ff fea7 	bl	8007ae4 <bufclear>


        /*************************REMOVING FILES FROM THE DIRECTORY ****************************/

        fresult = f_unlink("/file1.txt");
 8007d96:	482d      	ldr	r0, [pc, #180]	; (8007e4c <main+0x334>)
 8007d98:	f7fe fe96 	bl	8006ac8 <f_unlink>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <main+0x2e0>)
 8007da2:	701a      	strb	r2, [r3, #0]
        if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 8007da4:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <main+0x2e0>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <main+0x29a>
 8007dac:	4828      	ldr	r0, [pc, #160]	; (8007e50 <main+0x338>)
 8007dae:	f7ff fe6b 	bl	8007a88 <send_uart>

        fresult = f_unlink("/file2.txt");
 8007db2:	4828      	ldr	r0, [pc, #160]	; (8007e54 <main+0x33c>)
 8007db4:	f7fe fe88 	bl	8006ac8 <f_unlink>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <main+0x2e0>)
 8007dbe:	701a      	strb	r2, [r3, #0]
        if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <main+0x2e0>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <main+0x2b6>
 8007dc8:	4823      	ldr	r0, [pc, #140]	; (8007e58 <main+0x340>)
 8007dca:	f7ff fe5d 	bl	8007a88 <send_uart>

        /* Unmount SDCARD */
        fresult = f_mount(NULL, "", 1);
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4907      	ldr	r1, [pc, #28]	; (8007df0 <main+0x2d8>)
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f7fd f94c 	bl	8005070 <f_mount>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <main+0x2e0>)
 8007dde:	701a      	strb	r2, [r3, #0]
        if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <main+0x2e0>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <main+0x2d6>
 8007de8:	481c      	ldr	r0, [pc, #112]	; (8007e5c <main+0x344>)
 8007dea:	f7ff fe4d 	bl	8007a88 <send_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007dee:	e7fe      	b.n	8007dee <main+0x2d6>
 8007df0:	08008d58 	.word	0x08008d58
 8007df4:	20002348 	.word	0x20002348
 8007df8:	200037c8 	.word	0x200037c8
 8007dfc:	08008d5c 	.word	0x08008d5c
 8007e00:	08008d7c 	.word	0x08008d7c
 8007e04:	200037c4 	.word	0x200037c4
 8007e08:	20002344 	.word	0x20002344
 8007e0c:	3fe00000 	.word	0x3fe00000
 8007e10:	20003824 	.word	0x20003824
 8007e14:	08008da0 	.word	0x08008da0
 8007e18:	200033c0 	.word	0x200033c0
 8007e1c:	2000337c 	.word	0x2000337c
 8007e20:	08008dbc 	.word	0x08008dbc
 8007e24:	08008dd8 	.word	0x08008dd8
 8007e28:	20003828 	.word	0x20003828
 8007e2c:	08008de4 	.word	0x08008de4
 8007e30:	08008e08 	.word	0x08008e08
 8007e34:	08008e34 	.word	0x08008e34
 8007e38:	08008e40 	.word	0x08008e40
 8007e3c:	200037c0 	.word	0x200037c0
 8007e40:	08008e78 	.word	0x08008e78
 8007e44:	20003378 	.word	0x20003378
 8007e48:	08008ea0 	.word	0x08008ea0
 8007e4c:	08008ed4 	.word	0x08008ed4
 8007e50:	08008ee0 	.word	0x08008ee0
 8007e54:	08008f04 	.word	0x08008f04
 8007e58:	08008f10 	.word	0x08008f10
 8007e5c:	08008f34 	.word	0x08008f34

08007e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b090      	sub	sp, #64	; 0x40
 8007e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e66:	f107 0318 	add.w	r3, r7, #24
 8007e6a:	2228      	movs	r2, #40	; 0x28
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fb1e 	bl	80084b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e90:	2301      	movs	r3, #1
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e94:	2302      	movs	r3, #2
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ea4:	f107 0318 	add.w	r3, r7, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7f9 f801 	bl	8000eb0 <HAL_RCC_OscConfig>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007eb4:	f000 f8c4 	bl	8008040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eb8:	230f      	movs	r3, #15
 8007eba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7f9 fa50 	bl	8001378 <HAL_RCC_ClockConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007ede:	f000 f8af 	bl	8008040 <Error_Handler>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3740      	adds	r7, #64	; 0x40
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <MX_SPI1_Init+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f04:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f20:	2210      	movs	r2, #16
 8007f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f38:	220a      	movs	r2, #10
 8007f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007f3c:	4804      	ldr	r0, [pc, #16]	; (8007f50 <MX_SPI1_Init+0x64>)
 8007f3e:	f7f9 ff4a 	bl	8001dd6 <HAL_SPI_Init>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007f48:	f000 f87a 	bl	8008040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	200037cc 	.word	0x200037cc
 8007f54:	40013000 	.word	0x40013000

08007f58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f5e:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <MX_USART1_UART_Init+0x50>)
 8007f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f7e:	220c      	movs	r2, #12
 8007f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f90:	f7f9 ff86 	bl	8001ea0 <HAL_UART_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f9a:	f000 f851 	bl	8008040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20003380 	.word	0x20003380
 8007fa8:	40013800 	.word	0x40013800

08007fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb2:	f107 0310 	add.w	r3, r7, #16
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
 8007fbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fc6:	f043 0320 	orr.w	r3, r3, #32
 8007fca:	6193      	str	r3, [r2, #24]
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	4a16      	ldr	r2, [pc, #88]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fde:	f043 0304 	orr.w	r3, r3, #4
 8007fe2:	6193      	str	r3, [r2, #24]
 8007fe4:	4b14      	ldr	r3, [pc, #80]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	4a10      	ldr	r2, [pc, #64]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007ff6:	f043 0308 	orr.w	r3, r3, #8
 8007ffa:	6193      	str	r3, [r2, #24]
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <MX_GPIO_Init+0x8c>)
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8008008:	2200      	movs	r2, #0
 800800a:	2101      	movs	r1, #1
 800800c:	480b      	ldr	r0, [pc, #44]	; (800803c <MX_GPIO_Init+0x90>)
 800800e:	f7f8 ff37 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008012:	2301      	movs	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008016:	2301      	movs	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800801a:	2300      	movs	r3, #0
 800801c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800801e:	2302      	movs	r3, #2
 8008020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008022:	f107 0310 	add.w	r3, r7, #16
 8008026:	4619      	mov	r1, r3
 8008028:	4804      	ldr	r0, [pc, #16]	; (800803c <MX_GPIO_Init+0x90>)
 800802a:	f7f8 fdcb 	bl	8000bc4 <HAL_GPIO_Init>

}
 800802e:	bf00      	nop
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40021000 	.word	0x40021000
 800803c:	40010c00 	.word	0x40010c00

08008040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008044:	bf00      	nop
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008052:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <HAL_MspInit+0x5c>)
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	4a14      	ldr	r2, [pc, #80]	; (80080a8 <HAL_MspInit+0x5c>)
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	6193      	str	r3, [r2, #24]
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <HAL_MspInit+0x5c>)
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	60bb      	str	r3, [r7, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <HAL_MspInit+0x5c>)
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	4a0e      	ldr	r2, [pc, #56]	; (80080a8 <HAL_MspInit+0x5c>)
 8008070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008074:	61d3      	str	r3, [r2, #28]
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <HAL_MspInit+0x5c>)
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <HAL_MspInit+0x60>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	4a04      	ldr	r2, [pc, #16]	; (80080ac <HAL_MspInit+0x60>)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	40021000 	.word	0x40021000
 80080ac:	40010000 	.word	0x40010000

080080b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b8:	f107 0310 	add.w	r3, r7, #16
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_SPI_MspInit+0x88>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d12f      	bne.n	8008130 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080da:	6193      	str	r3, [r2, #24]
 80080dc:	4b17      	ldr	r3, [pc, #92]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080e8:	4b14      	ldr	r3, [pc, #80]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	4a13      	ldr	r2, [pc, #76]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080ee:	f043 0304 	orr.w	r3, r3, #4
 80080f2:	6193      	str	r3, [r2, #24]
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <HAL_SPI_MspInit+0x8c>)
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8008100:	23a0      	movs	r3, #160	; 0xa0
 8008102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008104:	2302      	movs	r3, #2
 8008106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008108:	2303      	movs	r3, #3
 800810a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	4619      	mov	r1, r3
 8008112:	480b      	ldr	r0, [pc, #44]	; (8008140 <HAL_SPI_MspInit+0x90>)
 8008114:	f7f8 fd56 	bl	8000bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	4619      	mov	r1, r3
 800812a:	4805      	ldr	r0, [pc, #20]	; (8008140 <HAL_SPI_MspInit+0x90>)
 800812c:	f7f8 fd4a 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008130:	bf00      	nop
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40013000 	.word	0x40013000
 800813c:	40021000 	.word	0x40021000
 8008140:	40010800 	.word	0x40010800

08008144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800814c:	f107 0310 	add.w	r3, r7, #16
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1c      	ldr	r2, [pc, #112]	; (80081d0 <HAL_UART_MspInit+0x8c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d131      	bne.n	80081c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008164:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <HAL_UART_MspInit+0x90>)
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <HAL_UART_MspInit+0x90>)
 800816a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800816e:	6193      	str	r3, [r2, #24]
 8008170:	4b18      	ldr	r3, [pc, #96]	; (80081d4 <HAL_UART_MspInit+0x90>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800817c:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <HAL_UART_MspInit+0x90>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	4a14      	ldr	r2, [pc, #80]	; (80081d4 <HAL_UART_MspInit+0x90>)
 8008182:	f043 0304 	orr.w	r3, r3, #4
 8008186:	6193      	str	r3, [r2, #24]
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <HAL_UART_MspInit+0x90>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	60bb      	str	r3, [r7, #8]
 8008192:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800819a:	2302      	movs	r3, #2
 800819c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800819e:	2303      	movs	r3, #3
 80081a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081a2:	f107 0310 	add.w	r3, r7, #16
 80081a6:	4619      	mov	r1, r3
 80081a8:	480b      	ldr	r0, [pc, #44]	; (80081d8 <HAL_UART_MspInit+0x94>)
 80081aa:	f7f8 fd0b 	bl	8000bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80081ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081bc:	f107 0310 	add.w	r3, r7, #16
 80081c0:	4619      	mov	r1, r3
 80081c2:	4805      	ldr	r0, [pc, #20]	; (80081d8 <HAL_UART_MspInit+0x94>)
 80081c4:	f7f8 fcfe 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80081c8:	bf00      	nop
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40013800 	.word	0x40013800
 80081d4:	40021000 	.word	0x40021000
 80081d8:	40010800 	.word	0x40010800

080081dc <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <SDTimer_Handler+0x3c>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d006      	beq.n	80081f8 <SDTimer_Handler+0x1c>
    Timer1--;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <SDTimer_Handler+0x3c>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	4b08      	ldr	r3, [pc, #32]	; (8008218 <SDTimer_Handler+0x3c>)
 80081f6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80081f8:	4b08      	ldr	r3, [pc, #32]	; (800821c <SDTimer_Handler+0x40>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d006      	beq.n	8008210 <SDTimer_Handler+0x34>
    Timer2--;
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <SDTimer_Handler+0x40>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b2da      	uxtb	r2, r3
 800820c:	4b03      	ldr	r3, [pc, #12]	; (800821c <SDTimer_Handler+0x40>)
 800820e:	701a      	strb	r2, [r3, #0]
}
 8008210:	bf00      	nop
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr
 8008218:	20004855 	.word	0x20004855
 800821c:	20004854 	.word	0x20004854

08008220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr

0800822c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008230:	e7fe      	b.n	8008230 <HardFault_Handler+0x4>

08008232 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008232:	b480      	push	{r7}
 8008234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008236:	e7fe      	b.n	8008236 <MemManage_Handler+0x4>

08008238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800823c:	e7fe      	b.n	800823c <BusFault_Handler+0x4>

0800823e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800823e:	b480      	push	{r7}
 8008240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008242:	e7fe      	b.n	8008242 <UsageFault_Handler+0x4>

08008244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008260:	bf00      	nop
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <SysTick_Handler+0x30>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	3301      	adds	r3, #1
 8008274:	b2da      	uxtb	r2, r3
 8008276:	4b08      	ldr	r3, [pc, #32]	; (8008298 <SysTick_Handler+0x30>)
 8008278:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <SysTick_Handler+0x30>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b09      	cmp	r3, #9
 8008282:	d904      	bls.n	800828e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <SysTick_Handler+0x30>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800828a:	f7ff ffa7 	bl	80081dc <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800828e:	f7f8 fb99 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200002ce 	.word	0x200002ce

0800829c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <_sbrk+0x50>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d102      	bne.n	80082b2 <_sbrk+0x16>
		heap_end = &end;
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <_sbrk+0x50>)
 80082ae:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <_sbrk+0x54>)
 80082b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80082b2:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <_sbrk+0x50>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <_sbrk+0x50>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4413      	add	r3, r2
 80082c0:	466a      	mov	r2, sp
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d907      	bls.n	80082d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80082c6:	f000 f8c9 	bl	800845c <__errno>
 80082ca:	4602      	mov	r2, r0
 80082cc:	230c      	movs	r3, #12
 80082ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082d4:	e006      	b.n	80082e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_sbrk+0x50>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	4a03      	ldr	r2, [pc, #12]	; (80082ec <_sbrk+0x50>)
 80082e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80082e2:	68fb      	ldr	r3, [r7, #12]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200002d0 	.word	0x200002d0
 80082f0:	20004860 	.word	0x20004860

080082f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80082f8:	4b15      	ldr	r3, [pc, #84]	; (8008350 <SystemInit+0x5c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a14      	ldr	r2, [pc, #80]	; (8008350 <SystemInit+0x5c>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008304:	4b12      	ldr	r3, [pc, #72]	; (8008350 <SystemInit+0x5c>)
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	4911      	ldr	r1, [pc, #68]	; (8008350 <SystemInit+0x5c>)
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <SystemInit+0x60>)
 800830c:	4013      	ands	r3, r2
 800830e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <SystemInit+0x5c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <SystemInit+0x5c>)
 8008316:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800831a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <SystemInit+0x5c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a0a      	ldr	r2, [pc, #40]	; (8008350 <SystemInit+0x5c>)
 8008326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800832a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <SystemInit+0x5c>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4a07      	ldr	r2, [pc, #28]	; (8008350 <SystemInit+0x5c>)
 8008332:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008336:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <SystemInit+0x5c>)
 800833a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800833e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <SystemInit+0x64>)
 8008342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008346:	609a      	str	r2, [r3, #8]
#endif 
}
 8008348:	bf00      	nop
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr
 8008350:	40021000 	.word	0x40021000
 8008354:	f8ff0000 	.word	0xf8ff0000
 8008358:	e000ed00 	.word	0xe000ed00

0800835c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff f873 	bl	8007454 <SD_disk_initialize>
 800836e:	4603      	mov	r3, r0
 8008370:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	4603      	mov	r3, r0
 8008382:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff f94e 	bl	8007628 <SD_disk_status>
 800838c:	4603      	mov	r3, r0
 800838e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80083a8:	7bf8      	ldrb	r0, [r7, #15]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	f7ff f94e 	bl	8007650 <SD_disk_read>
 80083b4:	4603      	mov	r3, r0
 80083b6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80083d0:	7bf8      	ldrb	r0, [r7, #15]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	f7ff f9a4 	bl	8007724 <SD_disk_write>
 80083dc:	4603      	mov	r3, r0
 80083de:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	603a      	str	r2, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
 80083f4:	460b      	mov	r3, r1
 80083f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	79b9      	ldrb	r1, [r7, #6]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fa14 	bl	800782c <SD_disk_ioctl>
 8008404:	4603      	mov	r3, r0
 8008406:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008410:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008412:	e003      	b.n	800841c <LoopCopyDataInit>

08008414 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008416:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008418:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800841a:	3104      	adds	r1, #4

0800841c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800841c:	480a      	ldr	r0, [pc, #40]	; (8008448 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008420:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008422:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008424:	d3f6      	bcc.n	8008414 <CopyDataInit>
  ldr r2, =_sbss
 8008426:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008428:	e002      	b.n	8008430 <LoopFillZerobss>

0800842a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800842a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800842c:	f842 3b04 	str.w	r3, [r2], #4

08008430 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008432:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008434:	d3f9      	bcc.n	800842a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008436:	f7ff ff5d 	bl	80082f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800843a:	f000 f815 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800843e:	f7ff fb6b 	bl	8007b18 <main>
  bx lr
 8008442:	4770      	bx	lr
  ldr r3, =_sidata
 8008444:	080094fc 	.word	0x080094fc
  ldr r0, =_sdata
 8008448:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800844c:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8008450:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8008454:	2000485c 	.word	0x2000485c

08008458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008458:	e7fe      	b.n	8008458 <ADC1_2_IRQHandler>
	...

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	; (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000020 	.word	0x20000020

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	2500      	movs	r5, #0
 800846c:	4e0c      	ldr	r6, [pc, #48]	; (80084a0 <__libc_init_array+0x38>)
 800846e:	4c0d      	ldr	r4, [pc, #52]	; (80084a4 <__libc_init_array+0x3c>)
 8008470:	1ba4      	subs	r4, r4, r6
 8008472:	10a4      	asrs	r4, r4, #2
 8008474:	42a5      	cmp	r5, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	f000 fc34 	bl	8008ce4 <_init>
 800847c:	2500      	movs	r5, #0
 800847e:	4e0a      	ldr	r6, [pc, #40]	; (80084a8 <__libc_init_array+0x40>)
 8008480:	4c0a      	ldr	r4, [pc, #40]	; (80084ac <__libc_init_array+0x44>)
 8008482:	1ba4      	subs	r4, r4, r6
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	42a5      	cmp	r5, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008490:	4798      	blx	r3
 8008492:	3501      	adds	r5, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800849a:	4798      	blx	r3
 800849c:	3501      	adds	r5, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	080094f4 	.word	0x080094f4
 80084a4:	080094f4 	.word	0x080094f4
 80084a8:	080094f4 	.word	0x080094f4
 80084ac:	080094f8 	.word	0x080094f8

080084b0 <memset>:
 80084b0:	4603      	mov	r3, r0
 80084b2:	4402      	add	r2, r0
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d100      	bne.n	80084ba <memset+0xa>
 80084b8:	4770      	bx	lr
 80084ba:	f803 1b01 	strb.w	r1, [r3], #1
 80084be:	e7f9      	b.n	80084b4 <memset+0x4>

080084c0 <siprintf>:
 80084c0:	b40e      	push	{r1, r2, r3}
 80084c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084c6:	b500      	push	{lr}
 80084c8:	b09c      	sub	sp, #112	; 0x70
 80084ca:	ab1d      	add	r3, sp, #116	; 0x74
 80084cc:	9002      	str	r0, [sp, #8]
 80084ce:	9006      	str	r0, [sp, #24]
 80084d0:	9107      	str	r1, [sp, #28]
 80084d2:	9104      	str	r1, [sp, #16]
 80084d4:	4808      	ldr	r0, [pc, #32]	; (80084f8 <siprintf+0x38>)
 80084d6:	4909      	ldr	r1, [pc, #36]	; (80084fc <siprintf+0x3c>)
 80084d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084dc:	9105      	str	r1, [sp, #20]
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	a902      	add	r1, sp, #8
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	f000 f866 	bl	80085b4 <_svfiprintf_r>
 80084e8:	2200      	movs	r2, #0
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	b01c      	add	sp, #112	; 0x70
 80084f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f4:	b003      	add	sp, #12
 80084f6:	4770      	bx	lr
 80084f8:	20000020 	.word	0x20000020
 80084fc:	ffff0208 	.word	0xffff0208

08008500 <__ssputs_r>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	688e      	ldr	r6, [r1, #8]
 8008506:	4682      	mov	sl, r0
 8008508:	429e      	cmp	r6, r3
 800850a:	460c      	mov	r4, r1
 800850c:	4690      	mov	r8, r2
 800850e:	4699      	mov	r9, r3
 8008510:	d837      	bhi.n	8008582 <__ssputs_r+0x82>
 8008512:	898a      	ldrh	r2, [r1, #12]
 8008514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008518:	d031      	beq.n	800857e <__ssputs_r+0x7e>
 800851a:	2302      	movs	r3, #2
 800851c:	6825      	ldr	r5, [r4, #0]
 800851e:	6909      	ldr	r1, [r1, #16]
 8008520:	1a6f      	subs	r7, r5, r1
 8008522:	6965      	ldr	r5, [r4, #20]
 8008524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008528:	fb95 f5f3 	sdiv	r5, r5, r3
 800852c:	f109 0301 	add.w	r3, r9, #1
 8008530:	443b      	add	r3, r7
 8008532:	429d      	cmp	r5, r3
 8008534:	bf38      	it	cc
 8008536:	461d      	movcc	r5, r3
 8008538:	0553      	lsls	r3, r2, #21
 800853a:	d530      	bpl.n	800859e <__ssputs_r+0x9e>
 800853c:	4629      	mov	r1, r5
 800853e:	f000 fb37 	bl	8008bb0 <_malloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	b950      	cbnz	r0, 800855c <__ssputs_r+0x5c>
 8008546:	230c      	movs	r3, #12
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800854c:	f8ca 3000 	str.w	r3, [sl]
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	463a      	mov	r2, r7
 800855e:	6921      	ldr	r1, [r4, #16]
 8008560:	f000 fab6 	bl	8008ad0 <memcpy>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800856a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	6126      	str	r6, [r4, #16]
 8008572:	443e      	add	r6, r7
 8008574:	6026      	str	r6, [r4, #0]
 8008576:	464e      	mov	r6, r9
 8008578:	6165      	str	r5, [r4, #20]
 800857a:	1bed      	subs	r5, r5, r7
 800857c:	60a5      	str	r5, [r4, #8]
 800857e:	454e      	cmp	r6, r9
 8008580:	d900      	bls.n	8008584 <__ssputs_r+0x84>
 8008582:	464e      	mov	r6, r9
 8008584:	4632      	mov	r2, r6
 8008586:	4641      	mov	r1, r8
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	f000 faac 	bl	8008ae6 <memmove>
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	2000      	movs	r0, #0
 8008592:	1b9b      	subs	r3, r3, r6
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	441e      	add	r6, r3
 800859a:	6026      	str	r6, [r4, #0]
 800859c:	e7dc      	b.n	8008558 <__ssputs_r+0x58>
 800859e:	462a      	mov	r2, r5
 80085a0:	f000 fb60 	bl	8008c64 <_realloc_r>
 80085a4:	4606      	mov	r6, r0
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1e2      	bne.n	8008570 <__ssputs_r+0x70>
 80085aa:	6921      	ldr	r1, [r4, #16]
 80085ac:	4650      	mov	r0, sl
 80085ae:	f000 fab3 	bl	8008b18 <_free_r>
 80085b2:	e7c8      	b.n	8008546 <__ssputs_r+0x46>

080085b4 <_svfiprintf_r>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	461d      	mov	r5, r3
 80085ba:	898b      	ldrh	r3, [r1, #12]
 80085bc:	b09d      	sub	sp, #116	; 0x74
 80085be:	061f      	lsls	r7, r3, #24
 80085c0:	4680      	mov	r8, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	4616      	mov	r6, r2
 80085c6:	d50f      	bpl.n	80085e8 <_svfiprintf_r+0x34>
 80085c8:	690b      	ldr	r3, [r1, #16]
 80085ca:	b96b      	cbnz	r3, 80085e8 <_svfiprintf_r+0x34>
 80085cc:	2140      	movs	r1, #64	; 0x40
 80085ce:	f000 faef 	bl	8008bb0 <_malloc_r>
 80085d2:	6020      	str	r0, [r4, #0]
 80085d4:	6120      	str	r0, [r4, #16]
 80085d6:	b928      	cbnz	r0, 80085e4 <_svfiprintf_r+0x30>
 80085d8:	230c      	movs	r3, #12
 80085da:	f8c8 3000 	str.w	r3, [r8]
 80085de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085e2:	e0c8      	b.n	8008776 <_svfiprintf_r+0x1c2>
 80085e4:	2340      	movs	r3, #64	; 0x40
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	2300      	movs	r3, #0
 80085ea:	9309      	str	r3, [sp, #36]	; 0x24
 80085ec:	2320      	movs	r3, #32
 80085ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085f2:	2330      	movs	r3, #48	; 0x30
 80085f4:	f04f 0b01 	mov.w	fp, #1
 80085f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085fc:	9503      	str	r5, [sp, #12]
 80085fe:	4637      	mov	r7, r6
 8008600:	463d      	mov	r5, r7
 8008602:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008606:	b10b      	cbz	r3, 800860c <_svfiprintf_r+0x58>
 8008608:	2b25      	cmp	r3, #37	; 0x25
 800860a:	d13e      	bne.n	800868a <_svfiprintf_r+0xd6>
 800860c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008610:	d00b      	beq.n	800862a <_svfiprintf_r+0x76>
 8008612:	4653      	mov	r3, sl
 8008614:	4632      	mov	r2, r6
 8008616:	4621      	mov	r1, r4
 8008618:	4640      	mov	r0, r8
 800861a:	f7ff ff71 	bl	8008500 <__ssputs_r>
 800861e:	3001      	adds	r0, #1
 8008620:	f000 80a4 	beq.w	800876c <_svfiprintf_r+0x1b8>
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	4453      	add	r3, sl
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	783b      	ldrb	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 809d 	beq.w	800876c <_svfiprintf_r+0x1b8>
 8008632:	2300      	movs	r3, #0
 8008634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008644:	931a      	str	r3, [sp, #104]	; 0x68
 8008646:	462f      	mov	r7, r5
 8008648:	2205      	movs	r2, #5
 800864a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800864e:	4850      	ldr	r0, [pc, #320]	; (8008790 <_svfiprintf_r+0x1dc>)
 8008650:	f000 fa30 	bl	8008ab4 <memchr>
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	b9d0      	cbnz	r0, 800868e <_svfiprintf_r+0xda>
 8008658:	06d9      	lsls	r1, r3, #27
 800865a:	bf44      	itt	mi
 800865c:	2220      	movmi	r2, #32
 800865e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008662:	071a      	lsls	r2, r3, #28
 8008664:	bf44      	itt	mi
 8008666:	222b      	movmi	r2, #43	; 0x2b
 8008668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800866c:	782a      	ldrb	r2, [r5, #0]
 800866e:	2a2a      	cmp	r2, #42	; 0x2a
 8008670:	d015      	beq.n	800869e <_svfiprintf_r+0xea>
 8008672:	462f      	mov	r7, r5
 8008674:	2000      	movs	r0, #0
 8008676:	250a      	movs	r5, #10
 8008678:	9a07      	ldr	r2, [sp, #28]
 800867a:	4639      	mov	r1, r7
 800867c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008680:	3b30      	subs	r3, #48	; 0x30
 8008682:	2b09      	cmp	r3, #9
 8008684:	d94d      	bls.n	8008722 <_svfiprintf_r+0x16e>
 8008686:	b1b8      	cbz	r0, 80086b8 <_svfiprintf_r+0x104>
 8008688:	e00f      	b.n	80086aa <_svfiprintf_r+0xf6>
 800868a:	462f      	mov	r7, r5
 800868c:	e7b8      	b.n	8008600 <_svfiprintf_r+0x4c>
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <_svfiprintf_r+0x1dc>)
 8008690:	463d      	mov	r5, r7
 8008692:	1a80      	subs	r0, r0, r2
 8008694:	fa0b f000 	lsl.w	r0, fp, r0
 8008698:	4318      	orrs	r0, r3
 800869a:	9004      	str	r0, [sp, #16]
 800869c:	e7d3      	b.n	8008646 <_svfiprintf_r+0x92>
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	1d11      	adds	r1, r2, #4
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	9103      	str	r1, [sp, #12]
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	db01      	blt.n	80086ae <_svfiprintf_r+0xfa>
 80086aa:	9207      	str	r2, [sp, #28]
 80086ac:	e004      	b.n	80086b8 <_svfiprintf_r+0x104>
 80086ae:	4252      	negs	r2, r2
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	783b      	ldrb	r3, [r7, #0]
 80086ba:	2b2e      	cmp	r3, #46	; 0x2e
 80086bc:	d10c      	bne.n	80086d8 <_svfiprintf_r+0x124>
 80086be:	787b      	ldrb	r3, [r7, #1]
 80086c0:	2b2a      	cmp	r3, #42	; 0x2a
 80086c2:	d133      	bne.n	800872c <_svfiprintf_r+0x178>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	3702      	adds	r7, #2
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	9203      	str	r2, [sp, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb8      	it	lt
 80086d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	4d2e      	ldr	r5, [pc, #184]	; (8008794 <_svfiprintf_r+0x1e0>)
 80086da:	2203      	movs	r2, #3
 80086dc:	7839      	ldrb	r1, [r7, #0]
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 f9e8 	bl	8008ab4 <memchr>
 80086e4:	b138      	cbz	r0, 80086f6 <_svfiprintf_r+0x142>
 80086e6:	2340      	movs	r3, #64	; 0x40
 80086e8:	1b40      	subs	r0, r0, r5
 80086ea:	fa03 f000 	lsl.w	r0, r3, r0
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	3701      	adds	r7, #1
 80086f2:	4303      	orrs	r3, r0
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	7839      	ldrb	r1, [r7, #0]
 80086f8:	2206      	movs	r2, #6
 80086fa:	4827      	ldr	r0, [pc, #156]	; (8008798 <_svfiprintf_r+0x1e4>)
 80086fc:	1c7e      	adds	r6, r7, #1
 80086fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008702:	f000 f9d7 	bl	8008ab4 <memchr>
 8008706:	2800      	cmp	r0, #0
 8008708:	d038      	beq.n	800877c <_svfiprintf_r+0x1c8>
 800870a:	4b24      	ldr	r3, [pc, #144]	; (800879c <_svfiprintf_r+0x1e8>)
 800870c:	bb13      	cbnz	r3, 8008754 <_svfiprintf_r+0x1a0>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	3307      	adds	r3, #7
 8008712:	f023 0307 	bic.w	r3, r3, #7
 8008716:	3308      	adds	r3, #8
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871c:	444b      	add	r3, r9
 800871e:	9309      	str	r3, [sp, #36]	; 0x24
 8008720:	e76d      	b.n	80085fe <_svfiprintf_r+0x4a>
 8008722:	fb05 3202 	mla	r2, r5, r2, r3
 8008726:	2001      	movs	r0, #1
 8008728:	460f      	mov	r7, r1
 800872a:	e7a6      	b.n	800867a <_svfiprintf_r+0xc6>
 800872c:	2300      	movs	r3, #0
 800872e:	250a      	movs	r5, #10
 8008730:	4619      	mov	r1, r3
 8008732:	3701      	adds	r7, #1
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	4638      	mov	r0, r7
 8008738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800873c:	3a30      	subs	r2, #48	; 0x30
 800873e:	2a09      	cmp	r2, #9
 8008740:	d903      	bls.n	800874a <_svfiprintf_r+0x196>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0c8      	beq.n	80086d8 <_svfiprintf_r+0x124>
 8008746:	9105      	str	r1, [sp, #20]
 8008748:	e7c6      	b.n	80086d8 <_svfiprintf_r+0x124>
 800874a:	fb05 2101 	mla	r1, r5, r1, r2
 800874e:	2301      	movs	r3, #1
 8008750:	4607      	mov	r7, r0
 8008752:	e7f0      	b.n	8008736 <_svfiprintf_r+0x182>
 8008754:	ab03      	add	r3, sp, #12
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4622      	mov	r2, r4
 800875a:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <_svfiprintf_r+0x1ec>)
 800875c:	a904      	add	r1, sp, #16
 800875e:	4640      	mov	r0, r8
 8008760:	f3af 8000 	nop.w
 8008764:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008768:	4681      	mov	r9, r0
 800876a:	d1d6      	bne.n	800871a <_svfiprintf_r+0x166>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	065b      	lsls	r3, r3, #25
 8008770:	f53f af35 	bmi.w	80085de <_svfiprintf_r+0x2a>
 8008774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008776:	b01d      	add	sp, #116	; 0x74
 8008778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877c:	ab03      	add	r3, sp, #12
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4622      	mov	r2, r4
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <_svfiprintf_r+0x1ec>)
 8008784:	a904      	add	r1, sp, #16
 8008786:	4640      	mov	r0, r8
 8008788:	f000 f882 	bl	8008890 <_printf_i>
 800878c:	e7ea      	b.n	8008764 <_svfiprintf_r+0x1b0>
 800878e:	bf00      	nop
 8008790:	080094c0 	.word	0x080094c0
 8008794:	080094c6 	.word	0x080094c6
 8008798:	080094ca 	.word	0x080094ca
 800879c:	00000000 	.word	0x00000000
 80087a0:	08008501 	.word	0x08008501

080087a4 <_printf_common>:
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	4691      	mov	r9, r2
 80087aa:	461f      	mov	r7, r3
 80087ac:	688a      	ldr	r2, [r1, #8]
 80087ae:	690b      	ldr	r3, [r1, #16]
 80087b0:	4606      	mov	r6, r0
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bfb8      	it	lt
 80087b6:	4613      	movlt	r3, r2
 80087b8:	f8c9 3000 	str.w	r3, [r9]
 80087bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c0:	460c      	mov	r4, r1
 80087c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087c6:	b112      	cbz	r2, 80087ce <_printf_common+0x2a>
 80087c8:	3301      	adds	r3, #1
 80087ca:	f8c9 3000 	str.w	r3, [r9]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087d8:	3302      	addmi	r3, #2
 80087da:	f8c9 3000 	strmi.w	r3, [r9]
 80087de:	6825      	ldr	r5, [r4, #0]
 80087e0:	f015 0506 	ands.w	r5, r5, #6
 80087e4:	d107      	bne.n	80087f6 <_printf_common+0x52>
 80087e6:	f104 0a19 	add.w	sl, r4, #25
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	f8d9 2000 	ldr.w	r2, [r9]
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	42ab      	cmp	r3, r5
 80087f4:	dc29      	bgt.n	800884a <_printf_common+0xa6>
 80087f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	3300      	adds	r3, #0
 80087fe:	bf18      	it	ne
 8008800:	2301      	movne	r3, #1
 8008802:	0692      	lsls	r2, r2, #26
 8008804:	d42e      	bmi.n	8008864 <_printf_common+0xc0>
 8008806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800880a:	4639      	mov	r1, r7
 800880c:	4630      	mov	r0, r6
 800880e:	47c0      	blx	r8
 8008810:	3001      	adds	r0, #1
 8008812:	d021      	beq.n	8008858 <_printf_common+0xb4>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	68e5      	ldr	r5, [r4, #12]
 8008818:	f003 0306 	and.w	r3, r3, #6
 800881c:	2b04      	cmp	r3, #4
 800881e:	bf18      	it	ne
 8008820:	2500      	movne	r5, #0
 8008822:	f8d9 2000 	ldr.w	r2, [r9]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	bf08      	it	eq
 800882c:	1aad      	subeq	r5, r5, r2
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	6922      	ldr	r2, [r4, #16]
 8008832:	bf08      	it	eq
 8008834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008838:	4293      	cmp	r3, r2
 800883a:	bfc4      	itt	gt
 800883c:	1a9b      	subgt	r3, r3, r2
 800883e:	18ed      	addgt	r5, r5, r3
 8008840:	341a      	adds	r4, #26
 8008842:	454d      	cmp	r5, r9
 8008844:	d11a      	bne.n	800887c <_printf_common+0xd8>
 8008846:	2000      	movs	r0, #0
 8008848:	e008      	b.n	800885c <_printf_common+0xb8>
 800884a:	2301      	movs	r3, #1
 800884c:	4652      	mov	r2, sl
 800884e:	4639      	mov	r1, r7
 8008850:	4630      	mov	r0, r6
 8008852:	47c0      	blx	r8
 8008854:	3001      	adds	r0, #1
 8008856:	d103      	bne.n	8008860 <_printf_common+0xbc>
 8008858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008860:	3501      	adds	r5, #1
 8008862:	e7c2      	b.n	80087ea <_printf_common+0x46>
 8008864:	2030      	movs	r0, #48	; 0x30
 8008866:	18e1      	adds	r1, r4, r3
 8008868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008872:	4422      	add	r2, r4
 8008874:	3302      	adds	r3, #2
 8008876:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800887a:	e7c4      	b.n	8008806 <_printf_common+0x62>
 800887c:	2301      	movs	r3, #1
 800887e:	4622      	mov	r2, r4
 8008880:	4639      	mov	r1, r7
 8008882:	4630      	mov	r0, r6
 8008884:	47c0      	blx	r8
 8008886:	3001      	adds	r0, #1
 8008888:	d0e6      	beq.n	8008858 <_printf_common+0xb4>
 800888a:	f109 0901 	add.w	r9, r9, #1
 800888e:	e7d8      	b.n	8008842 <_printf_common+0x9e>

08008890 <_printf_i>:
 8008890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008898:	460c      	mov	r4, r1
 800889a:	7e09      	ldrb	r1, [r1, #24]
 800889c:	b085      	sub	sp, #20
 800889e:	296e      	cmp	r1, #110	; 0x6e
 80088a0:	4617      	mov	r7, r2
 80088a2:	4606      	mov	r6, r0
 80088a4:	4698      	mov	r8, r3
 80088a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a8:	f000 80b3 	beq.w	8008a12 <_printf_i+0x182>
 80088ac:	d822      	bhi.n	80088f4 <_printf_i+0x64>
 80088ae:	2963      	cmp	r1, #99	; 0x63
 80088b0:	d036      	beq.n	8008920 <_printf_i+0x90>
 80088b2:	d80a      	bhi.n	80088ca <_printf_i+0x3a>
 80088b4:	2900      	cmp	r1, #0
 80088b6:	f000 80b9 	beq.w	8008a2c <_printf_i+0x19c>
 80088ba:	2958      	cmp	r1, #88	; 0x58
 80088bc:	f000 8083 	beq.w	80089c6 <_printf_i+0x136>
 80088c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088c8:	e032      	b.n	8008930 <_printf_i+0xa0>
 80088ca:	2964      	cmp	r1, #100	; 0x64
 80088cc:	d001      	beq.n	80088d2 <_printf_i+0x42>
 80088ce:	2969      	cmp	r1, #105	; 0x69
 80088d0:	d1f6      	bne.n	80088c0 <_printf_i+0x30>
 80088d2:	6820      	ldr	r0, [r4, #0]
 80088d4:	6813      	ldr	r3, [r2, #0]
 80088d6:	0605      	lsls	r5, r0, #24
 80088d8:	f103 0104 	add.w	r1, r3, #4
 80088dc:	d52a      	bpl.n	8008934 <_printf_i+0xa4>
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da03      	bge.n	80088ee <_printf_i+0x5e>
 80088e6:	222d      	movs	r2, #45	; 0x2d
 80088e8:	425b      	negs	r3, r3
 80088ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088ee:	486f      	ldr	r0, [pc, #444]	; (8008aac <_printf_i+0x21c>)
 80088f0:	220a      	movs	r2, #10
 80088f2:	e039      	b.n	8008968 <_printf_i+0xd8>
 80088f4:	2973      	cmp	r1, #115	; 0x73
 80088f6:	f000 809d 	beq.w	8008a34 <_printf_i+0x1a4>
 80088fa:	d808      	bhi.n	800890e <_printf_i+0x7e>
 80088fc:	296f      	cmp	r1, #111	; 0x6f
 80088fe:	d020      	beq.n	8008942 <_printf_i+0xb2>
 8008900:	2970      	cmp	r1, #112	; 0x70
 8008902:	d1dd      	bne.n	80088c0 <_printf_i+0x30>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	f043 0320 	orr.w	r3, r3, #32
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	e003      	b.n	8008916 <_printf_i+0x86>
 800890e:	2975      	cmp	r1, #117	; 0x75
 8008910:	d017      	beq.n	8008942 <_printf_i+0xb2>
 8008912:	2978      	cmp	r1, #120	; 0x78
 8008914:	d1d4      	bne.n	80088c0 <_printf_i+0x30>
 8008916:	2378      	movs	r3, #120	; 0x78
 8008918:	4865      	ldr	r0, [pc, #404]	; (8008ab0 <_printf_i+0x220>)
 800891a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891e:	e055      	b.n	80089cc <_printf_i+0x13c>
 8008920:	6813      	ldr	r3, [r2, #0]
 8008922:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008926:	1d19      	adds	r1, r3, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6011      	str	r1, [r2, #0]
 800892c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008930:	2301      	movs	r3, #1
 8008932:	e08c      	b.n	8008a4e <_printf_i+0x1be>
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800893a:	6011      	str	r1, [r2, #0]
 800893c:	bf18      	it	ne
 800893e:	b21b      	sxthne	r3, r3
 8008940:	e7cf      	b.n	80088e2 <_printf_i+0x52>
 8008942:	6813      	ldr	r3, [r2, #0]
 8008944:	6825      	ldr	r5, [r4, #0]
 8008946:	1d18      	adds	r0, r3, #4
 8008948:	6010      	str	r0, [r2, #0]
 800894a:	0628      	lsls	r0, r5, #24
 800894c:	d501      	bpl.n	8008952 <_printf_i+0xc2>
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	e002      	b.n	8008958 <_printf_i+0xc8>
 8008952:	0668      	lsls	r0, r5, #25
 8008954:	d5fb      	bpl.n	800894e <_printf_i+0xbe>
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	296f      	cmp	r1, #111	; 0x6f
 800895a:	bf14      	ite	ne
 800895c:	220a      	movne	r2, #10
 800895e:	2208      	moveq	r2, #8
 8008960:	4852      	ldr	r0, [pc, #328]	; (8008aac <_printf_i+0x21c>)
 8008962:	2100      	movs	r1, #0
 8008964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008968:	6865      	ldr	r5, [r4, #4]
 800896a:	2d00      	cmp	r5, #0
 800896c:	60a5      	str	r5, [r4, #8]
 800896e:	f2c0 8095 	blt.w	8008a9c <_printf_i+0x20c>
 8008972:	6821      	ldr	r1, [r4, #0]
 8008974:	f021 0104 	bic.w	r1, r1, #4
 8008978:	6021      	str	r1, [r4, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d13d      	bne.n	80089fa <_printf_i+0x16a>
 800897e:	2d00      	cmp	r5, #0
 8008980:	f040 808e 	bne.w	8008aa0 <_printf_i+0x210>
 8008984:	4665      	mov	r5, ip
 8008986:	2a08      	cmp	r2, #8
 8008988:	d10b      	bne.n	80089a2 <_printf_i+0x112>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	07db      	lsls	r3, r3, #31
 800898e:	d508      	bpl.n	80089a2 <_printf_i+0x112>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	429a      	cmp	r2, r3
 8008996:	bfde      	ittt	le
 8008998:	2330      	movle	r3, #48	; 0x30
 800899a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800899e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089a2:	ebac 0305 	sub.w	r3, ip, r5
 80089a6:	6123      	str	r3, [r4, #16]
 80089a8:	f8cd 8000 	str.w	r8, [sp]
 80089ac:	463b      	mov	r3, r7
 80089ae:	aa03      	add	r2, sp, #12
 80089b0:	4621      	mov	r1, r4
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7ff fef6 	bl	80087a4 <_printf_common>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d14d      	bne.n	8008a58 <_printf_i+0x1c8>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c0:	b005      	add	sp, #20
 80089c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c6:	4839      	ldr	r0, [pc, #228]	; (8008aac <_printf_i+0x21c>)
 80089c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089cc:	6813      	ldr	r3, [r2, #0]
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	1d1d      	adds	r5, r3, #4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6015      	str	r5, [r2, #0]
 80089d6:	060a      	lsls	r2, r1, #24
 80089d8:	d50b      	bpl.n	80089f2 <_printf_i+0x162>
 80089da:	07ca      	lsls	r2, r1, #31
 80089dc:	bf44      	itt	mi
 80089de:	f041 0120 	orrmi.w	r1, r1, #32
 80089e2:	6021      	strmi	r1, [r4, #0]
 80089e4:	b91b      	cbnz	r3, 80089ee <_printf_i+0x15e>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	f022 0220 	bic.w	r2, r2, #32
 80089ec:	6022      	str	r2, [r4, #0]
 80089ee:	2210      	movs	r2, #16
 80089f0:	e7b7      	b.n	8008962 <_printf_i+0xd2>
 80089f2:	064d      	lsls	r5, r1, #25
 80089f4:	bf48      	it	mi
 80089f6:	b29b      	uxthmi	r3, r3
 80089f8:	e7ef      	b.n	80089da <_printf_i+0x14a>
 80089fa:	4665      	mov	r5, ip
 80089fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a00:	fb02 3311 	mls	r3, r2, r1, r3
 8008a04:	5cc3      	ldrb	r3, [r0, r3]
 8008a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d1f5      	bne.n	80089fc <_printf_i+0x16c>
 8008a10:	e7b9      	b.n	8008986 <_printf_i+0xf6>
 8008a12:	6813      	ldr	r3, [r2, #0]
 8008a14:	6825      	ldr	r5, [r4, #0]
 8008a16:	1d18      	adds	r0, r3, #4
 8008a18:	6961      	ldr	r1, [r4, #20]
 8008a1a:	6010      	str	r0, [r2, #0]
 8008a1c:	0628      	lsls	r0, r5, #24
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	d501      	bpl.n	8008a26 <_printf_i+0x196>
 8008a22:	6019      	str	r1, [r3, #0]
 8008a24:	e002      	b.n	8008a2c <_printf_i+0x19c>
 8008a26:	066a      	lsls	r2, r5, #25
 8008a28:	d5fb      	bpl.n	8008a22 <_printf_i+0x192>
 8008a2a:	8019      	strh	r1, [r3, #0]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4665      	mov	r5, ip
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	e7b9      	b.n	80089a8 <_printf_i+0x118>
 8008a34:	6813      	ldr	r3, [r2, #0]
 8008a36:	1d19      	adds	r1, r3, #4
 8008a38:	6011      	str	r1, [r2, #0]
 8008a3a:	681d      	ldr	r5, [r3, #0]
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 f837 	bl	8008ab4 <memchr>
 8008a46:	b108      	cbz	r0, 8008a4c <_printf_i+0x1bc>
 8008a48:	1b40      	subs	r0, r0, r5
 8008a4a:	6060      	str	r0, [r4, #4]
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2300      	movs	r3, #0
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a56:	e7a7      	b.n	80089a8 <_printf_i+0x118>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	47c0      	blx	r8
 8008a62:	3001      	adds	r0, #1
 8008a64:	d0aa      	beq.n	80089bc <_printf_i+0x12c>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	079b      	lsls	r3, r3, #30
 8008a6a:	d413      	bmi.n	8008a94 <_printf_i+0x204>
 8008a6c:	68e0      	ldr	r0, [r4, #12]
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	4298      	cmp	r0, r3
 8008a72:	bfb8      	it	lt
 8008a74:	4618      	movlt	r0, r3
 8008a76:	e7a3      	b.n	80089c0 <_printf_i+0x130>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	464a      	mov	r2, r9
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4630      	mov	r0, r6
 8008a80:	47c0      	blx	r8
 8008a82:	3001      	adds	r0, #1
 8008a84:	d09a      	beq.n	80089bc <_printf_i+0x12c>
 8008a86:	3501      	adds	r5, #1
 8008a88:	68e3      	ldr	r3, [r4, #12]
 8008a8a:	9a03      	ldr	r2, [sp, #12]
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	42ab      	cmp	r3, r5
 8008a90:	dcf2      	bgt.n	8008a78 <_printf_i+0x1e8>
 8008a92:	e7eb      	b.n	8008a6c <_printf_i+0x1dc>
 8008a94:	2500      	movs	r5, #0
 8008a96:	f104 0919 	add.w	r9, r4, #25
 8008a9a:	e7f5      	b.n	8008a88 <_printf_i+0x1f8>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1ac      	bne.n	80089fa <_printf_i+0x16a>
 8008aa0:	7803      	ldrb	r3, [r0, #0]
 8008aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aaa:	e76c      	b.n	8008986 <_printf_i+0xf6>
 8008aac:	080094d1 	.word	0x080094d1
 8008ab0:	080094e2 	.word	0x080094e2

08008ab4 <memchr>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	b2c9      	uxtb	r1, r1
 8008ab8:	4402      	add	r2, r0
 8008aba:	4290      	cmp	r0, r2
 8008abc:	4603      	mov	r3, r0
 8008abe:	d101      	bne.n	8008ac4 <memchr+0x10>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e003      	b.n	8008acc <memchr+0x18>
 8008ac4:	781c      	ldrb	r4, [r3, #0]
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	428c      	cmp	r4, r1
 8008aca:	d1f6      	bne.n	8008aba <memchr+0x6>
 8008acc:	4618      	mov	r0, r3
 8008ace:	bd10      	pop	{r4, pc}

08008ad0 <memcpy>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	440a      	add	r2, r1
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d100      	bne.n	8008adc <memcpy+0xc>
 8008ada:	bd10      	pop	{r4, pc}
 8008adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae4:	e7f7      	b.n	8008ad6 <memcpy+0x6>

08008ae6 <memmove>:
 8008ae6:	4288      	cmp	r0, r1
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	eb01 0302 	add.w	r3, r1, r2
 8008aee:	d807      	bhi.n	8008b00 <memmove+0x1a>
 8008af0:	1e42      	subs	r2, r0, #1
 8008af2:	4299      	cmp	r1, r3
 8008af4:	d00a      	beq.n	8008b0c <memmove+0x26>
 8008af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008afa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008afe:	e7f8      	b.n	8008af2 <memmove+0xc>
 8008b00:	4283      	cmp	r3, r0
 8008b02:	d9f5      	bls.n	8008af0 <memmove+0xa>
 8008b04:	1881      	adds	r1, r0, r2
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	42d3      	cmn	r3, r2
 8008b0a:	d100      	bne.n	8008b0e <memmove+0x28>
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b16:	e7f7      	b.n	8008b08 <memmove+0x22>

08008b18 <_free_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d043      	beq.n	8008ba8 <_free_r+0x90>
 8008b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b24:	1f0c      	subs	r4, r1, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfb8      	it	lt
 8008b2a:	18e4      	addlt	r4, r4, r3
 8008b2c:	f000 f8d0 	bl	8008cd0 <__malloc_lock>
 8008b30:	4a1e      	ldr	r2, [pc, #120]	; (8008bac <_free_r+0x94>)
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	4610      	mov	r0, r2
 8008b36:	b933      	cbnz	r3, 8008b46 <_free_r+0x2e>
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	6014      	str	r4, [r2, #0]
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b42:	f000 b8c6 	b.w	8008cd2 <__malloc_unlock>
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	d90b      	bls.n	8008b62 <_free_r+0x4a>
 8008b4a:	6821      	ldr	r1, [r4, #0]
 8008b4c:	1862      	adds	r2, r4, r1
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	bf01      	itttt	eq
 8008b52:	681a      	ldreq	r2, [r3, #0]
 8008b54:	685b      	ldreq	r3, [r3, #4]
 8008b56:	1852      	addeq	r2, r2, r1
 8008b58:	6022      	streq	r2, [r4, #0]
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	6004      	str	r4, [r0, #0]
 8008b5e:	e7ed      	b.n	8008b3c <_free_r+0x24>
 8008b60:	4613      	mov	r3, r2
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	b10a      	cbz	r2, 8008b6a <_free_r+0x52>
 8008b66:	42a2      	cmp	r2, r4
 8008b68:	d9fa      	bls.n	8008b60 <_free_r+0x48>
 8008b6a:	6819      	ldr	r1, [r3, #0]
 8008b6c:	1858      	adds	r0, r3, r1
 8008b6e:	42a0      	cmp	r0, r4
 8008b70:	d10b      	bne.n	8008b8a <_free_r+0x72>
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	4401      	add	r1, r0
 8008b76:	1858      	adds	r0, r3, r1
 8008b78:	4282      	cmp	r2, r0
 8008b7a:	6019      	str	r1, [r3, #0]
 8008b7c:	d1de      	bne.n	8008b3c <_free_r+0x24>
 8008b7e:	6810      	ldr	r0, [r2, #0]
 8008b80:	6852      	ldr	r2, [r2, #4]
 8008b82:	4401      	add	r1, r0
 8008b84:	6019      	str	r1, [r3, #0]
 8008b86:	605a      	str	r2, [r3, #4]
 8008b88:	e7d8      	b.n	8008b3c <_free_r+0x24>
 8008b8a:	d902      	bls.n	8008b92 <_free_r+0x7a>
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	e7d4      	b.n	8008b3c <_free_r+0x24>
 8008b92:	6820      	ldr	r0, [r4, #0]
 8008b94:	1821      	adds	r1, r4, r0
 8008b96:	428a      	cmp	r2, r1
 8008b98:	bf01      	itttt	eq
 8008b9a:	6811      	ldreq	r1, [r2, #0]
 8008b9c:	6852      	ldreq	r2, [r2, #4]
 8008b9e:	1809      	addeq	r1, r1, r0
 8008ba0:	6021      	streq	r1, [r4, #0]
 8008ba2:	6062      	str	r2, [r4, #4]
 8008ba4:	605c      	str	r4, [r3, #4]
 8008ba6:	e7c9      	b.n	8008b3c <_free_r+0x24>
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	bf00      	nop
 8008bac:	200002d4 	.word	0x200002d4

08008bb0 <_malloc_r>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	1ccd      	adds	r5, r1, #3
 8008bb4:	f025 0503 	bic.w	r5, r5, #3
 8008bb8:	3508      	adds	r5, #8
 8008bba:	2d0c      	cmp	r5, #12
 8008bbc:	bf38      	it	cc
 8008bbe:	250c      	movcc	r5, #12
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	db01      	blt.n	8008bca <_malloc_r+0x1a>
 8008bc6:	42a9      	cmp	r1, r5
 8008bc8:	d903      	bls.n	8008bd2 <_malloc_r+0x22>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	2000      	movs	r0, #0
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	f000 f87d 	bl	8008cd0 <__malloc_lock>
 8008bd6:	4a21      	ldr	r2, [pc, #132]	; (8008c5c <_malloc_r+0xac>)
 8008bd8:	6814      	ldr	r4, [r2, #0]
 8008bda:	4621      	mov	r1, r4
 8008bdc:	b991      	cbnz	r1, 8008c04 <_malloc_r+0x54>
 8008bde:	4c20      	ldr	r4, [pc, #128]	; (8008c60 <_malloc_r+0xb0>)
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	b91b      	cbnz	r3, 8008bec <_malloc_r+0x3c>
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 f863 	bl	8008cb0 <_sbrk_r>
 8008bea:	6020      	str	r0, [r4, #0]
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f000 f85e 	bl	8008cb0 <_sbrk_r>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d124      	bne.n	8008c42 <_malloc_r+0x92>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	f000 f868 	bl	8008cd2 <__malloc_unlock>
 8008c02:	e7e4      	b.n	8008bce <_malloc_r+0x1e>
 8008c04:	680b      	ldr	r3, [r1, #0]
 8008c06:	1b5b      	subs	r3, r3, r5
 8008c08:	d418      	bmi.n	8008c3c <_malloc_r+0x8c>
 8008c0a:	2b0b      	cmp	r3, #11
 8008c0c:	d90f      	bls.n	8008c2e <_malloc_r+0x7e>
 8008c0e:	600b      	str	r3, [r1, #0]
 8008c10:	18cc      	adds	r4, r1, r3
 8008c12:	50cd      	str	r5, [r1, r3]
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f85c 	bl	8008cd2 <__malloc_unlock>
 8008c1a:	f104 000b 	add.w	r0, r4, #11
 8008c1e:	1d23      	adds	r3, r4, #4
 8008c20:	f020 0007 	bic.w	r0, r0, #7
 8008c24:	1ac3      	subs	r3, r0, r3
 8008c26:	d0d3      	beq.n	8008bd0 <_malloc_r+0x20>
 8008c28:	425a      	negs	r2, r3
 8008c2a:	50e2      	str	r2, [r4, r3]
 8008c2c:	e7d0      	b.n	8008bd0 <_malloc_r+0x20>
 8008c2e:	684b      	ldr	r3, [r1, #4]
 8008c30:	428c      	cmp	r4, r1
 8008c32:	bf16      	itet	ne
 8008c34:	6063      	strne	r3, [r4, #4]
 8008c36:	6013      	streq	r3, [r2, #0]
 8008c38:	460c      	movne	r4, r1
 8008c3a:	e7eb      	b.n	8008c14 <_malloc_r+0x64>
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	6849      	ldr	r1, [r1, #4]
 8008c40:	e7cc      	b.n	8008bdc <_malloc_r+0x2c>
 8008c42:	1cc4      	adds	r4, r0, #3
 8008c44:	f024 0403 	bic.w	r4, r4, #3
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d005      	beq.n	8008c58 <_malloc_r+0xa8>
 8008c4c:	1a21      	subs	r1, r4, r0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f000 f82e 	bl	8008cb0 <_sbrk_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0cf      	beq.n	8008bf8 <_malloc_r+0x48>
 8008c58:	6025      	str	r5, [r4, #0]
 8008c5a:	e7db      	b.n	8008c14 <_malloc_r+0x64>
 8008c5c:	200002d4 	.word	0x200002d4
 8008c60:	200002d8 	.word	0x200002d8

08008c64 <_realloc_r>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	4607      	mov	r7, r0
 8008c68:	4614      	mov	r4, r2
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	b921      	cbnz	r1, 8008c78 <_realloc_r+0x14>
 8008c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c72:	4611      	mov	r1, r2
 8008c74:	f7ff bf9c 	b.w	8008bb0 <_malloc_r>
 8008c78:	b922      	cbnz	r2, 8008c84 <_realloc_r+0x20>
 8008c7a:	f7ff ff4d 	bl	8008b18 <_free_r>
 8008c7e:	4625      	mov	r5, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c84:	f000 f826 	bl	8008cd4 <_malloc_usable_size_r>
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d20f      	bcs.n	8008cac <_realloc_r+0x48>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7ff ff8e 	bl	8008bb0 <_malloc_r>
 8008c94:	4605      	mov	r5, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0f2      	beq.n	8008c80 <_realloc_r+0x1c>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	f7ff ff17 	bl	8008ad0 <memcpy>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff ff37 	bl	8008b18 <_free_r>
 8008caa:	e7e9      	b.n	8008c80 <_realloc_r+0x1c>
 8008cac:	4635      	mov	r5, r6
 8008cae:	e7e7      	b.n	8008c80 <_realloc_r+0x1c>

08008cb0 <_sbrk_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4c05      	ldr	r4, [pc, #20]	; (8008ccc <_sbrk_r+0x1c>)
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	f7ff faee 	bl	800829c <_sbrk>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_sbrk_r+0x1a>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_sbrk_r+0x1a>
 8008cc8:	602b      	str	r3, [r5, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20004858 	.word	0x20004858

08008cd0 <__malloc_lock>:
 8008cd0:	4770      	bx	lr

08008cd2 <__malloc_unlock>:
 8008cd2:	4770      	bx	lr

08008cd4 <_malloc_usable_size_r>:
 8008cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd8:	1f18      	subs	r0, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfbc      	itt	lt
 8008cde:	580b      	ldrlt	r3, [r1, r0]
 8008ce0:	18c0      	addlt	r0, r0, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_init>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr

08008cf0 <_fini>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr
